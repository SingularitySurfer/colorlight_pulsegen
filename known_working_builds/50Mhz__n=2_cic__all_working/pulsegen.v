//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (b84a858b) on 2020-10-20 20:53:28
//--------------------------------------------------------------------------------
module pulsegen(
	input wire clk25,
	input wire user_btn_n0,
	output wire eth_clocks_tx,
	input wire eth_clocks_rx,
	output wire eth_rst_n,
	input wire eth_mdio,
	output wire eth_mdc,
	input wire eth_rx_ctl,
	input wire [3:0] eth_rx_data,
	output wire eth_tx_ctl,
	output wire [3:0] eth_tx_data,
	output wire spiflash_cs_n,
	output wire spiflash_mosi,
	input wire spiflash_miso,
	output wire user_led_n,
	output wire r,
	output wire y,
	output wire g,
	output wire gpio1
);

reg main_reset_storage = 1'd0;
reg main_reset_re = 1'd0;
reg [31:0] main_scratch_storage = 32'd305419896;
reg main_scratch_re = 1'd0;
wire [31:0] main_bus_errors_status;
wire main_bus_errors_we;
wire main_reset;
wire main_bus_error;
reg [31:0] main_bus_errors = 32'd0;
(* keep = "true" *) wire sys_clk;
wire sys_rst;
wire crg_reset;
wire crg_locked;
wire crg_clkin;
wire crg_clkout;
reg ethphy_reset_storage = 1'd0;
reg ethphy_reset_re = 1'd0;
(* keep = "true" *) wire eth_rx_clk;
wire eth_rx_rst;
(* keep = "true" *) wire eth_tx_clk;
wire eth_tx_rst;
wire ethphy_eth_tx_clk_o;
wire ethphy_reset0;
wire ethphy_reset1;
reg [8:0] ethphy_counter = 9'd0;
wire ethphy_counter_done;
wire ethphy_counter_ce;
wire ethphy_sink_valid;
wire ethphy_sink_ready;
wire ethphy_sink_first;
wire ethphy_sink_last;
wire [7:0] ethphy_sink_payload_data;
wire ethphy_sink_payload_last_be;
wire ethphy_sink_payload_error;
wire ethphy_tx_ctl_oddrx1f;
wire [3:0] ethphy_tx_data_oddrx1f;
reg ethphy_liteethphyrgmiirx_source_valid = 1'd0;
wire ethphy_liteethphyrgmiirx_source_ready;
reg ethphy_liteethphyrgmiirx_source_first = 1'd0;
wire ethphy_liteethphyrgmiirx_source_last;
reg [7:0] ethphy_liteethphyrgmiirx_source_payload_data = 8'd0;
reg ethphy_liteethphyrgmiirx_source_payload_last_be = 1'd0;
reg ethphy_liteethphyrgmiirx_source_payload_error = 1'd0;
reg ethphy_liteethphyrgmiirx_link_status = 1'd0;
reg ethphy_liteethphyrgmiirx_clock_speed = 1'd0;
reg ethphy_liteethphyrgmiirx_duplex_status = 1'd0;
reg [2:0] ethphy_liteethphyrgmiirx_status = 3'd0;
wire ethphy_liteethphyrgmiirx_we;
wire ethphy_liteethphyrgmiirx_rx_ctl_delayf;
wire [1:0] ethphy_liteethphyrgmiirx_rx_ctl;
reg [1:0] ethphy_liteethphyrgmiirx_rx_ctl_reg = 2'd0;
wire [3:0] ethphy_liteethphyrgmiirx_rx_data_delayf;
wire [7:0] ethphy_liteethphyrgmiirx_rx_data;
reg [7:0] ethphy_liteethphyrgmiirx_rx_data_reg = 8'd0;
reg [1:0] ethphy_liteethphyrgmiirx_rx_ctl_reg_d = 2'd0;
wire ethphy_liteethphyrgmiirx_last;
wire ethphy_mdio_mdc;
wire ethphy_mdio_oe;
wire ethphy_mdio_w;
reg [2:0] ethphy_mdio_storage = 3'd0;
reg ethphy_mdio_re = 1'd0;
reg ethphy_mdio_r = 1'd0;
reg ethphy_mdio_status = 1'd0;
wire ethphy_mdio_we;
wire ethphy_mdio_data_w;
wire ethphy_mdio_data_oe;
wire ethphy_mdio_data_r;
wire main_ethcore_mac_tx_gap_inserter_sink_valid;
reg main_ethcore_mac_tx_gap_inserter_sink_ready = 1'd0;
wire main_ethcore_mac_tx_gap_inserter_sink_first;
wire main_ethcore_mac_tx_gap_inserter_sink_last;
wire [7:0] main_ethcore_mac_tx_gap_inserter_sink_payload_data;
wire main_ethcore_mac_tx_gap_inserter_sink_payload_last_be;
wire main_ethcore_mac_tx_gap_inserter_sink_payload_error;
reg main_ethcore_mac_tx_gap_inserter_source_valid = 1'd0;
wire main_ethcore_mac_tx_gap_inserter_source_ready;
reg main_ethcore_mac_tx_gap_inserter_source_first = 1'd0;
reg main_ethcore_mac_tx_gap_inserter_source_last = 1'd0;
reg [7:0] main_ethcore_mac_tx_gap_inserter_source_payload_data = 8'd0;
reg main_ethcore_mac_tx_gap_inserter_source_payload_last_be = 1'd0;
reg main_ethcore_mac_tx_gap_inserter_source_payload_error = 1'd0;
reg [3:0] main_ethcore_mac_tx_gap_inserter_counter = 4'd0;
reg [31:0] main_ethcore_mac_preamble_errors_status = 32'd0;
reg [31:0] main_ethcore_mac_crc_errors_status = 32'd0;
wire main_ethcore_mac_preamble_inserter_sink_valid;
reg main_ethcore_mac_preamble_inserter_sink_ready = 1'd0;
wire main_ethcore_mac_preamble_inserter_sink_first;
wire main_ethcore_mac_preamble_inserter_sink_last;
wire [7:0] main_ethcore_mac_preamble_inserter_sink_payload_data;
wire main_ethcore_mac_preamble_inserter_sink_payload_last_be;
wire main_ethcore_mac_preamble_inserter_sink_payload_error;
reg main_ethcore_mac_preamble_inserter_source_valid = 1'd0;
wire main_ethcore_mac_preamble_inserter_source_ready;
reg main_ethcore_mac_preamble_inserter_source_first = 1'd0;
reg main_ethcore_mac_preamble_inserter_source_last = 1'd0;
reg [7:0] main_ethcore_mac_preamble_inserter_source_payload_data = 8'd0;
wire main_ethcore_mac_preamble_inserter_source_payload_last_be;
reg main_ethcore_mac_preamble_inserter_source_payload_error = 1'd0;
reg [63:0] main_ethcore_mac_preamble_inserter_preamble = 64'd15372286728091293013;
reg [2:0] main_ethcore_mac_preamble_inserter_count = 3'd0;
wire main_ethcore_mac_preamble_checker_sink_valid;
reg main_ethcore_mac_preamble_checker_sink_ready = 1'd0;
wire main_ethcore_mac_preamble_checker_sink_first;
wire main_ethcore_mac_preamble_checker_sink_last;
wire [7:0] main_ethcore_mac_preamble_checker_sink_payload_data;
wire main_ethcore_mac_preamble_checker_sink_payload_last_be;
wire main_ethcore_mac_preamble_checker_sink_payload_error;
reg main_ethcore_mac_preamble_checker_source_valid = 1'd0;
wire main_ethcore_mac_preamble_checker_source_ready;
reg main_ethcore_mac_preamble_checker_source_first = 1'd0;
reg main_ethcore_mac_preamble_checker_source_last = 1'd0;
wire [7:0] main_ethcore_mac_preamble_checker_source_payload_data;
wire main_ethcore_mac_preamble_checker_source_payload_last_be;
reg main_ethcore_mac_preamble_checker_source_payload_error = 1'd0;
reg main_ethcore_mac_preamble_checker_error = 1'd0;
wire main_ethcore_mac_crc32_inserter_sink_valid;
reg main_ethcore_mac_crc32_inserter_sink_ready = 1'd0;
wire main_ethcore_mac_crc32_inserter_sink_first;
wire main_ethcore_mac_crc32_inserter_sink_last;
wire [7:0] main_ethcore_mac_crc32_inserter_sink_payload_data;
wire main_ethcore_mac_crc32_inserter_sink_payload_last_be;
wire main_ethcore_mac_crc32_inserter_sink_payload_error;
reg main_ethcore_mac_crc32_inserter_source_valid = 1'd0;
wire main_ethcore_mac_crc32_inserter_source_ready;
reg main_ethcore_mac_crc32_inserter_source_first = 1'd0;
reg main_ethcore_mac_crc32_inserter_source_last = 1'd0;
reg [7:0] main_ethcore_mac_crc32_inserter_source_payload_data = 8'd0;
reg main_ethcore_mac_crc32_inserter_source_payload_last_be = 1'd0;
reg main_ethcore_mac_crc32_inserter_source_payload_error = 1'd0;
reg [7:0] main_ethcore_mac_crc32_inserter_data0 = 8'd0;
wire [31:0] main_ethcore_mac_crc32_inserter_value;
wire main_ethcore_mac_crc32_inserter_error;
wire [7:0] main_ethcore_mac_crc32_inserter_data1;
wire [31:0] main_ethcore_mac_crc32_inserter_last;
reg [31:0] main_ethcore_mac_crc32_inserter_next = 32'd0;
reg [31:0] main_ethcore_mac_crc32_inserter_reg = 32'd4294967295;
reg main_ethcore_mac_crc32_inserter_ce = 1'd0;
reg main_ethcore_mac_crc32_inserter_reset = 1'd0;
reg [1:0] main_ethcore_mac_crc32_inserter_cnt = 2'd3;
wire main_ethcore_mac_crc32_inserter_cnt_done;
reg main_ethcore_mac_crc32_inserter_is_ongoing0 = 1'd0;
reg main_ethcore_mac_crc32_inserter_is_ongoing1 = 1'd0;
wire main_ethcore_mac_crc32_checker_sink_sink_valid;
reg main_ethcore_mac_crc32_checker_sink_sink_ready = 1'd0;
wire main_ethcore_mac_crc32_checker_sink_sink_first;
wire main_ethcore_mac_crc32_checker_sink_sink_last;
wire [7:0] main_ethcore_mac_crc32_checker_sink_sink_payload_data;
wire main_ethcore_mac_crc32_checker_sink_sink_payload_last_be;
wire main_ethcore_mac_crc32_checker_sink_sink_payload_error;
wire main_ethcore_mac_crc32_checker_source_source_valid;
wire main_ethcore_mac_crc32_checker_source_source_ready;
reg main_ethcore_mac_crc32_checker_source_source_first = 1'd0;
wire main_ethcore_mac_crc32_checker_source_source_last;
wire [7:0] main_ethcore_mac_crc32_checker_source_source_payload_data;
wire main_ethcore_mac_crc32_checker_source_source_payload_last_be;
reg main_ethcore_mac_crc32_checker_source_source_payload_error = 1'd0;
wire main_ethcore_mac_crc32_checker_error;
wire [7:0] main_ethcore_mac_crc32_checker_crc_data0;
wire [31:0] main_ethcore_mac_crc32_checker_crc_value;
wire main_ethcore_mac_crc32_checker_crc_error;
wire [7:0] main_ethcore_mac_crc32_checker_crc_data1;
wire [31:0] main_ethcore_mac_crc32_checker_crc_last;
reg [31:0] main_ethcore_mac_crc32_checker_crc_next = 32'd0;
reg [31:0] main_ethcore_mac_crc32_checker_crc_reg = 32'd4294967295;
reg main_ethcore_mac_crc32_checker_crc_ce = 1'd0;
reg main_ethcore_mac_crc32_checker_crc_reset = 1'd0;
reg main_ethcore_mac_crc32_checker_syncfifo_sink_valid = 1'd0;
wire main_ethcore_mac_crc32_checker_syncfifo_sink_ready;
wire main_ethcore_mac_crc32_checker_syncfifo_sink_first;
wire main_ethcore_mac_crc32_checker_syncfifo_sink_last;
wire [7:0] main_ethcore_mac_crc32_checker_syncfifo_sink_payload_data;
wire main_ethcore_mac_crc32_checker_syncfifo_sink_payload_last_be;
wire main_ethcore_mac_crc32_checker_syncfifo_sink_payload_error;
wire main_ethcore_mac_crc32_checker_syncfifo_source_valid;
wire main_ethcore_mac_crc32_checker_syncfifo_source_ready;
wire main_ethcore_mac_crc32_checker_syncfifo_source_first;
wire main_ethcore_mac_crc32_checker_syncfifo_source_last;
wire [7:0] main_ethcore_mac_crc32_checker_syncfifo_source_payload_data;
wire main_ethcore_mac_crc32_checker_syncfifo_source_payload_last_be;
wire main_ethcore_mac_crc32_checker_syncfifo_source_payload_error;
wire main_ethcore_mac_crc32_checker_syncfifo_syncfifo_we;
wire main_ethcore_mac_crc32_checker_syncfifo_syncfifo_writable;
wire main_ethcore_mac_crc32_checker_syncfifo_syncfifo_re;
wire main_ethcore_mac_crc32_checker_syncfifo_syncfifo_readable;
wire [11:0] main_ethcore_mac_crc32_checker_syncfifo_syncfifo_din;
wire [11:0] main_ethcore_mac_crc32_checker_syncfifo_syncfifo_dout;
reg [2:0] main_ethcore_mac_crc32_checker_syncfifo_level = 3'd0;
reg main_ethcore_mac_crc32_checker_syncfifo_replace = 1'd0;
reg [2:0] main_ethcore_mac_crc32_checker_syncfifo_produce = 3'd0;
reg [2:0] main_ethcore_mac_crc32_checker_syncfifo_consume = 3'd0;
reg [2:0] main_ethcore_mac_crc32_checker_syncfifo_wrport_adr = 3'd0;
wire [11:0] main_ethcore_mac_crc32_checker_syncfifo_wrport_dat_r;
wire main_ethcore_mac_crc32_checker_syncfifo_wrport_we;
wire [11:0] main_ethcore_mac_crc32_checker_syncfifo_wrport_dat_w;
wire main_ethcore_mac_crc32_checker_syncfifo_do_read;
wire [2:0] main_ethcore_mac_crc32_checker_syncfifo_rdport_adr;
wire [11:0] main_ethcore_mac_crc32_checker_syncfifo_rdport_dat_r;
wire [7:0] main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_data;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_last_be;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_error;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_in_first;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_in_last;
wire [7:0] main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_data;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_last_be;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_error;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_out_first;
wire main_ethcore_mac_crc32_checker_syncfifo_fifo_out_last;
reg main_ethcore_mac_crc32_checker_fifo_reset = 1'd0;
wire main_ethcore_mac_crc32_checker_fifo_in;
wire main_ethcore_mac_crc32_checker_fifo_out;
wire main_ethcore_mac_crc32_checker_fifo_full;
wire main_ethcore_mac_ps_preamble_error_i;
wire main_ethcore_mac_ps_preamble_error_o;
reg main_ethcore_mac_ps_preamble_error_toggle_i = 1'd0;
wire main_ethcore_mac_ps_preamble_error_toggle_o;
reg main_ethcore_mac_ps_preamble_error_toggle_o_r = 1'd0;
wire main_ethcore_mac_ps_crc_error_i;
wire main_ethcore_mac_ps_crc_error_o;
reg main_ethcore_mac_ps_crc_error_toggle_i = 1'd0;
wire main_ethcore_mac_ps_crc_error_toggle_o;
reg main_ethcore_mac_ps_crc_error_toggle_o_r = 1'd0;
wire main_ethcore_mac_padding_inserter_sink_valid;
reg main_ethcore_mac_padding_inserter_sink_ready = 1'd0;
wire main_ethcore_mac_padding_inserter_sink_first;
wire main_ethcore_mac_padding_inserter_sink_last;
wire [7:0] main_ethcore_mac_padding_inserter_sink_payload_data;
wire main_ethcore_mac_padding_inserter_sink_payload_last_be;
wire main_ethcore_mac_padding_inserter_sink_payload_error;
reg main_ethcore_mac_padding_inserter_source_valid = 1'd0;
wire main_ethcore_mac_padding_inserter_source_ready;
reg main_ethcore_mac_padding_inserter_source_first = 1'd0;
reg main_ethcore_mac_padding_inserter_source_last = 1'd0;
reg [7:0] main_ethcore_mac_padding_inserter_source_payload_data = 8'd0;
reg main_ethcore_mac_padding_inserter_source_payload_last_be = 1'd0;
reg main_ethcore_mac_padding_inserter_source_payload_error = 1'd0;
reg [15:0] main_ethcore_mac_padding_inserter_counter = 16'd0;
wire main_ethcore_mac_padding_inserter_counter_done;
wire main_ethcore_mac_padding_checker_sink_valid;
wire main_ethcore_mac_padding_checker_sink_ready;
wire main_ethcore_mac_padding_checker_sink_first;
wire main_ethcore_mac_padding_checker_sink_last;
wire [7:0] main_ethcore_mac_padding_checker_sink_payload_data;
wire main_ethcore_mac_padding_checker_sink_payload_last_be;
wire main_ethcore_mac_padding_checker_sink_payload_error;
wire main_ethcore_mac_padding_checker_source_valid;
wire main_ethcore_mac_padding_checker_source_ready;
wire main_ethcore_mac_padding_checker_source_first;
wire main_ethcore_mac_padding_checker_source_last;
wire [7:0] main_ethcore_mac_padding_checker_source_payload_data;
wire main_ethcore_mac_padding_checker_source_payload_last_be;
wire main_ethcore_mac_padding_checker_source_payload_error;
wire main_ethcore_mac_tx_cdc_sink_valid;
wire main_ethcore_mac_tx_cdc_sink_ready;
wire main_ethcore_mac_tx_cdc_sink_first;
wire main_ethcore_mac_tx_cdc_sink_last;
wire [7:0] main_ethcore_mac_tx_cdc_sink_payload_data;
wire main_ethcore_mac_tx_cdc_sink_payload_last_be;
wire main_ethcore_mac_tx_cdc_sink_payload_error;
wire main_ethcore_mac_tx_cdc_source_valid;
wire main_ethcore_mac_tx_cdc_source_ready;
wire main_ethcore_mac_tx_cdc_source_first;
wire main_ethcore_mac_tx_cdc_source_last;
wire [7:0] main_ethcore_mac_tx_cdc_source_payload_data;
wire main_ethcore_mac_tx_cdc_source_payload_last_be;
wire main_ethcore_mac_tx_cdc_source_payload_error;
wire main_ethcore_mac_tx_cdc_asyncfifo_we;
wire main_ethcore_mac_tx_cdc_asyncfifo_writable;
wire main_ethcore_mac_tx_cdc_asyncfifo_re;
wire main_ethcore_mac_tx_cdc_asyncfifo_readable;
wire [11:0] main_ethcore_mac_tx_cdc_asyncfifo_din;
wire [11:0] main_ethcore_mac_tx_cdc_asyncfifo_dout;
wire main_ethcore_mac_tx_cdc_graycounter0_ce;
reg [6:0] main_ethcore_mac_tx_cdc_graycounter0_q = 7'd0;
wire [6:0] main_ethcore_mac_tx_cdc_graycounter0_q_next;
reg [6:0] main_ethcore_mac_tx_cdc_graycounter0_q_binary = 7'd0;
reg [6:0] main_ethcore_mac_tx_cdc_graycounter0_q_next_binary = 7'd0;
wire main_ethcore_mac_tx_cdc_graycounter1_ce;
reg [6:0] main_ethcore_mac_tx_cdc_graycounter1_q = 7'd0;
wire [6:0] main_ethcore_mac_tx_cdc_graycounter1_q_next;
reg [6:0] main_ethcore_mac_tx_cdc_graycounter1_q_binary = 7'd0;
reg [6:0] main_ethcore_mac_tx_cdc_graycounter1_q_next_binary = 7'd0;
wire [6:0] main_ethcore_mac_tx_cdc_produce_rdomain;
wire [6:0] main_ethcore_mac_tx_cdc_consume_wdomain;
wire [5:0] main_ethcore_mac_tx_cdc_wrport_adr;
wire [11:0] main_ethcore_mac_tx_cdc_wrport_dat_r;
wire main_ethcore_mac_tx_cdc_wrport_we;
wire [11:0] main_ethcore_mac_tx_cdc_wrport_dat_w;
wire [5:0] main_ethcore_mac_tx_cdc_rdport_adr;
wire [11:0] main_ethcore_mac_tx_cdc_rdport_dat_r;
wire [7:0] main_ethcore_mac_tx_cdc_fifo_in_payload_data;
wire main_ethcore_mac_tx_cdc_fifo_in_payload_last_be;
wire main_ethcore_mac_tx_cdc_fifo_in_payload_error;
wire main_ethcore_mac_tx_cdc_fifo_in_first;
wire main_ethcore_mac_tx_cdc_fifo_in_last;
wire [7:0] main_ethcore_mac_tx_cdc_fifo_out_payload_data;
wire main_ethcore_mac_tx_cdc_fifo_out_payload_last_be;
wire main_ethcore_mac_tx_cdc_fifo_out_payload_error;
wire main_ethcore_mac_tx_cdc_fifo_out_first;
wire main_ethcore_mac_tx_cdc_fifo_out_last;
wire main_ethcore_mac_rx_cdc_sink_valid;
wire main_ethcore_mac_rx_cdc_sink_ready;
wire main_ethcore_mac_rx_cdc_sink_first;
wire main_ethcore_mac_rx_cdc_sink_last;
wire [7:0] main_ethcore_mac_rx_cdc_sink_payload_data;
wire main_ethcore_mac_rx_cdc_sink_payload_last_be;
wire main_ethcore_mac_rx_cdc_sink_payload_error;
wire main_ethcore_mac_rx_cdc_source_valid;
wire main_ethcore_mac_rx_cdc_source_ready;
wire main_ethcore_mac_rx_cdc_source_first;
wire main_ethcore_mac_rx_cdc_source_last;
wire [7:0] main_ethcore_mac_rx_cdc_source_payload_data;
wire main_ethcore_mac_rx_cdc_source_payload_last_be;
wire main_ethcore_mac_rx_cdc_source_payload_error;
wire main_ethcore_mac_rx_cdc_asyncfifo_we;
wire main_ethcore_mac_rx_cdc_asyncfifo_writable;
wire main_ethcore_mac_rx_cdc_asyncfifo_re;
wire main_ethcore_mac_rx_cdc_asyncfifo_readable;
wire [11:0] main_ethcore_mac_rx_cdc_asyncfifo_din;
wire [11:0] main_ethcore_mac_rx_cdc_asyncfifo_dout;
wire main_ethcore_mac_rx_cdc_graycounter0_ce;
reg [6:0] main_ethcore_mac_rx_cdc_graycounter0_q = 7'd0;
wire [6:0] main_ethcore_mac_rx_cdc_graycounter0_q_next;
reg [6:0] main_ethcore_mac_rx_cdc_graycounter0_q_binary = 7'd0;
reg [6:0] main_ethcore_mac_rx_cdc_graycounter0_q_next_binary = 7'd0;
wire main_ethcore_mac_rx_cdc_graycounter1_ce;
reg [6:0] main_ethcore_mac_rx_cdc_graycounter1_q = 7'd0;
wire [6:0] main_ethcore_mac_rx_cdc_graycounter1_q_next;
reg [6:0] main_ethcore_mac_rx_cdc_graycounter1_q_binary = 7'd0;
reg [6:0] main_ethcore_mac_rx_cdc_graycounter1_q_next_binary = 7'd0;
wire [6:0] main_ethcore_mac_rx_cdc_produce_rdomain;
wire [6:0] main_ethcore_mac_rx_cdc_consume_wdomain;
wire [5:0] main_ethcore_mac_rx_cdc_wrport_adr;
wire [11:0] main_ethcore_mac_rx_cdc_wrport_dat_r;
wire main_ethcore_mac_rx_cdc_wrport_we;
wire [11:0] main_ethcore_mac_rx_cdc_wrport_dat_w;
wire [5:0] main_ethcore_mac_rx_cdc_rdport_adr;
wire [11:0] main_ethcore_mac_rx_cdc_rdport_dat_r;
wire [7:0] main_ethcore_mac_rx_cdc_fifo_in_payload_data;
wire main_ethcore_mac_rx_cdc_fifo_in_payload_last_be;
wire main_ethcore_mac_rx_cdc_fifo_in_payload_error;
wire main_ethcore_mac_rx_cdc_fifo_in_first;
wire main_ethcore_mac_rx_cdc_fifo_in_last;
wire [7:0] main_ethcore_mac_rx_cdc_fifo_out_payload_data;
wire main_ethcore_mac_rx_cdc_fifo_out_payload_last_be;
wire main_ethcore_mac_rx_cdc_fifo_out_payload_error;
wire main_ethcore_mac_rx_cdc_fifo_out_first;
wire main_ethcore_mac_rx_cdc_fifo_out_last;
reg main_ethcore_mac_crossbar_source_valid = 1'd0;
wire main_ethcore_mac_crossbar_source_ready;
reg main_ethcore_mac_crossbar_source_first = 1'd0;
reg main_ethcore_mac_crossbar_source_last = 1'd0;
reg [15:0] main_ethcore_mac_crossbar_source_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_mac_crossbar_source_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_mac_crossbar_source_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_mac_crossbar_source_payload_data = 8'd0;
reg main_ethcore_mac_crossbar_source_payload_last_be = 1'd0;
reg main_ethcore_mac_crossbar_source_payload_error = 1'd0;
wire main_ethcore_mac_crossbar_sink_valid;
reg main_ethcore_mac_crossbar_sink_ready = 1'd0;
wire main_ethcore_mac_crossbar_sink_first;
wire main_ethcore_mac_crossbar_sink_last;
wire [15:0] main_ethcore_mac_crossbar_sink_payload_ethernet_type;
wire [47:0] main_ethcore_mac_crossbar_sink_payload_sender_mac;
wire [47:0] main_ethcore_mac_crossbar_sink_payload_target_mac;
wire [7:0] main_ethcore_mac_crossbar_sink_payload_data;
wire main_ethcore_mac_crossbar_sink_payload_last_be;
wire main_ethcore_mac_crossbar_sink_payload_error;
wire main_ethcore_mac_packetizer_sink_valid;
reg main_ethcore_mac_packetizer_sink_ready = 1'd0;
wire main_ethcore_mac_packetizer_sink_first;
wire main_ethcore_mac_packetizer_sink_last;
wire [15:0] main_ethcore_mac_packetizer_sink_payload_ethernet_type;
wire [47:0] main_ethcore_mac_packetizer_sink_payload_sender_mac;
wire [47:0] main_ethcore_mac_packetizer_sink_payload_target_mac;
wire [7:0] main_ethcore_mac_packetizer_sink_payload_data;
wire main_ethcore_mac_packetizer_sink_payload_last_be;
wire main_ethcore_mac_packetizer_sink_payload_error;
reg main_ethcore_mac_packetizer_source_valid = 1'd0;
wire main_ethcore_mac_packetizer_source_ready;
reg main_ethcore_mac_packetizer_source_first = 1'd0;
reg main_ethcore_mac_packetizer_source_last = 1'd0;
reg [7:0] main_ethcore_mac_packetizer_source_payload_data = 8'd0;
wire main_ethcore_mac_packetizer_source_payload_last_be;
wire main_ethcore_mac_packetizer_source_payload_error;
reg [111:0] main_ethcore_mac_packetizer_header = 112'd0;
reg [111:0] main_ethcore_mac_packetizer_sr = 112'd0;
reg main_ethcore_mac_packetizer_sr_load = 1'd0;
reg main_ethcore_mac_packetizer_sr_shift = 1'd0;
reg [3:0] main_ethcore_mac_packetizer_count = 4'd0;
reg main_ethcore_mac_packetizer_sink_d_valid = 1'd0;
reg main_ethcore_mac_packetizer_sink_d_ready = 1'd0;
reg main_ethcore_mac_packetizer_sink_d_first = 1'd0;
reg main_ethcore_mac_packetizer_sink_d_last = 1'd0;
reg [15:0] main_ethcore_mac_packetizer_sink_d_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_mac_packetizer_sink_d_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_mac_packetizer_sink_d_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_mac_packetizer_sink_d_payload_data = 8'd0;
reg main_ethcore_mac_packetizer_sink_d_payload_last_be = 1'd0;
reg main_ethcore_mac_packetizer_sink_d_payload_error = 1'd0;
reg main_ethcore_mac_packetizer_fsm_from_idle = 1'd0;
wire main_ethcore_mac_depacketizer_sink_valid;
reg main_ethcore_mac_depacketizer_sink_ready = 1'd0;
wire main_ethcore_mac_depacketizer_sink_first;
wire main_ethcore_mac_depacketizer_sink_last;
wire [7:0] main_ethcore_mac_depacketizer_sink_payload_data;
wire main_ethcore_mac_depacketizer_sink_payload_last_be;
wire main_ethcore_mac_depacketizer_sink_payload_error;
reg main_ethcore_mac_depacketizer_source_valid = 1'd0;
wire main_ethcore_mac_depacketizer_source_ready;
reg main_ethcore_mac_depacketizer_source_first = 1'd0;
reg main_ethcore_mac_depacketizer_source_last = 1'd0;
wire [15:0] main_ethcore_mac_depacketizer_source_payload_ethernet_type;
wire [47:0] main_ethcore_mac_depacketizer_source_payload_sender_mac;
wire [47:0] main_ethcore_mac_depacketizer_source_payload_target_mac;
reg [7:0] main_ethcore_mac_depacketizer_source_payload_data = 8'd0;
wire main_ethcore_mac_depacketizer_source_payload_last_be;
wire main_ethcore_mac_depacketizer_source_payload_error;
wire [111:0] main_ethcore_mac_depacketizer_header;
reg [111:0] main_ethcore_mac_depacketizer_sr = 112'd0;
reg main_ethcore_mac_depacketizer_sr_shift = 1'd0;
reg main_ethcore_mac_depacketizer_sr_shift_leftover = 1'd0;
reg [3:0] main_ethcore_mac_depacketizer_count = 4'd0;
reg main_ethcore_mac_depacketizer_sink_d_valid = 1'd0;
reg main_ethcore_mac_depacketizer_sink_d_ready = 1'd0;
reg main_ethcore_mac_depacketizer_sink_d_first = 1'd0;
reg main_ethcore_mac_depacketizer_sink_d_last = 1'd0;
reg [7:0] main_ethcore_mac_depacketizer_sink_d_payload_data = 8'd0;
reg main_ethcore_mac_depacketizer_sink_d_payload_last_be = 1'd0;
reg main_ethcore_mac_depacketizer_sink_d_payload_error = 1'd0;
reg main_ethcore_mac_depacketizer_fsm_from_idle = 1'd0;
wire main_ethcore_arp_tx_sink_sink_valid;
reg main_ethcore_arp_tx_sink_sink_ready = 1'd0;
wire main_ethcore_arp_tx_sink_sink_first;
wire main_ethcore_arp_tx_sink_sink_last;
wire main_ethcore_arp_tx_sink_sink_payload_reply;
wire main_ethcore_arp_tx_sink_sink_payload_request;
wire [31:0] main_ethcore_arp_tx_sink_sink_payload_ip_address;
wire [47:0] main_ethcore_arp_tx_sink_sink_payload_mac_address;
reg main_ethcore_arp_tx_source_source_valid = 1'd0;
wire main_ethcore_arp_tx_source_source_ready;
reg main_ethcore_arp_tx_source_source_first = 1'd0;
reg main_ethcore_arp_tx_source_source_last = 1'd0;
reg [15:0] main_ethcore_arp_tx_source_source_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_arp_tx_source_source_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_arp_tx_source_source_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_arp_tx_source_source_payload_data = 8'd0;
reg main_ethcore_arp_tx_source_source_payload_last_be = 1'd0;
reg main_ethcore_arp_tx_source_source_payload_error = 1'd0;
reg [5:0] main_ethcore_arp_tx_counter = 6'd0;
reg main_ethcore_arp_tx_packetizer_sink_valid = 1'd0;
reg main_ethcore_arp_tx_packetizer_sink_ready = 1'd0;
reg main_ethcore_arp_tx_packetizer_sink_first = 1'd0;
wire main_ethcore_arp_tx_packetizer_sink_last;
reg [7:0] main_ethcore_arp_tx_packetizer_sink_payload_data = 8'd0;
reg main_ethcore_arp_tx_packetizer_sink_payload_error = 1'd0;
wire [7:0] main_ethcore_arp_tx_packetizer_sink_param_hwsize;
wire [15:0] main_ethcore_arp_tx_packetizer_sink_param_hwtype;
reg [15:0] main_ethcore_arp_tx_packetizer_sink_param_opcode = 16'd0;
wire [15:0] main_ethcore_arp_tx_packetizer_sink_param_proto;
wire [7:0] main_ethcore_arp_tx_packetizer_sink_param_protosize;
wire [31:0] main_ethcore_arp_tx_packetizer_sink_param_sender_ip;
wire [47:0] main_ethcore_arp_tx_packetizer_sink_param_sender_mac;
reg [31:0] main_ethcore_arp_tx_packetizer_sink_param_target_ip = 32'd0;
reg [47:0] main_ethcore_arp_tx_packetizer_sink_param_target_mac = 48'd0;
reg main_ethcore_arp_tx_packetizer_source_valid = 1'd0;
reg main_ethcore_arp_tx_packetizer_source_ready = 1'd0;
reg main_ethcore_arp_tx_packetizer_source_first = 1'd0;
reg main_ethcore_arp_tx_packetizer_source_last = 1'd0;
reg [15:0] main_ethcore_arp_tx_packetizer_source_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_arp_tx_packetizer_source_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_arp_tx_packetizer_source_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_arp_tx_packetizer_source_payload_data = 8'd0;
reg main_ethcore_arp_tx_packetizer_source_payload_last_be = 1'd0;
wire main_ethcore_arp_tx_packetizer_source_payload_error;
reg [223:0] main_ethcore_arp_tx_packetizer_header = 224'd0;
reg [223:0] main_ethcore_arp_tx_packetizer_sr = 224'd0;
reg main_ethcore_arp_tx_packetizer_sr_load = 1'd0;
reg main_ethcore_arp_tx_packetizer_sr_shift = 1'd0;
reg [4:0] main_ethcore_arp_tx_packetizer_count = 5'd0;
reg main_ethcore_arp_tx_packetizer_sink_d_valid = 1'd0;
reg main_ethcore_arp_tx_packetizer_sink_d_ready = 1'd0;
reg main_ethcore_arp_tx_packetizer_sink_d_first = 1'd0;
reg main_ethcore_arp_tx_packetizer_sink_d_last = 1'd0;
reg [7:0] main_ethcore_arp_tx_packetizer_sink_d_payload_data = 8'd0;
reg main_ethcore_arp_tx_packetizer_sink_d_payload_error = 1'd0;
reg [7:0] main_ethcore_arp_tx_packetizer_sink_d_param_hwsize = 8'd0;
reg [15:0] main_ethcore_arp_tx_packetizer_sink_d_param_hwtype = 16'd0;
reg [15:0] main_ethcore_arp_tx_packetizer_sink_d_param_opcode = 16'd0;
reg [15:0] main_ethcore_arp_tx_packetizer_sink_d_param_proto = 16'd0;
reg [7:0] main_ethcore_arp_tx_packetizer_sink_d_param_protosize = 8'd0;
reg [31:0] main_ethcore_arp_tx_packetizer_sink_d_param_sender_ip = 32'd0;
reg [47:0] main_ethcore_arp_tx_packetizer_sink_d_param_sender_mac = 48'd0;
reg [31:0] main_ethcore_arp_tx_packetizer_sink_d_param_target_ip = 32'd0;
reg [47:0] main_ethcore_arp_tx_packetizer_sink_d_param_target_mac = 48'd0;
reg main_ethcore_arp_tx_packetizer_fsm_from_idle = 1'd0;
wire main_ethcore_arp_rx_sink_sink_valid;
wire main_ethcore_arp_rx_sink_sink_ready;
wire main_ethcore_arp_rx_sink_sink_first;
wire main_ethcore_arp_rx_sink_sink_last;
wire [15:0] main_ethcore_arp_rx_sink_sink_payload_ethernet_type;
wire [47:0] main_ethcore_arp_rx_sink_sink_payload_sender_mac;
wire [47:0] main_ethcore_arp_rx_sink_sink_payload_target_mac;
wire [7:0] main_ethcore_arp_rx_sink_sink_payload_data;
wire main_ethcore_arp_rx_sink_sink_payload_last_be;
wire main_ethcore_arp_rx_sink_sink_payload_error;
reg main_ethcore_arp_rx_source_source_valid = 1'd0;
wire main_ethcore_arp_rx_source_source_ready;
reg main_ethcore_arp_rx_source_source_first = 1'd0;
reg main_ethcore_arp_rx_source_source_last = 1'd0;
reg main_ethcore_arp_rx_source_source_payload_reply = 1'd0;
reg main_ethcore_arp_rx_source_source_payload_request = 1'd0;
wire [31:0] main_ethcore_arp_rx_source_source_payload_ip_address;
wire [47:0] main_ethcore_arp_rx_source_source_payload_mac_address;
wire main_ethcore_arp_rx_depacketizer_sink_valid;
reg main_ethcore_arp_rx_depacketizer_sink_ready = 1'd0;
wire main_ethcore_arp_rx_depacketizer_sink_first;
wire main_ethcore_arp_rx_depacketizer_sink_last;
wire [15:0] main_ethcore_arp_rx_depacketizer_sink_payload_ethernet_type;
wire [47:0] main_ethcore_arp_rx_depacketizer_sink_payload_sender_mac;
wire [47:0] main_ethcore_arp_rx_depacketizer_sink_payload_target_mac;
wire [7:0] main_ethcore_arp_rx_depacketizer_sink_payload_data;
wire main_ethcore_arp_rx_depacketizer_sink_payload_last_be;
wire main_ethcore_arp_rx_depacketizer_sink_payload_error;
reg main_ethcore_arp_rx_depacketizer_source_valid = 1'd0;
reg main_ethcore_arp_rx_depacketizer_source_ready = 1'd0;
reg main_ethcore_arp_rx_depacketizer_source_last = 1'd0;
reg [7:0] main_ethcore_arp_rx_depacketizer_source_payload_data = 8'd0;
wire main_ethcore_arp_rx_depacketizer_source_payload_error;
wire [7:0] main_ethcore_arp_rx_depacketizer_source_param_hwsize;
wire [15:0] main_ethcore_arp_rx_depacketizer_source_param_hwtype;
wire [15:0] main_ethcore_arp_rx_depacketizer_source_param_opcode;
wire [15:0] main_ethcore_arp_rx_depacketizer_source_param_proto;
wire [7:0] main_ethcore_arp_rx_depacketizer_source_param_protosize;
wire [31:0] main_ethcore_arp_rx_depacketizer_source_param_sender_ip;
wire [47:0] main_ethcore_arp_rx_depacketizer_source_param_sender_mac;
wire [31:0] main_ethcore_arp_rx_depacketizer_source_param_target_ip;
wire [47:0] main_ethcore_arp_rx_depacketizer_source_param_target_mac;
wire [223:0] main_ethcore_arp_rx_depacketizer_header;
reg [223:0] main_ethcore_arp_rx_depacketizer_sr = 224'd0;
reg main_ethcore_arp_rx_depacketizer_sr_shift = 1'd0;
reg main_ethcore_arp_rx_depacketizer_sr_shift_leftover = 1'd0;
reg [4:0] main_ethcore_arp_rx_depacketizer_count = 5'd0;
reg main_ethcore_arp_rx_depacketizer_sink_d_valid = 1'd0;
reg main_ethcore_arp_rx_depacketizer_sink_d_ready = 1'd0;
reg main_ethcore_arp_rx_depacketizer_sink_d_first = 1'd0;
reg main_ethcore_arp_rx_depacketizer_sink_d_last = 1'd0;
reg [15:0] main_ethcore_arp_rx_depacketizer_sink_d_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_arp_rx_depacketizer_sink_d_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_arp_rx_depacketizer_sink_d_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_arp_rx_depacketizer_sink_d_payload_data = 8'd0;
reg main_ethcore_arp_rx_depacketizer_sink_d_payload_last_be = 1'd0;
reg main_ethcore_arp_rx_depacketizer_sink_d_payload_error = 1'd0;
reg main_ethcore_arp_rx_depacketizer_fsm_from_idle = 1'd0;
reg main_ethcore_arp_rx_valid = 1'd0;
reg main_ethcore_arp_rx_reply = 1'd0;
reg main_ethcore_arp_rx_request = 1'd0;
wire main_ethcore_arp_table_sink_valid;
reg main_ethcore_arp_table_sink_ready = 1'd0;
wire main_ethcore_arp_table_sink_first;
wire main_ethcore_arp_table_sink_last;
wire main_ethcore_arp_table_sink_payload_reply;
wire main_ethcore_arp_table_sink_payload_request;
wire [31:0] main_ethcore_arp_table_sink_payload_ip_address;
wire [47:0] main_ethcore_arp_table_sink_payload_mac_address;
reg main_ethcore_arp_table_source_valid = 1'd0;
wire main_ethcore_arp_table_source_ready;
reg main_ethcore_arp_table_source_first = 1'd0;
reg main_ethcore_arp_table_source_last = 1'd0;
reg main_ethcore_arp_table_source_payload_reply = 1'd0;
reg main_ethcore_arp_table_source_payload_request = 1'd0;
reg [31:0] main_ethcore_arp_table_source_payload_ip_address = 32'd0;
reg [47:0] main_ethcore_arp_table_source_payload_mac_address = 48'd0;
reg main_ethcore_arp_table_request_valid = 1'd0;
reg main_ethcore_arp_table_request_ready = 1'd0;
wire [31:0] main_ethcore_arp_table_request_payload_ip_address;
reg main_ethcore_arp_table_response_valid = 1'd0;
reg main_ethcore_arp_table_response_ready = 1'd0;
reg main_ethcore_arp_table_response_payload_failed = 1'd0;
wire [47:0] main_ethcore_arp_table_response_payload_mac_address;
reg main_ethcore_arp_table_request_pending = 1'd0;
reg main_ethcore_arp_table_request_pending_clr = 1'd0;
reg main_ethcore_arp_table_request_pending_set = 1'd0;
reg [31:0] main_ethcore_arp_table_request_ip_address = 32'd0;
reg main_ethcore_arp_table_request_ip_address_reset = 1'd0;
reg main_ethcore_arp_table_request_ip_address_update = 1'd0;
wire main_ethcore_arp_table_request_timer_wait;
wire main_ethcore_arp_table_request_timer_done;
reg [22:0] main_ethcore_arp_table_request_timer_count = 23'd5000000;
reg [2:0] main_ethcore_arp_table_request_counter = 3'd0;
reg main_ethcore_arp_table_request_counter_reset = 1'd0;
reg main_ethcore_arp_table_request_counter_ce = 1'd0;
reg main_ethcore_arp_table_update = 1'd0;
reg main_ethcore_arp_table_cached_valid = 1'd0;
reg [31:0] main_ethcore_arp_table_cached_ip_address = 32'd0;
reg [47:0] main_ethcore_arp_table_cached_mac_address = 48'd0;
wire main_ethcore_arp_table_cached_timer_wait;
wire main_ethcore_arp_table_cached_timer_done;
reg [28:0] main_ethcore_arp_table_cached_timer_count = 29'd500000000;
wire main_ethcore_arp_mac_port_sink_valid;
reg main_ethcore_arp_mac_port_sink_ready = 1'd0;
wire main_ethcore_arp_mac_port_sink_first;
wire main_ethcore_arp_mac_port_sink_last;
wire [15:0] main_ethcore_arp_mac_port_sink_payload_ethernet_type;
wire [47:0] main_ethcore_arp_mac_port_sink_payload_sender_mac;
wire [47:0] main_ethcore_arp_mac_port_sink_payload_target_mac;
wire [7:0] main_ethcore_arp_mac_port_sink_payload_data;
wire main_ethcore_arp_mac_port_sink_payload_last_be;
wire main_ethcore_arp_mac_port_sink_payload_error;
reg main_ethcore_arp_mac_port_source_valid = 1'd0;
wire main_ethcore_arp_mac_port_source_ready;
reg main_ethcore_arp_mac_port_source_first = 1'd0;
reg main_ethcore_arp_mac_port_source_last = 1'd0;
reg [15:0] main_ethcore_arp_mac_port_source_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_arp_mac_port_source_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_arp_mac_port_source_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_arp_mac_port_source_payload_data = 8'd0;
reg main_ethcore_arp_mac_port_source_payload_last_be = 1'd0;
reg main_ethcore_arp_mac_port_source_payload_error = 1'd0;
wire main_ethcore_ip_tx_sink_sink_valid;
wire main_ethcore_ip_tx_sink_sink_ready;
wire main_ethcore_ip_tx_sink_sink_first;
wire main_ethcore_ip_tx_sink_sink_last;
wire [7:0] main_ethcore_ip_tx_sink_sink_payload_data;
wire main_ethcore_ip_tx_sink_sink_payload_error;
wire [15:0] main_ethcore_ip_tx_sink_sink_param_length;
wire [7:0] main_ethcore_ip_tx_sink_sink_param_protocol;
wire [31:0] main_ethcore_ip_tx_sink_sink_param_ip_address;
reg main_ethcore_ip_tx_source_source_valid = 1'd0;
wire main_ethcore_ip_tx_source_source_ready;
reg main_ethcore_ip_tx_source_source_first = 1'd0;
reg main_ethcore_ip_tx_source_source_last = 1'd0;
reg [15:0] main_ethcore_ip_tx_source_source_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_ip_tx_source_source_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_ip_tx_source_source_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_ip_tx_source_source_payload_data = 8'd0;
reg main_ethcore_ip_tx_source_source_payload_last_be = 1'd0;
reg main_ethcore_ip_tx_source_source_payload_error = 1'd0;
reg main_ethcore_ip_tx_target_unreachable = 1'd0;
wire [159:0] main_ethcore_ip_tx_liteethipv4checksum_header;
wire [15:0] main_ethcore_ip_tx_liteethipv4checksum_value;
wire main_ethcore_ip_tx_liteethipv4checksum_done;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r = 17'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next0;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next0 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum0 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next1;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next1 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum1 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next2;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next2 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum2 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next3;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next3 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum3 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next4;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next4 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum4 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next5;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next5 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum5 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next6;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next6 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum6 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next7;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next7 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum7 = 1'd0;
wire [16:0] main_ethcore_ip_tx_liteethipv4checksum_s_next8;
reg [16:0] main_ethcore_ip_tx_liteethipv4checksum_r_next8 = 17'd0;
reg main_ethcore_ip_tx_liteethipv4checksum8 = 1'd0;
reg [3:0] main_ethcore_ip_tx_liteethipv4checksum_counter = 4'd0;
wire main_ethcore_ip_tx_liteethipv4checksum_counter_ce;
wire main_ethcore_ip_tx_ce;
wire main_ethcore_ip_tx_reset;
wire main_ethcore_ip_tx_packetizer_sink_valid;
reg main_ethcore_ip_tx_packetizer_sink_ready = 1'd0;
reg main_ethcore_ip_tx_packetizer_sink_first = 1'd0;
wire main_ethcore_ip_tx_packetizer_sink_last;
wire [7:0] main_ethcore_ip_tx_packetizer_sink_payload_data;
reg main_ethcore_ip_tx_packetizer_sink_payload_error = 1'd0;
wire [15:0] main_ethcore_ip_tx_packetizer_sink_param_checksum;
wire [15:0] main_ethcore_ip_tx_packetizer_sink_param_identification;
wire [3:0] main_ethcore_ip_tx_packetizer_sink_param_ihl;
wire [7:0] main_ethcore_ip_tx_packetizer_sink_param_protocol;
wire [31:0] main_ethcore_ip_tx_packetizer_sink_param_sender_ip;
wire [31:0] main_ethcore_ip_tx_packetizer_sink_param_target_ip;
wire [15:0] main_ethcore_ip_tx_packetizer_sink_param_total_length;
wire [7:0] main_ethcore_ip_tx_packetizer_sink_param_ttl;
wire [3:0] main_ethcore_ip_tx_packetizer_sink_param_version;
reg main_ethcore_ip_tx_packetizer_source_valid = 1'd0;
reg main_ethcore_ip_tx_packetizer_source_ready = 1'd0;
reg main_ethcore_ip_tx_packetizer_source_first = 1'd0;
reg main_ethcore_ip_tx_packetizer_source_last = 1'd0;
reg [15:0] main_ethcore_ip_tx_packetizer_source_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_ip_tx_packetizer_source_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_ip_tx_packetizer_source_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_ip_tx_packetizer_source_payload_data = 8'd0;
reg main_ethcore_ip_tx_packetizer_source_payload_last_be = 1'd0;
wire main_ethcore_ip_tx_packetizer_source_payload_error;
reg [159:0] main_ethcore_ip_tx_packetizer_header = 160'd0;
reg [159:0] main_ethcore_ip_tx_packetizer_sr = 160'd0;
reg main_ethcore_ip_tx_packetizer_sr_load = 1'd0;
reg main_ethcore_ip_tx_packetizer_sr_shift = 1'd0;
reg [4:0] main_ethcore_ip_tx_packetizer_count = 5'd0;
reg main_ethcore_ip_tx_packetizer_sink_d_valid = 1'd0;
reg main_ethcore_ip_tx_packetizer_sink_d_ready = 1'd0;
reg main_ethcore_ip_tx_packetizer_sink_d_first = 1'd0;
reg main_ethcore_ip_tx_packetizer_sink_d_last = 1'd0;
reg [7:0] main_ethcore_ip_tx_packetizer_sink_d_payload_data = 8'd0;
reg main_ethcore_ip_tx_packetizer_sink_d_payload_error = 1'd0;
reg [15:0] main_ethcore_ip_tx_packetizer_sink_d_param_checksum = 16'd0;
reg [15:0] main_ethcore_ip_tx_packetizer_sink_d_param_identification = 16'd0;
reg [3:0] main_ethcore_ip_tx_packetizer_sink_d_param_ihl = 4'd0;
reg [7:0] main_ethcore_ip_tx_packetizer_sink_d_param_protocol = 8'd0;
reg [31:0] main_ethcore_ip_tx_packetizer_sink_d_param_sender_ip = 32'd0;
reg [31:0] main_ethcore_ip_tx_packetizer_sink_d_param_target_ip = 32'd0;
reg [15:0] main_ethcore_ip_tx_packetizer_sink_d_param_total_length = 16'd0;
reg [7:0] main_ethcore_ip_tx_packetizer_sink_d_param_ttl = 8'd0;
reg [3:0] main_ethcore_ip_tx_packetizer_sink_d_param_version = 4'd0;
reg main_ethcore_ip_tx_packetizer_fsm_from_idle = 1'd0;
reg [47:0] main_ethcore_ip_tx_target_mac = 48'd0;
wire main_ethcore_ip_rx_sink_sink_valid;
wire main_ethcore_ip_rx_sink_sink_ready;
wire main_ethcore_ip_rx_sink_sink_first;
wire main_ethcore_ip_rx_sink_sink_last;
wire [15:0] main_ethcore_ip_rx_sink_sink_payload_ethernet_type;
wire [47:0] main_ethcore_ip_rx_sink_sink_payload_sender_mac;
wire [47:0] main_ethcore_ip_rx_sink_sink_payload_target_mac;
wire [7:0] main_ethcore_ip_rx_sink_sink_payload_data;
wire main_ethcore_ip_rx_sink_sink_payload_last_be;
wire main_ethcore_ip_rx_sink_sink_payload_error;
reg main_ethcore_ip_rx_source_source_valid = 1'd0;
wire main_ethcore_ip_rx_source_source_ready;
reg main_ethcore_ip_rx_source_source_first = 1'd0;
wire main_ethcore_ip_rx_source_source_last;
wire [7:0] main_ethcore_ip_rx_source_source_payload_data;
wire main_ethcore_ip_rx_source_source_payload_error;
wire [15:0] main_ethcore_ip_rx_source_source_param_length;
wire [7:0] main_ethcore_ip_rx_source_source_param_protocol;
wire [31:0] main_ethcore_ip_rx_source_source_param_ip_address;
wire main_ethcore_ip_rx_depacketizer_sink_valid;
reg main_ethcore_ip_rx_depacketizer_sink_ready = 1'd0;
wire main_ethcore_ip_rx_depacketizer_sink_first;
wire main_ethcore_ip_rx_depacketizer_sink_last;
wire [15:0] main_ethcore_ip_rx_depacketizer_sink_payload_ethernet_type;
wire [47:0] main_ethcore_ip_rx_depacketizer_sink_payload_sender_mac;
wire [47:0] main_ethcore_ip_rx_depacketizer_sink_payload_target_mac;
wire [7:0] main_ethcore_ip_rx_depacketizer_sink_payload_data;
wire main_ethcore_ip_rx_depacketizer_sink_payload_last_be;
wire main_ethcore_ip_rx_depacketizer_sink_payload_error;
reg main_ethcore_ip_rx_depacketizer_source_valid = 1'd0;
reg main_ethcore_ip_rx_depacketizer_source_ready = 1'd0;
reg main_ethcore_ip_rx_depacketizer_source_last = 1'd0;
reg [7:0] main_ethcore_ip_rx_depacketizer_source_payload_data = 8'd0;
wire main_ethcore_ip_rx_depacketizer_source_payload_error;
wire [15:0] main_ethcore_ip_rx_depacketizer_source_param_checksum;
wire [15:0] main_ethcore_ip_rx_depacketizer_source_param_identification;
wire [3:0] main_ethcore_ip_rx_depacketizer_source_param_ihl;
wire [7:0] main_ethcore_ip_rx_depacketizer_source_param_protocol;
wire [31:0] main_ethcore_ip_rx_depacketizer_source_param_sender_ip;
wire [31:0] main_ethcore_ip_rx_depacketizer_source_param_target_ip;
wire [15:0] main_ethcore_ip_rx_depacketizer_source_param_total_length;
wire [7:0] main_ethcore_ip_rx_depacketizer_source_param_ttl;
wire [3:0] main_ethcore_ip_rx_depacketizer_source_param_version;
wire [159:0] main_ethcore_ip_rx_depacketizer_header;
reg [159:0] main_ethcore_ip_rx_depacketizer_sr = 160'd0;
reg main_ethcore_ip_rx_depacketizer_sr_shift = 1'd0;
reg main_ethcore_ip_rx_depacketizer_sr_shift_leftover = 1'd0;
reg [4:0] main_ethcore_ip_rx_depacketizer_count = 5'd0;
reg main_ethcore_ip_rx_depacketizer_sink_d_valid = 1'd0;
reg main_ethcore_ip_rx_depacketizer_sink_d_ready = 1'd0;
reg main_ethcore_ip_rx_depacketizer_sink_d_first = 1'd0;
reg main_ethcore_ip_rx_depacketizer_sink_d_last = 1'd0;
reg [15:0] main_ethcore_ip_rx_depacketizer_sink_d_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_ip_rx_depacketizer_sink_d_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_ip_rx_depacketizer_sink_d_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_ip_rx_depacketizer_sink_d_payload_data = 8'd0;
reg main_ethcore_ip_rx_depacketizer_sink_d_payload_last_be = 1'd0;
reg main_ethcore_ip_rx_depacketizer_sink_d_payload_error = 1'd0;
reg main_ethcore_ip_rx_depacketizer_fsm_from_idle = 1'd0;
wire [159:0] main_ethcore_ip_rx_liteethipv4checksum_header;
wire [15:0] main_ethcore_ip_rx_liteethipv4checksum_value;
wire main_ethcore_ip_rx_liteethipv4checksum_done;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r = 17'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next0;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next0 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum0 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next1;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next1 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum1 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next2;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next2 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum2 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next3;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next3 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum3 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next4;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next4 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum4 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next5;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next5 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum5 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next6;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next6 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum6 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next7;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next7 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum7 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next8;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next8 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum8 = 1'd0;
wire [16:0] main_ethcore_ip_rx_liteethipv4checksum_s_next9;
reg [16:0] main_ethcore_ip_rx_liteethipv4checksum_r_next9 = 17'd0;
reg main_ethcore_ip_rx_liteethipv4checksum9 = 1'd0;
reg [3:0] main_ethcore_ip_rx_liteethipv4checksum_counter = 4'd0;
wire main_ethcore_ip_rx_liteethipv4checksum_counter_ce;
wire main_ethcore_ip_rx_ce;
wire main_ethcore_ip_rx_reset;
reg main_ethcore_ip_rx_valid = 1'd0;
wire main_ethcore_ip_mac_port_sink_valid;
reg main_ethcore_ip_mac_port_sink_ready = 1'd0;
wire main_ethcore_ip_mac_port_sink_first;
wire main_ethcore_ip_mac_port_sink_last;
wire [15:0] main_ethcore_ip_mac_port_sink_payload_ethernet_type;
wire [47:0] main_ethcore_ip_mac_port_sink_payload_sender_mac;
wire [47:0] main_ethcore_ip_mac_port_sink_payload_target_mac;
wire [7:0] main_ethcore_ip_mac_port_sink_payload_data;
wire main_ethcore_ip_mac_port_sink_payload_last_be;
wire main_ethcore_ip_mac_port_sink_payload_error;
reg main_ethcore_ip_mac_port_source_valid = 1'd0;
wire main_ethcore_ip_mac_port_source_ready;
reg main_ethcore_ip_mac_port_source_first = 1'd0;
reg main_ethcore_ip_mac_port_source_last = 1'd0;
reg [15:0] main_ethcore_ip_mac_port_source_payload_ethernet_type = 16'd0;
reg [47:0] main_ethcore_ip_mac_port_source_payload_sender_mac = 48'd0;
reg [47:0] main_ethcore_ip_mac_port_source_payload_target_mac = 48'd0;
reg [7:0] main_ethcore_ip_mac_port_source_payload_data = 8'd0;
reg main_ethcore_ip_mac_port_source_payload_last_be = 1'd0;
reg main_ethcore_ip_mac_port_source_payload_error = 1'd0;
reg main_ethcore_ip_crossbar_source_valid = 1'd0;
wire main_ethcore_ip_crossbar_source_ready;
reg main_ethcore_ip_crossbar_source_first = 1'd0;
reg main_ethcore_ip_crossbar_source_last = 1'd0;
reg [7:0] main_ethcore_ip_crossbar_source_payload_data = 8'd0;
reg main_ethcore_ip_crossbar_source_payload_error = 1'd0;
reg [15:0] main_ethcore_ip_crossbar_source_param_length = 16'd0;
reg [7:0] main_ethcore_ip_crossbar_source_param_protocol = 8'd0;
reg [31:0] main_ethcore_ip_crossbar_source_param_ip_address = 32'd0;
wire main_ethcore_ip_crossbar_sink_valid;
reg main_ethcore_ip_crossbar_sink_ready = 1'd0;
wire main_ethcore_ip_crossbar_sink_first;
wire main_ethcore_ip_crossbar_sink_last;
wire [7:0] main_ethcore_ip_crossbar_sink_payload_data;
wire main_ethcore_ip_crossbar_sink_payload_error;
wire [15:0] main_ethcore_ip_crossbar_sink_param_length;
wire [7:0] main_ethcore_ip_crossbar_sink_param_protocol;
wire [31:0] main_ethcore_ip_crossbar_sink_param_ip_address;
wire main_ethcore_icmp_tx_sink_sink_valid;
wire main_ethcore_icmp_tx_sink_sink_ready;
wire main_ethcore_icmp_tx_sink_sink_first;
wire main_ethcore_icmp_tx_sink_sink_last;
wire [7:0] main_ethcore_icmp_tx_sink_sink_payload_data;
wire main_ethcore_icmp_tx_sink_sink_payload_error;
wire [15:0] main_ethcore_icmp_tx_sink_sink_param_checksum;
wire [7:0] main_ethcore_icmp_tx_sink_sink_param_code;
wire [7:0] main_ethcore_icmp_tx_sink_sink_param_msgtype;
wire [31:0] main_ethcore_icmp_tx_sink_sink_param_quench;
wire [31:0] main_ethcore_icmp_tx_sink_sink_param_ip_address;
wire [15:0] main_ethcore_icmp_tx_sink_sink_param_length;
reg main_ethcore_icmp_tx_source_source_valid = 1'd0;
wire main_ethcore_icmp_tx_source_source_ready;
reg main_ethcore_icmp_tx_source_source_first = 1'd0;
reg main_ethcore_icmp_tx_source_source_last = 1'd0;
reg [7:0] main_ethcore_icmp_tx_source_source_payload_data = 8'd0;
reg main_ethcore_icmp_tx_source_source_payload_error = 1'd0;
reg [15:0] main_ethcore_icmp_tx_source_source_param_length = 16'd0;
reg [7:0] main_ethcore_icmp_tx_source_source_param_protocol = 8'd0;
reg [31:0] main_ethcore_icmp_tx_source_source_param_ip_address = 32'd0;
wire main_ethcore_icmp_tx_packetizer_sink_valid;
reg main_ethcore_icmp_tx_packetizer_sink_ready = 1'd0;
reg main_ethcore_icmp_tx_packetizer_sink_first = 1'd0;
wire main_ethcore_icmp_tx_packetizer_sink_last;
wire [7:0] main_ethcore_icmp_tx_packetizer_sink_payload_data;
reg main_ethcore_icmp_tx_packetizer_sink_payload_error = 1'd0;
wire [15:0] main_ethcore_icmp_tx_packetizer_sink_param_checksum;
wire [7:0] main_ethcore_icmp_tx_packetizer_sink_param_code;
wire [7:0] main_ethcore_icmp_tx_packetizer_sink_param_msgtype;
wire [31:0] main_ethcore_icmp_tx_packetizer_sink_param_quench;
reg main_ethcore_icmp_tx_packetizer_source_valid = 1'd0;
reg main_ethcore_icmp_tx_packetizer_source_ready = 1'd0;
reg main_ethcore_icmp_tx_packetizer_source_first = 1'd0;
reg main_ethcore_icmp_tx_packetizer_source_last = 1'd0;
reg [7:0] main_ethcore_icmp_tx_packetizer_source_payload_data = 8'd0;
wire main_ethcore_icmp_tx_packetizer_source_payload_error;
reg [15:0] main_ethcore_icmp_tx_packetizer_source_param_length = 16'd0;
reg [7:0] main_ethcore_icmp_tx_packetizer_source_param_protocol = 8'd0;
reg [31:0] main_ethcore_icmp_tx_packetizer_source_param_ip_address = 32'd0;
reg [63:0] main_ethcore_icmp_tx_packetizer_header = 64'd0;
reg [63:0] main_ethcore_icmp_tx_packetizer_sr = 64'd0;
reg main_ethcore_icmp_tx_packetizer_sr_load = 1'd0;
reg main_ethcore_icmp_tx_packetizer_sr_shift = 1'd0;
reg [2:0] main_ethcore_icmp_tx_packetizer_count = 3'd0;
reg main_ethcore_icmp_tx_packetizer_sink_d_valid = 1'd0;
reg main_ethcore_icmp_tx_packetizer_sink_d_ready = 1'd0;
reg main_ethcore_icmp_tx_packetizer_sink_d_first = 1'd0;
reg main_ethcore_icmp_tx_packetizer_sink_d_last = 1'd0;
reg [7:0] main_ethcore_icmp_tx_packetizer_sink_d_payload_data = 8'd0;
reg main_ethcore_icmp_tx_packetizer_sink_d_payload_error = 1'd0;
reg [15:0] main_ethcore_icmp_tx_packetizer_sink_d_param_checksum = 16'd0;
reg [7:0] main_ethcore_icmp_tx_packetizer_sink_d_param_code = 8'd0;
reg [7:0] main_ethcore_icmp_tx_packetizer_sink_d_param_msgtype = 8'd0;
reg [31:0] main_ethcore_icmp_tx_packetizer_sink_d_param_quench = 32'd0;
reg main_ethcore_icmp_tx_packetizer_fsm_from_idle = 1'd0;
wire main_ethcore_icmp_rx_sink_sink_valid;
wire main_ethcore_icmp_rx_sink_sink_ready;
wire main_ethcore_icmp_rx_sink_sink_first;
wire main_ethcore_icmp_rx_sink_sink_last;
wire [7:0] main_ethcore_icmp_rx_sink_sink_payload_data;
wire main_ethcore_icmp_rx_sink_sink_payload_error;
wire [15:0] main_ethcore_icmp_rx_sink_sink_param_length;
wire [7:0] main_ethcore_icmp_rx_sink_sink_param_protocol;
wire [31:0] main_ethcore_icmp_rx_sink_sink_param_ip_address;
reg main_ethcore_icmp_rx_source_source_valid = 1'd0;
wire main_ethcore_icmp_rx_source_source_ready;
reg main_ethcore_icmp_rx_source_source_first = 1'd0;
wire main_ethcore_icmp_rx_source_source_last;
wire [7:0] main_ethcore_icmp_rx_source_source_payload_data;
wire main_ethcore_icmp_rx_source_source_payload_error;
wire [15:0] main_ethcore_icmp_rx_source_source_param_checksum;
wire [7:0] main_ethcore_icmp_rx_source_source_param_code;
wire [7:0] main_ethcore_icmp_rx_source_source_param_msgtype;
wire [31:0] main_ethcore_icmp_rx_source_source_param_quench;
wire [31:0] main_ethcore_icmp_rx_source_source_param_ip_address;
wire [15:0] main_ethcore_icmp_rx_source_source_param_length;
wire main_ethcore_icmp_rx_depacketizer_sink_valid;
reg main_ethcore_icmp_rx_depacketizer_sink_ready = 1'd0;
wire main_ethcore_icmp_rx_depacketizer_sink_first;
wire main_ethcore_icmp_rx_depacketizer_sink_last;
wire [7:0] main_ethcore_icmp_rx_depacketizer_sink_payload_data;
wire main_ethcore_icmp_rx_depacketizer_sink_payload_error;
wire [15:0] main_ethcore_icmp_rx_depacketizer_sink_param_length;
wire [7:0] main_ethcore_icmp_rx_depacketizer_sink_param_protocol;
wire [31:0] main_ethcore_icmp_rx_depacketizer_sink_param_ip_address;
reg main_ethcore_icmp_rx_depacketizer_source_valid = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_source_ready = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_source_last = 1'd0;
reg [7:0] main_ethcore_icmp_rx_depacketizer_source_payload_data = 8'd0;
wire main_ethcore_icmp_rx_depacketizer_source_payload_error;
wire [15:0] main_ethcore_icmp_rx_depacketizer_source_param_checksum;
wire [7:0] main_ethcore_icmp_rx_depacketizer_source_param_code;
wire [7:0] main_ethcore_icmp_rx_depacketizer_source_param_msgtype;
wire [31:0] main_ethcore_icmp_rx_depacketizer_source_param_quench;
wire [63:0] main_ethcore_icmp_rx_depacketizer_header;
reg [63:0] main_ethcore_icmp_rx_depacketizer_sr = 64'd0;
reg main_ethcore_icmp_rx_depacketizer_sr_shift = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_sr_shift_leftover = 1'd0;
reg [2:0] main_ethcore_icmp_rx_depacketizer_count = 3'd0;
reg main_ethcore_icmp_rx_depacketizer_sink_d_valid = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_sink_d_ready = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_sink_d_first = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_sink_d_last = 1'd0;
reg [7:0] main_ethcore_icmp_rx_depacketizer_sink_d_payload_data = 8'd0;
reg main_ethcore_icmp_rx_depacketizer_sink_d_payload_error = 1'd0;
reg [15:0] main_ethcore_icmp_rx_depacketizer_sink_d_param_length = 16'd0;
reg [7:0] main_ethcore_icmp_rx_depacketizer_sink_d_param_protocol = 8'd0;
reg [31:0] main_ethcore_icmp_rx_depacketizer_sink_d_param_ip_address = 32'd0;
reg main_ethcore_icmp_rx_depacketizer_fsm_from_idle = 1'd0;
reg main_ethcore_icmp_rx_valid = 1'd0;
wire main_ethcore_icmp_echo_sink_sink_valid;
wire main_ethcore_icmp_echo_sink_sink_ready;
wire main_ethcore_icmp_echo_sink_sink_first;
wire main_ethcore_icmp_echo_sink_sink_last;
wire [7:0] main_ethcore_icmp_echo_sink_sink_payload_data;
wire main_ethcore_icmp_echo_sink_sink_payload_error;
wire [15:0] main_ethcore_icmp_echo_sink_sink_param_checksum;
wire [7:0] main_ethcore_icmp_echo_sink_sink_param_code;
wire [7:0] main_ethcore_icmp_echo_sink_sink_param_msgtype;
wire [31:0] main_ethcore_icmp_echo_sink_sink_param_quench;
wire [31:0] main_ethcore_icmp_echo_sink_sink_param_ip_address;
wire [15:0] main_ethcore_icmp_echo_sink_sink_param_length;
wire main_ethcore_icmp_echo_source_source_valid;
wire main_ethcore_icmp_echo_source_source_ready;
wire main_ethcore_icmp_echo_source_source_first;
wire main_ethcore_icmp_echo_source_source_last;
wire [7:0] main_ethcore_icmp_echo_source_source_payload_data;
wire main_ethcore_icmp_echo_source_source_payload_error;
reg [15:0] main_ethcore_icmp_echo_source_source_param_checksum = 16'd0;
wire [7:0] main_ethcore_icmp_echo_source_source_param_code;
reg [7:0] main_ethcore_icmp_echo_source_source_param_msgtype = 8'd0;
wire [31:0] main_ethcore_icmp_echo_source_source_param_quench;
wire [31:0] main_ethcore_icmp_echo_source_source_param_ip_address;
wire [15:0] main_ethcore_icmp_echo_source_source_param_length;
wire main_ethcore_icmp_echo_buffer_sink_valid;
wire main_ethcore_icmp_echo_buffer_sink_ready;
wire main_ethcore_icmp_echo_buffer_sink_first;
wire main_ethcore_icmp_echo_buffer_sink_last;
wire [7:0] main_ethcore_icmp_echo_buffer_sink_payload_data;
wire main_ethcore_icmp_echo_buffer_sink_payload_error;
wire [15:0] main_ethcore_icmp_echo_buffer_sink_param_checksum;
wire [7:0] main_ethcore_icmp_echo_buffer_sink_param_code;
wire [7:0] main_ethcore_icmp_echo_buffer_sink_param_msgtype;
wire [31:0] main_ethcore_icmp_echo_buffer_sink_param_quench;
wire [31:0] main_ethcore_icmp_echo_buffer_sink_param_ip_address;
wire [15:0] main_ethcore_icmp_echo_buffer_sink_param_length;
wire main_ethcore_icmp_echo_buffer_source_valid;
wire main_ethcore_icmp_echo_buffer_source_ready;
wire main_ethcore_icmp_echo_buffer_source_first;
wire main_ethcore_icmp_echo_buffer_source_last;
wire [7:0] main_ethcore_icmp_echo_buffer_source_payload_data;
wire main_ethcore_icmp_echo_buffer_source_payload_error;
wire [15:0] main_ethcore_icmp_echo_buffer_source_param_checksum;
wire [7:0] main_ethcore_icmp_echo_buffer_source_param_code;
wire [7:0] main_ethcore_icmp_echo_buffer_source_param_msgtype;
wire [31:0] main_ethcore_icmp_echo_buffer_source_param_quench;
wire [31:0] main_ethcore_icmp_echo_buffer_source_param_ip_address;
wire [15:0] main_ethcore_icmp_echo_buffer_source_param_length;
wire main_ethcore_icmp_echo_buffer_re;
reg main_ethcore_icmp_echo_buffer_readable = 1'd0;
wire main_ethcore_icmp_echo_buffer_syncfifo_we;
wire main_ethcore_icmp_echo_buffer_syncfifo_writable;
wire main_ethcore_icmp_echo_buffer_syncfifo_re;
wire main_ethcore_icmp_echo_buffer_syncfifo_readable;
wire [122:0] main_ethcore_icmp_echo_buffer_syncfifo_din;
wire [122:0] main_ethcore_icmp_echo_buffer_syncfifo_dout;
reg [7:0] main_ethcore_icmp_echo_buffer_level0 = 8'd0;
reg main_ethcore_icmp_echo_buffer_replace = 1'd0;
reg [6:0] main_ethcore_icmp_echo_buffer_produce = 7'd0;
reg [6:0] main_ethcore_icmp_echo_buffer_consume = 7'd0;
reg [6:0] main_ethcore_icmp_echo_buffer_wrport_adr = 7'd0;
wire [122:0] main_ethcore_icmp_echo_buffer_wrport_dat_r;
wire main_ethcore_icmp_echo_buffer_wrport_we;
wire [122:0] main_ethcore_icmp_echo_buffer_wrport_dat_w;
wire main_ethcore_icmp_echo_buffer_do_read;
wire [6:0] main_ethcore_icmp_echo_buffer_rdport_adr;
wire [122:0] main_ethcore_icmp_echo_buffer_rdport_dat_r;
wire main_ethcore_icmp_echo_buffer_rdport_re;
wire [7:0] main_ethcore_icmp_echo_buffer_level1;
wire [7:0] main_ethcore_icmp_echo_buffer_fifo_in_payload_data;
wire main_ethcore_icmp_echo_buffer_fifo_in_payload_error;
wire [15:0] main_ethcore_icmp_echo_buffer_fifo_in_param_checksum;
wire [7:0] main_ethcore_icmp_echo_buffer_fifo_in_param_code;
wire [7:0] main_ethcore_icmp_echo_buffer_fifo_in_param_msgtype;
wire [31:0] main_ethcore_icmp_echo_buffer_fifo_in_param_quench;
wire [31:0] main_ethcore_icmp_echo_buffer_fifo_in_param_ip_address;
wire [15:0] main_ethcore_icmp_echo_buffer_fifo_in_param_length;
wire main_ethcore_icmp_echo_buffer_fifo_in_first;
wire main_ethcore_icmp_echo_buffer_fifo_in_last;
wire [7:0] main_ethcore_icmp_echo_buffer_fifo_out_payload_data;
wire main_ethcore_icmp_echo_buffer_fifo_out_payload_error;
wire [15:0] main_ethcore_icmp_echo_buffer_fifo_out_param_checksum;
wire [7:0] main_ethcore_icmp_echo_buffer_fifo_out_param_code;
wire [7:0] main_ethcore_icmp_echo_buffer_fifo_out_param_msgtype;
wire [31:0] main_ethcore_icmp_echo_buffer_fifo_out_param_quench;
wire [31:0] main_ethcore_icmp_echo_buffer_fifo_out_param_ip_address;
wire [15:0] main_ethcore_icmp_echo_buffer_fifo_out_param_length;
wire main_ethcore_icmp_echo_buffer_fifo_out_first;
wire main_ethcore_icmp_echo_buffer_fifo_out_last;
wire main_ethcore_icmp_sink_valid;
reg main_ethcore_icmp_sink_ready = 1'd0;
wire main_ethcore_icmp_sink_first;
wire main_ethcore_icmp_sink_last;
wire [7:0] main_ethcore_icmp_sink_payload_data;
wire main_ethcore_icmp_sink_payload_error;
wire [15:0] main_ethcore_icmp_sink_param_length;
wire [7:0] main_ethcore_icmp_sink_param_protocol;
wire [31:0] main_ethcore_icmp_sink_param_ip_address;
reg main_ethcore_icmp_source_valid = 1'd0;
wire main_ethcore_icmp_source_ready;
reg main_ethcore_icmp_source_first = 1'd0;
reg main_ethcore_icmp_source_last = 1'd0;
reg [7:0] main_ethcore_icmp_source_payload_data = 8'd0;
reg main_ethcore_icmp_source_payload_error = 1'd0;
reg [15:0] main_ethcore_icmp_source_param_length = 16'd0;
reg [7:0] main_ethcore_icmp_source_param_protocol = 8'd0;
reg [31:0] main_ethcore_icmp_source_param_ip_address = 32'd0;
wire main_ethcore_tx_sink_sink_valid;
wire main_ethcore_tx_sink_sink_ready;
wire main_ethcore_tx_sink_sink_first;
wire main_ethcore_tx_sink_sink_last;
wire [7:0] main_ethcore_tx_sink_sink_payload_data;
wire main_ethcore_tx_sink_sink_payload_error;
wire [15:0] main_ethcore_tx_sink_sink_param_src_port;
wire [15:0] main_ethcore_tx_sink_sink_param_dst_port;
wire [31:0] main_ethcore_tx_sink_sink_param_ip_address;
wire [15:0] main_ethcore_tx_sink_sink_param_length;
reg main_ethcore_tx_source_source_valid = 1'd0;
wire main_ethcore_tx_source_source_ready;
reg main_ethcore_tx_source_source_first = 1'd0;
reg main_ethcore_tx_source_source_last = 1'd0;
reg [7:0] main_ethcore_tx_source_source_payload_data = 8'd0;
reg main_ethcore_tx_source_source_payload_error = 1'd0;
reg [15:0] main_ethcore_tx_source_source_param_length = 16'd0;
reg [7:0] main_ethcore_tx_source_source_param_protocol = 8'd0;
reg [31:0] main_ethcore_tx_source_source_param_ip_address = 32'd0;
wire main_ethcore_tx_packetizer_sink_valid;
reg main_ethcore_tx_packetizer_sink_ready = 1'd0;
reg main_ethcore_tx_packetizer_sink_first = 1'd0;
wire main_ethcore_tx_packetizer_sink_last;
wire [7:0] main_ethcore_tx_packetizer_sink_payload_data;
reg main_ethcore_tx_packetizer_sink_payload_error = 1'd0;
wire [15:0] main_ethcore_tx_packetizer_sink_param_checksum;
wire [15:0] main_ethcore_tx_packetizer_sink_param_dst_port;
wire [15:0] main_ethcore_tx_packetizer_sink_param_length;
wire [15:0] main_ethcore_tx_packetizer_sink_param_src_port;
reg main_ethcore_tx_packetizer_source_valid = 1'd0;
reg main_ethcore_tx_packetizer_source_ready = 1'd0;
reg main_ethcore_tx_packetizer_source_first = 1'd0;
reg main_ethcore_tx_packetizer_source_last = 1'd0;
reg [7:0] main_ethcore_tx_packetizer_source_payload_data = 8'd0;
wire main_ethcore_tx_packetizer_source_payload_error;
reg [15:0] main_ethcore_tx_packetizer_source_param_length = 16'd0;
reg [7:0] main_ethcore_tx_packetizer_source_param_protocol = 8'd0;
reg [31:0] main_ethcore_tx_packetizer_source_param_ip_address = 32'd0;
reg [63:0] main_ethcore_tx_packetizer_header = 64'd0;
reg [63:0] main_ethcore_tx_packetizer_sr = 64'd0;
reg main_ethcore_tx_packetizer_sr_load = 1'd0;
reg main_ethcore_tx_packetizer_sr_shift = 1'd0;
reg [2:0] main_ethcore_tx_packetizer_count = 3'd0;
reg main_ethcore_tx_packetizer_sink_d_valid = 1'd0;
reg main_ethcore_tx_packetizer_sink_d_ready = 1'd0;
reg main_ethcore_tx_packetizer_sink_d_first = 1'd0;
reg main_ethcore_tx_packetizer_sink_d_last = 1'd0;
reg [7:0] main_ethcore_tx_packetizer_sink_d_payload_data = 8'd0;
reg main_ethcore_tx_packetizer_sink_d_payload_error = 1'd0;
reg [15:0] main_ethcore_tx_packetizer_sink_d_param_checksum = 16'd0;
reg [15:0] main_ethcore_tx_packetizer_sink_d_param_dst_port = 16'd0;
reg [15:0] main_ethcore_tx_packetizer_sink_d_param_length = 16'd0;
reg [15:0] main_ethcore_tx_packetizer_sink_d_param_src_port = 16'd0;
reg main_ethcore_tx_packetizer_fsm_from_idle = 1'd0;
wire main_ethcore_rx_sink_sink_valid;
wire main_ethcore_rx_sink_sink_ready;
wire main_ethcore_rx_sink_sink_first;
wire main_ethcore_rx_sink_sink_last;
wire [7:0] main_ethcore_rx_sink_sink_payload_data;
wire main_ethcore_rx_sink_sink_payload_error;
wire [15:0] main_ethcore_rx_sink_sink_param_length;
wire [7:0] main_ethcore_rx_sink_sink_param_protocol;
wire [31:0] main_ethcore_rx_sink_sink_param_ip_address;
reg main_ethcore_rx_source_source_valid = 1'd0;
wire main_ethcore_rx_source_source_ready;
reg main_ethcore_rx_source_source_first = 1'd0;
wire main_ethcore_rx_source_source_last;
wire [7:0] main_ethcore_rx_source_source_payload_data;
wire main_ethcore_rx_source_source_payload_error;
wire [15:0] main_ethcore_rx_source_source_param_src_port;
wire [15:0] main_ethcore_rx_source_source_param_dst_port;
wire [31:0] main_ethcore_rx_source_source_param_ip_address;
wire [15:0] main_ethcore_rx_source_source_param_length;
wire main_ethcore_rx_depacketizer_sink_valid;
reg main_ethcore_rx_depacketizer_sink_ready = 1'd0;
wire main_ethcore_rx_depacketizer_sink_first;
wire main_ethcore_rx_depacketizer_sink_last;
wire [7:0] main_ethcore_rx_depacketizer_sink_payload_data;
wire main_ethcore_rx_depacketizer_sink_payload_error;
wire [15:0] main_ethcore_rx_depacketizer_sink_param_length;
wire [7:0] main_ethcore_rx_depacketizer_sink_param_protocol;
wire [31:0] main_ethcore_rx_depacketizer_sink_param_ip_address;
reg main_ethcore_rx_depacketizer_source_valid = 1'd0;
reg main_ethcore_rx_depacketizer_source_ready = 1'd0;
reg main_ethcore_rx_depacketizer_source_last = 1'd0;
reg [7:0] main_ethcore_rx_depacketizer_source_payload_data = 8'd0;
wire main_ethcore_rx_depacketizer_source_payload_error;
wire [15:0] main_ethcore_rx_depacketizer_source_param_checksum;
wire [15:0] main_ethcore_rx_depacketizer_source_param_dst_port;
wire [15:0] main_ethcore_rx_depacketizer_source_param_length;
wire [15:0] main_ethcore_rx_depacketizer_source_param_src_port;
wire [63:0] main_ethcore_rx_depacketizer_header;
reg [63:0] main_ethcore_rx_depacketizer_sr = 64'd0;
reg main_ethcore_rx_depacketizer_sr_shift = 1'd0;
reg main_ethcore_rx_depacketizer_sr_shift_leftover = 1'd0;
reg [2:0] main_ethcore_rx_depacketizer_count = 3'd0;
reg main_ethcore_rx_depacketizer_sink_d_valid = 1'd0;
reg main_ethcore_rx_depacketizer_sink_d_ready = 1'd0;
reg main_ethcore_rx_depacketizer_sink_d_first = 1'd0;
reg main_ethcore_rx_depacketizer_sink_d_last = 1'd0;
reg [7:0] main_ethcore_rx_depacketizer_sink_d_payload_data = 8'd0;
reg main_ethcore_rx_depacketizer_sink_d_payload_error = 1'd0;
reg [15:0] main_ethcore_rx_depacketizer_sink_d_param_length = 16'd0;
reg [7:0] main_ethcore_rx_depacketizer_sink_d_param_protocol = 8'd0;
reg [31:0] main_ethcore_rx_depacketizer_sink_d_param_ip_address = 32'd0;
reg main_ethcore_rx_depacketizer_fsm_from_idle = 1'd0;
reg main_ethcore_rx_valid = 1'd0;
wire main_ethcore_ip_port_sink_valid;
reg main_ethcore_ip_port_sink_ready = 1'd0;
wire main_ethcore_ip_port_sink_first;
wire main_ethcore_ip_port_sink_last;
wire [7:0] main_ethcore_ip_port_sink_payload_data;
wire main_ethcore_ip_port_sink_payload_error;
wire [15:0] main_ethcore_ip_port_sink_param_length;
wire [7:0] main_ethcore_ip_port_sink_param_protocol;
wire [31:0] main_ethcore_ip_port_sink_param_ip_address;
reg main_ethcore_ip_port_source_valid = 1'd0;
wire main_ethcore_ip_port_source_ready;
reg main_ethcore_ip_port_source_first = 1'd0;
reg main_ethcore_ip_port_source_last = 1'd0;
reg [7:0] main_ethcore_ip_port_source_payload_data = 8'd0;
reg main_ethcore_ip_port_source_payload_error = 1'd0;
reg [15:0] main_ethcore_ip_port_source_param_length = 16'd0;
reg [7:0] main_ethcore_ip_port_source_param_protocol = 8'd0;
reg [31:0] main_ethcore_ip_port_source_param_ip_address = 32'd0;
wire main_ethcore_crossbar_source_valid;
wire main_ethcore_crossbar_source_ready;
wire main_ethcore_crossbar_source_first;
wire main_ethcore_crossbar_source_last;
wire [7:0] main_ethcore_crossbar_source_payload_data;
wire main_ethcore_crossbar_source_payload_error;
wire [15:0] main_ethcore_crossbar_source_param_src_port;
wire [15:0] main_ethcore_crossbar_source_param_dst_port;
wire [31:0] main_ethcore_crossbar_source_param_ip_address;
wire [15:0] main_ethcore_crossbar_source_param_length;
wire main_ethcore_crossbar_sink_valid;
wire main_ethcore_crossbar_sink_ready;
wire main_ethcore_crossbar_sink_first;
wire main_ethcore_crossbar_sink_last;
wire [7:0] main_ethcore_crossbar_sink_payload_data;
wire main_ethcore_crossbar_sink_payload_error;
wire [15:0] main_ethcore_crossbar_sink_param_src_port;
wire [15:0] main_ethcore_crossbar_sink_param_dst_port;
wire [31:0] main_ethcore_crossbar_sink_param_ip_address;
wire [15:0] main_ethcore_crossbar_sink_param_length;
wire etherbone_clk;
wire etherbone_rst;
reg main_etherbone_tx_sink_sink_valid = 1'd0;
wire main_etherbone_tx_sink_sink_ready;
reg main_etherbone_tx_sink_sink_first = 1'd0;
reg main_etherbone_tx_sink_sink_last = 1'd0;
reg [31:0] main_etherbone_tx_sink_sink_payload_data = 32'd0;
reg [3:0] main_etherbone_tx_sink_sink_payload_error = 4'd0;
reg [3:0] main_etherbone_tx_sink_sink_param_addr_size = 4'd0;
reg main_etherbone_tx_sink_sink_param_nr = 1'd0;
reg main_etherbone_tx_sink_sink_param_pf = 1'd0;
reg [3:0] main_etherbone_tx_sink_sink_param_port_size = 4'd0;
reg main_etherbone_tx_sink_sink_param_pr = 1'd0;
reg [15:0] main_etherbone_tx_sink_sink_param_src_port = 16'd0;
reg [15:0] main_etherbone_tx_sink_sink_param_dst_port = 16'd0;
reg [31:0] main_etherbone_tx_sink_sink_param_ip_address = 32'd0;
reg [15:0] main_etherbone_tx_sink_sink_param_length = 16'd0;
reg main_etherbone_tx_source_source_valid = 1'd0;
wire main_etherbone_tx_source_source_ready;
reg main_etherbone_tx_source_source_first = 1'd0;
reg main_etherbone_tx_source_source_last = 1'd0;
reg [31:0] main_etherbone_tx_source_source_payload_data = 32'd0;
reg [3:0] main_etherbone_tx_source_source_payload_error = 4'd0;
reg [15:0] main_etherbone_tx_source_source_param_src_port = 16'd0;
reg [15:0] main_etherbone_tx_source_source_param_dst_port = 16'd0;
reg [31:0] main_etherbone_tx_source_source_param_ip_address = 32'd0;
reg [15:0] main_etherbone_tx_source_source_param_length = 16'd0;
wire main_etherbone_tx_packetizer_sink_valid;
reg main_etherbone_tx_packetizer_sink_ready = 1'd0;
reg main_etherbone_tx_packetizer_sink_first = 1'd0;
wire main_etherbone_tx_packetizer_sink_last;
wire [31:0] main_etherbone_tx_packetizer_sink_payload_data;
reg [3:0] main_etherbone_tx_packetizer_sink_payload_error = 4'd0;
wire [3:0] main_etherbone_tx_packetizer_sink_param_addr_size;
wire [15:0] main_etherbone_tx_packetizer_sink_param_magic;
wire main_etherbone_tx_packetizer_sink_param_nr;
wire main_etherbone_tx_packetizer_sink_param_pf;
wire [3:0] main_etherbone_tx_packetizer_sink_param_port_size;
wire main_etherbone_tx_packetizer_sink_param_pr;
wire [3:0] main_etherbone_tx_packetizer_sink_param_version;
reg main_etherbone_tx_packetizer_source_valid = 1'd0;
reg main_etherbone_tx_packetizer_source_ready = 1'd0;
reg main_etherbone_tx_packetizer_source_first = 1'd0;
reg main_etherbone_tx_packetizer_source_last = 1'd0;
reg [31:0] main_etherbone_tx_packetizer_source_payload_data = 32'd0;
wire [3:0] main_etherbone_tx_packetizer_source_payload_error;
reg [15:0] main_etherbone_tx_packetizer_source_param_src_port = 16'd0;
reg [15:0] main_etherbone_tx_packetizer_source_param_dst_port = 16'd0;
reg [31:0] main_etherbone_tx_packetizer_source_param_ip_address = 32'd0;
reg [15:0] main_etherbone_tx_packetizer_source_param_length = 16'd0;
reg [63:0] main_etherbone_tx_packetizer_header = 64'd0;
reg [63:0] main_etherbone_tx_packetizer_sr = 64'd0;
reg main_etherbone_tx_packetizer_sr_load = 1'd0;
reg main_etherbone_tx_packetizer_sr_shift = 1'd0;
reg main_etherbone_tx_packetizer_count = 1'd0;
reg main_etherbone_tx_packetizer_sink_d_valid = 1'd0;
reg main_etherbone_tx_packetizer_sink_d_ready = 1'd0;
reg main_etherbone_tx_packetizer_sink_d_first = 1'd0;
reg main_etherbone_tx_packetizer_sink_d_last = 1'd0;
reg [31:0] main_etherbone_tx_packetizer_sink_d_payload_data = 32'd0;
reg [3:0] main_etherbone_tx_packetizer_sink_d_payload_error = 4'd0;
reg [3:0] main_etherbone_tx_packetizer_sink_d_param_addr_size = 4'd0;
reg [15:0] main_etherbone_tx_packetizer_sink_d_param_magic = 16'd0;
reg main_etherbone_tx_packetizer_sink_d_param_nr = 1'd0;
reg main_etherbone_tx_packetizer_sink_d_param_pf = 1'd0;
reg [3:0] main_etherbone_tx_packetizer_sink_d_param_port_size = 4'd0;
reg main_etherbone_tx_packetizer_sink_d_param_pr = 1'd0;
reg [3:0] main_etherbone_tx_packetizer_sink_d_param_version = 4'd0;
reg main_etherbone_tx_packetizer_fsm_from_idle = 1'd0;
wire main_etherbone_rx_sink_sink_valid;
wire main_etherbone_rx_sink_sink_ready;
wire main_etherbone_rx_sink_sink_first;
wire main_etherbone_rx_sink_sink_last;
wire [31:0] main_etherbone_rx_sink_sink_payload_data;
wire [3:0] main_etherbone_rx_sink_sink_payload_error;
wire [15:0] main_etherbone_rx_sink_sink_param_src_port;
wire [15:0] main_etherbone_rx_sink_sink_param_dst_port;
wire [31:0] main_etherbone_rx_sink_sink_param_ip_address;
wire [15:0] main_etherbone_rx_sink_sink_param_length;
reg main_etherbone_rx_source_source_valid = 1'd0;
reg main_etherbone_rx_source_source_ready = 1'd0;
reg main_etherbone_rx_source_source_first = 1'd0;
wire main_etherbone_rx_source_source_last;
wire [31:0] main_etherbone_rx_source_source_payload_data;
reg [3:0] main_etherbone_rx_source_source_payload_error = 4'd0;
reg [3:0] main_etherbone_rx_source_source_param_addr_size = 4'd0;
wire main_etherbone_rx_source_source_param_nr;
wire main_etherbone_rx_source_source_param_pf;
reg [3:0] main_etherbone_rx_source_source_param_port_size = 4'd0;
wire main_etherbone_rx_source_source_param_pr;
wire [15:0] main_etherbone_rx_source_source_param_src_port;
wire [15:0] main_etherbone_rx_source_source_param_dst_port;
wire [31:0] main_etherbone_rx_source_source_param_ip_address;
wire [15:0] main_etherbone_rx_source_source_param_length;
wire main_etherbone_rx_depacketizer_sink_valid;
reg main_etherbone_rx_depacketizer_sink_ready = 1'd0;
wire main_etherbone_rx_depacketizer_sink_first;
wire main_etherbone_rx_depacketizer_sink_last;
wire [31:0] main_etherbone_rx_depacketizer_sink_payload_data;
wire [3:0] main_etherbone_rx_depacketizer_sink_payload_error;
wire [15:0] main_etherbone_rx_depacketizer_sink_param_src_port;
wire [15:0] main_etherbone_rx_depacketizer_sink_param_dst_port;
wire [31:0] main_etherbone_rx_depacketizer_sink_param_ip_address;
wire [15:0] main_etherbone_rx_depacketizer_sink_param_length;
reg main_etherbone_rx_depacketizer_source_valid = 1'd0;
reg main_etherbone_rx_depacketizer_source_ready = 1'd0;
reg main_etherbone_rx_depacketizer_source_last = 1'd0;
reg [31:0] main_etherbone_rx_depacketizer_source_payload_data = 32'd0;
wire [3:0] main_etherbone_rx_depacketizer_source_payload_error;
wire [3:0] main_etherbone_rx_depacketizer_source_param_addr_size;
wire [15:0] main_etherbone_rx_depacketizer_source_param_magic;
wire main_etherbone_rx_depacketizer_source_param_nr;
wire main_etherbone_rx_depacketizer_source_param_pf;
wire [3:0] main_etherbone_rx_depacketizer_source_param_port_size;
wire main_etherbone_rx_depacketizer_source_param_pr;
wire [3:0] main_etherbone_rx_depacketizer_source_param_version;
wire [63:0] main_etherbone_rx_depacketizer_header;
reg [63:0] main_etherbone_rx_depacketizer_sr = 64'd0;
reg main_etherbone_rx_depacketizer_sr_shift = 1'd0;
reg main_etherbone_rx_depacketizer_sr_shift_leftover = 1'd0;
reg main_etherbone_rx_depacketizer_count = 1'd0;
reg main_etherbone_rx_depacketizer_sink_d_valid = 1'd0;
reg main_etherbone_rx_depacketizer_sink_d_ready = 1'd0;
reg main_etherbone_rx_depacketizer_sink_d_first = 1'd0;
reg main_etherbone_rx_depacketizer_sink_d_last = 1'd0;
reg [31:0] main_etherbone_rx_depacketizer_sink_d_payload_data = 32'd0;
reg [3:0] main_etherbone_rx_depacketizer_sink_d_payload_error = 4'd0;
reg [15:0] main_etherbone_rx_depacketizer_sink_d_param_src_port = 16'd0;
reg [15:0] main_etherbone_rx_depacketizer_sink_d_param_dst_port = 16'd0;
reg [31:0] main_etherbone_rx_depacketizer_sink_d_param_ip_address = 32'd0;
reg [15:0] main_etherbone_rx_depacketizer_sink_d_param_length = 16'd0;
reg main_etherbone_rx_depacketizer_fsm_from_idle = 1'd0;
reg main_etherbone_rx_valid = 1'd0;
wire main_etherbone_user_port_sink_valid;
wire main_etherbone_user_port_sink_ready;
wire main_etherbone_user_port_sink_first;
wire main_etherbone_user_port_sink_last;
wire [31:0] main_etherbone_user_port_sink_payload_data;
wire [3:0] main_etherbone_user_port_sink_payload_error;
wire [15:0] main_etherbone_user_port_sink_param_src_port;
wire [15:0] main_etherbone_user_port_sink_param_dst_port;
wire [31:0] main_etherbone_user_port_sink_param_ip_address;
wire [15:0] main_etherbone_user_port_sink_param_length;
wire main_etherbone_user_port_source_valid;
wire main_etherbone_user_port_source_ready;
wire main_etherbone_user_port_source_first;
wire main_etherbone_user_port_source_last;
wire [31:0] main_etherbone_user_port_source_payload_data;
wire [3:0] main_etherbone_user_port_source_payload_error;
wire [15:0] main_etherbone_user_port_source_param_src_port;
wire [15:0] main_etherbone_user_port_source_param_dst_port;
wire [31:0] main_etherbone_user_port_source_param_ip_address;
wire [15:0] main_etherbone_user_port_source_param_length;
wire main_etherbone_internal_port_sink_valid;
wire main_etherbone_internal_port_sink_ready;
wire main_etherbone_internal_port_sink_first;
wire main_etherbone_internal_port_sink_last;
wire [7:0] main_etherbone_internal_port_sink_payload_data;
wire main_etherbone_internal_port_sink_payload_error;
wire [15:0] main_etherbone_internal_port_sink_param_src_port;
wire [15:0] main_etherbone_internal_port_sink_param_dst_port;
wire [31:0] main_etherbone_internal_port_sink_param_ip_address;
wire [15:0] main_etherbone_internal_port_sink_param_length;
wire main_etherbone_internal_port_source_valid;
wire main_etherbone_internal_port_source_ready;
wire main_etherbone_internal_port_source_first;
wire main_etherbone_internal_port_source_last;
wire [7:0] main_etherbone_internal_port_source_payload_data;
wire main_etherbone_internal_port_source_payload_error;
wire [15:0] main_etherbone_internal_port_source_param_src_port;
wire [15:0] main_etherbone_internal_port_source_param_dst_port;
wire [31:0] main_etherbone_internal_port_source_param_ip_address;
wire [15:0] main_etherbone_internal_port_source_param_length;
wire main_etherbone_tx_cdc_sink_valid;
wire main_etherbone_tx_cdc_sink_ready;
wire main_etherbone_tx_cdc_sink_first;
wire main_etherbone_tx_cdc_sink_last;
wire [31:0] main_etherbone_tx_cdc_sink_payload_data;
wire [3:0] main_etherbone_tx_cdc_sink_payload_error;
wire [15:0] main_etherbone_tx_cdc_sink_param_src_port;
wire [15:0] main_etherbone_tx_cdc_sink_param_dst_port;
wire [31:0] main_etherbone_tx_cdc_sink_param_ip_address;
wire [15:0] main_etherbone_tx_cdc_sink_param_length;
wire main_etherbone_tx_cdc_source_valid;
wire main_etherbone_tx_cdc_source_ready;
wire main_etherbone_tx_cdc_source_first;
wire main_etherbone_tx_cdc_source_last;
wire [31:0] main_etherbone_tx_cdc_source_payload_data;
wire [3:0] main_etherbone_tx_cdc_source_payload_error;
wire [15:0] main_etherbone_tx_cdc_source_param_src_port;
wire [15:0] main_etherbone_tx_cdc_source_param_dst_port;
wire [31:0] main_etherbone_tx_cdc_source_param_ip_address;
wire [15:0] main_etherbone_tx_cdc_source_param_length;
wire main_etherbone_tx_cdc_asyncfifo_we;
wire main_etherbone_tx_cdc_asyncfifo_writable;
wire main_etherbone_tx_cdc_asyncfifo_re;
wire main_etherbone_tx_cdc_asyncfifo_readable;
wire [117:0] main_etherbone_tx_cdc_asyncfifo_din;
wire [117:0] main_etherbone_tx_cdc_asyncfifo_dout;
wire main_etherbone_tx_cdc_graycounter0_ce;
reg [2:0] main_etherbone_tx_cdc_graycounter0_q = 3'd0;
wire [2:0] main_etherbone_tx_cdc_graycounter0_q_next;
reg [2:0] main_etherbone_tx_cdc_graycounter0_q_binary = 3'd0;
reg [2:0] main_etherbone_tx_cdc_graycounter0_q_next_binary = 3'd0;
wire main_etherbone_tx_cdc_graycounter1_ce;
reg [2:0] main_etherbone_tx_cdc_graycounter1_q = 3'd0;
wire [2:0] main_etherbone_tx_cdc_graycounter1_q_next;
reg [2:0] main_etherbone_tx_cdc_graycounter1_q_binary = 3'd0;
reg [2:0] main_etherbone_tx_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] main_etherbone_tx_cdc_produce_rdomain;
wire [2:0] main_etherbone_tx_cdc_consume_wdomain;
wire [1:0] main_etherbone_tx_cdc_wrport_adr;
wire [117:0] main_etherbone_tx_cdc_wrport_dat_r;
wire main_etherbone_tx_cdc_wrport_we;
wire [117:0] main_etherbone_tx_cdc_wrport_dat_w;
wire [1:0] main_etherbone_tx_cdc_rdport_adr;
wire [117:0] main_etherbone_tx_cdc_rdport_dat_r;
wire [31:0] main_etherbone_tx_cdc_fifo_in_payload_data;
wire [3:0] main_etherbone_tx_cdc_fifo_in_payload_error;
wire [15:0] main_etherbone_tx_cdc_fifo_in_param_src_port;
wire [15:0] main_etherbone_tx_cdc_fifo_in_param_dst_port;
wire [31:0] main_etherbone_tx_cdc_fifo_in_param_ip_address;
wire [15:0] main_etherbone_tx_cdc_fifo_in_param_length;
wire main_etherbone_tx_cdc_fifo_in_first;
wire main_etherbone_tx_cdc_fifo_in_last;
wire [31:0] main_etherbone_tx_cdc_fifo_out_payload_data;
wire [3:0] main_etherbone_tx_cdc_fifo_out_payload_error;
wire [15:0] main_etherbone_tx_cdc_fifo_out_param_src_port;
wire [15:0] main_etherbone_tx_cdc_fifo_out_param_dst_port;
wire [31:0] main_etherbone_tx_cdc_fifo_out_param_ip_address;
wire [15:0] main_etherbone_tx_cdc_fifo_out_param_length;
wire main_etherbone_tx_cdc_fifo_out_first;
wire main_etherbone_tx_cdc_fifo_out_last;
wire main_etherbone_tx_converter_sink_valid;
wire main_etherbone_tx_converter_sink_ready;
wire main_etherbone_tx_converter_sink_first;
wire main_etherbone_tx_converter_sink_last;
wire [31:0] main_etherbone_tx_converter_sink_payload_data;
wire [3:0] main_etherbone_tx_converter_sink_payload_error;
wire [15:0] main_etherbone_tx_converter_sink_param_src_port;
wire [15:0] main_etherbone_tx_converter_sink_param_dst_port;
wire [31:0] main_etherbone_tx_converter_sink_param_ip_address;
wire [15:0] main_etherbone_tx_converter_sink_param_length;
wire main_etherbone_tx_converter_source_valid;
wire main_etherbone_tx_converter_source_ready;
wire main_etherbone_tx_converter_source_first;
wire main_etherbone_tx_converter_source_last;
wire [7:0] main_etherbone_tx_converter_source_payload_data;
wire main_etherbone_tx_converter_source_payload_error;
wire [15:0] main_etherbone_tx_converter_source_param_src_port;
wire [15:0] main_etherbone_tx_converter_source_param_dst_port;
wire [31:0] main_etherbone_tx_converter_source_param_ip_address;
wire [15:0] main_etherbone_tx_converter_source_param_length;
wire main_etherbone_tx_converter_converter_sink_valid;
wire main_etherbone_tx_converter_converter_sink_ready;
wire main_etherbone_tx_converter_converter_sink_first;
wire main_etherbone_tx_converter_converter_sink_last;
reg [35:0] main_etherbone_tx_converter_converter_sink_payload_data = 36'd0;
wire main_etherbone_tx_converter_converter_source_valid;
wire main_etherbone_tx_converter_converter_source_ready;
wire main_etherbone_tx_converter_converter_source_first;
wire main_etherbone_tx_converter_converter_source_last;
reg [8:0] main_etherbone_tx_converter_converter_source_payload_data = 9'd0;
wire main_etherbone_tx_converter_converter_source_payload_valid_token_count;
reg [1:0] main_etherbone_tx_converter_converter_mux = 2'd0;
wire main_etherbone_tx_converter_converter_first;
wire main_etherbone_tx_converter_converter_last;
wire main_etherbone_tx_converter_source_source_valid;
wire main_etherbone_tx_converter_source_source_ready;
wire main_etherbone_tx_converter_source_source_first;
wire main_etherbone_tx_converter_source_source_last;
wire [8:0] main_etherbone_tx_converter_source_source_payload_data;
wire main_etherbone_rx_converter_sink_valid;
wire main_etherbone_rx_converter_sink_ready;
wire main_etherbone_rx_converter_sink_first;
wire main_etherbone_rx_converter_sink_last;
wire [7:0] main_etherbone_rx_converter_sink_payload_data;
wire main_etherbone_rx_converter_sink_payload_error;
wire [15:0] main_etherbone_rx_converter_sink_param_src_port;
wire [15:0] main_etherbone_rx_converter_sink_param_dst_port;
wire [31:0] main_etherbone_rx_converter_sink_param_ip_address;
wire [15:0] main_etherbone_rx_converter_sink_param_length;
wire main_etherbone_rx_converter_source_valid;
wire main_etherbone_rx_converter_source_ready;
wire main_etherbone_rx_converter_source_first;
wire main_etherbone_rx_converter_source_last;
reg [31:0] main_etherbone_rx_converter_source_payload_data = 32'd0;
reg [3:0] main_etherbone_rx_converter_source_payload_error = 4'd0;
reg [15:0] main_etherbone_rx_converter_source_param_src_port = 16'd0;
reg [15:0] main_etherbone_rx_converter_source_param_dst_port = 16'd0;
reg [31:0] main_etherbone_rx_converter_source_param_ip_address = 32'd0;
reg [15:0] main_etherbone_rx_converter_source_param_length = 16'd0;
wire main_etherbone_rx_converter_converter_sink_valid;
wire main_etherbone_rx_converter_converter_sink_ready;
wire main_etherbone_rx_converter_converter_sink_first;
wire main_etherbone_rx_converter_converter_sink_last;
wire [8:0] main_etherbone_rx_converter_converter_sink_payload_data;
wire main_etherbone_rx_converter_converter_source_valid;
wire main_etherbone_rx_converter_converter_source_ready;
reg main_etherbone_rx_converter_converter_source_first = 1'd0;
reg main_etherbone_rx_converter_converter_source_last = 1'd0;
reg [35:0] main_etherbone_rx_converter_converter_source_payload_data = 36'd0;
reg [2:0] main_etherbone_rx_converter_converter_source_payload_valid_token_count = 3'd0;
reg [1:0] main_etherbone_rx_converter_converter_demux = 2'd0;
wire main_etherbone_rx_converter_converter_load_part;
reg main_etherbone_rx_converter_converter_strobe_all = 1'd0;
wire main_etherbone_rx_converter_source_source_valid;
wire main_etherbone_rx_converter_source_source_ready;
wire main_etherbone_rx_converter_source_source_first;
wire main_etherbone_rx_converter_source_source_last;
wire [35:0] main_etherbone_rx_converter_source_source_payload_data;
wire main_etherbone_rx_cdc_sink_valid;
wire main_etherbone_rx_cdc_sink_ready;
wire main_etherbone_rx_cdc_sink_first;
wire main_etherbone_rx_cdc_sink_last;
wire [31:0] main_etherbone_rx_cdc_sink_payload_data;
wire [3:0] main_etherbone_rx_cdc_sink_payload_error;
wire [15:0] main_etherbone_rx_cdc_sink_param_src_port;
wire [15:0] main_etherbone_rx_cdc_sink_param_dst_port;
wire [31:0] main_etherbone_rx_cdc_sink_param_ip_address;
wire [15:0] main_etherbone_rx_cdc_sink_param_length;
wire main_etherbone_rx_cdc_source_valid;
wire main_etherbone_rx_cdc_source_ready;
wire main_etherbone_rx_cdc_source_first;
wire main_etherbone_rx_cdc_source_last;
wire [31:0] main_etherbone_rx_cdc_source_payload_data;
wire [3:0] main_etherbone_rx_cdc_source_payload_error;
wire [15:0] main_etherbone_rx_cdc_source_param_src_port;
wire [15:0] main_etherbone_rx_cdc_source_param_dst_port;
wire [31:0] main_etherbone_rx_cdc_source_param_ip_address;
wire [15:0] main_etherbone_rx_cdc_source_param_length;
wire main_etherbone_rx_cdc_asyncfifo_we;
wire main_etherbone_rx_cdc_asyncfifo_writable;
wire main_etherbone_rx_cdc_asyncfifo_re;
wire main_etherbone_rx_cdc_asyncfifo_readable;
wire [117:0] main_etherbone_rx_cdc_asyncfifo_din;
wire [117:0] main_etherbone_rx_cdc_asyncfifo_dout;
wire main_etherbone_rx_cdc_graycounter0_ce;
reg [2:0] main_etherbone_rx_cdc_graycounter0_q = 3'd0;
wire [2:0] main_etherbone_rx_cdc_graycounter0_q_next;
reg [2:0] main_etherbone_rx_cdc_graycounter0_q_binary = 3'd0;
reg [2:0] main_etherbone_rx_cdc_graycounter0_q_next_binary = 3'd0;
wire main_etherbone_rx_cdc_graycounter1_ce;
reg [2:0] main_etherbone_rx_cdc_graycounter1_q = 3'd0;
wire [2:0] main_etherbone_rx_cdc_graycounter1_q_next;
reg [2:0] main_etherbone_rx_cdc_graycounter1_q_binary = 3'd0;
reg [2:0] main_etherbone_rx_cdc_graycounter1_q_next_binary = 3'd0;
wire [2:0] main_etherbone_rx_cdc_produce_rdomain;
wire [2:0] main_etherbone_rx_cdc_consume_wdomain;
wire [1:0] main_etherbone_rx_cdc_wrport_adr;
wire [117:0] main_etherbone_rx_cdc_wrport_dat_r;
wire main_etherbone_rx_cdc_wrport_we;
wire [117:0] main_etherbone_rx_cdc_wrport_dat_w;
wire [1:0] main_etherbone_rx_cdc_rdport_adr;
wire [117:0] main_etherbone_rx_cdc_rdport_dat_r;
wire [31:0] main_etherbone_rx_cdc_fifo_in_payload_data;
wire [3:0] main_etherbone_rx_cdc_fifo_in_payload_error;
wire [15:0] main_etherbone_rx_cdc_fifo_in_param_src_port;
wire [15:0] main_etherbone_rx_cdc_fifo_in_param_dst_port;
wire [31:0] main_etherbone_rx_cdc_fifo_in_param_ip_address;
wire [15:0] main_etherbone_rx_cdc_fifo_in_param_length;
wire main_etherbone_rx_cdc_fifo_in_first;
wire main_etherbone_rx_cdc_fifo_in_last;
wire [31:0] main_etherbone_rx_cdc_fifo_out_payload_data;
wire [3:0] main_etherbone_rx_cdc_fifo_out_payload_error;
wire [15:0] main_etherbone_rx_cdc_fifo_out_param_src_port;
wire [15:0] main_etherbone_rx_cdc_fifo_out_param_dst_port;
wire [31:0] main_etherbone_rx_cdc_fifo_out_param_ip_address;
wire [15:0] main_etherbone_rx_cdc_fifo_out_param_length;
wire main_etherbone_rx_cdc_fifo_out_first;
wire main_etherbone_rx_cdc_fifo_out_last;
reg main_etherbone_probe_sink_valid = 1'd0;
reg main_etherbone_probe_sink_ready = 1'd0;
reg main_etherbone_probe_sink_first = 1'd0;
reg main_etherbone_probe_sink_last = 1'd0;
reg [31:0] main_etherbone_probe_sink_payload_data = 32'd0;
reg [3:0] main_etherbone_probe_sink_payload_error = 4'd0;
reg [3:0] main_etherbone_probe_sink_param_addr_size = 4'd0;
reg main_etherbone_probe_sink_param_nr = 1'd0;
reg main_etherbone_probe_sink_param_pf = 1'd0;
reg [3:0] main_etherbone_probe_sink_param_port_size = 4'd0;
reg main_etherbone_probe_sink_param_pr = 1'd0;
reg [15:0] main_etherbone_probe_sink_param_src_port = 16'd0;
reg [15:0] main_etherbone_probe_sink_param_dst_port = 16'd0;
reg [31:0] main_etherbone_probe_sink_param_ip_address = 32'd0;
reg [15:0] main_etherbone_probe_sink_param_length = 16'd0;
reg main_etherbone_probe_source_valid = 1'd0;
reg main_etherbone_probe_source_ready = 1'd0;
reg main_etherbone_probe_source_first = 1'd0;
reg main_etherbone_probe_source_last = 1'd0;
reg [31:0] main_etherbone_probe_source_payload_data = 32'd0;
reg [3:0] main_etherbone_probe_source_payload_error = 4'd0;
reg [3:0] main_etherbone_probe_source_param_addr_size = 4'd0;
reg main_etherbone_probe_source_param_nr = 1'd0;
reg main_etherbone_probe_source_param_pf = 1'd0;
reg [3:0] main_etherbone_probe_source_param_port_size = 4'd0;
reg main_etherbone_probe_source_param_pr = 1'd0;
reg [15:0] main_etherbone_probe_source_param_src_port = 16'd0;
reg [15:0] main_etherbone_probe_source_param_dst_port = 16'd0;
reg [31:0] main_etherbone_probe_source_param_ip_address = 32'd0;
reg [15:0] main_etherbone_probe_source_param_length = 16'd0;
reg main_etherbone_record_sink_sink_valid = 1'd0;
wire main_etherbone_record_sink_sink_ready;
reg main_etherbone_record_sink_sink_first = 1'd0;
reg main_etherbone_record_sink_sink_last = 1'd0;
reg [31:0] main_etherbone_record_sink_sink_payload_data = 32'd0;
reg [3:0] main_etherbone_record_sink_sink_payload_error = 4'd0;
reg [3:0] main_etherbone_record_sink_sink_param_addr_size = 4'd0;
reg main_etherbone_record_sink_sink_param_nr = 1'd0;
reg main_etherbone_record_sink_sink_param_pf = 1'd0;
reg [3:0] main_etherbone_record_sink_sink_param_port_size = 4'd0;
reg main_etherbone_record_sink_sink_param_pr = 1'd0;
reg [15:0] main_etherbone_record_sink_sink_param_src_port = 16'd0;
reg [15:0] main_etherbone_record_sink_sink_param_dst_port = 16'd0;
reg [31:0] main_etherbone_record_sink_sink_param_ip_address = 32'd0;
reg [15:0] main_etherbone_record_sink_sink_param_length = 16'd0;
wire main_etherbone_record_source_source_valid;
reg main_etherbone_record_source_source_ready = 1'd0;
wire main_etherbone_record_source_source_first;
wire main_etherbone_record_source_source_last;
wire [31:0] main_etherbone_record_source_source_payload_data;
wire [3:0] main_etherbone_record_source_source_payload_error;
wire [3:0] main_etherbone_record_source_source_param_addr_size;
wire main_etherbone_record_source_source_param_nr;
wire main_etherbone_record_source_source_param_pf;
wire [3:0] main_etherbone_record_source_source_param_port_size;
wire main_etherbone_record_source_source_param_pr;
wire [15:0] main_etherbone_record_source_source_param_src_port;
wire [15:0] main_etherbone_record_source_source_param_dst_port;
reg [31:0] main_etherbone_record_source_source_param_ip_address = 32'd0;
reg [15:0] main_etherbone_record_source_source_param_length = 16'd0;
wire main_etherbone_record_depacketizer_sink_valid;
reg main_etherbone_record_depacketizer_sink_ready = 1'd0;
wire main_etherbone_record_depacketizer_sink_first;
wire main_etherbone_record_depacketizer_sink_last;
wire [31:0] main_etherbone_record_depacketizer_sink_payload_data;
wire [3:0] main_etherbone_record_depacketizer_sink_payload_error;
wire [3:0] main_etherbone_record_depacketizer_sink_param_addr_size;
wire main_etherbone_record_depacketizer_sink_param_nr;
wire main_etherbone_record_depacketizer_sink_param_pf;
wire [3:0] main_etherbone_record_depacketizer_sink_param_port_size;
wire main_etherbone_record_depacketizer_sink_param_pr;
wire [15:0] main_etherbone_record_depacketizer_sink_param_src_port;
wire [15:0] main_etherbone_record_depacketizer_sink_param_dst_port;
wire [31:0] main_etherbone_record_depacketizer_sink_param_ip_address;
wire [15:0] main_etherbone_record_depacketizer_sink_param_length;
reg main_etherbone_record_depacketizer_source_valid = 1'd0;
wire main_etherbone_record_depacketizer_source_ready;
reg main_etherbone_record_depacketizer_source_first = 1'd0;
reg main_etherbone_record_depacketizer_source_last = 1'd0;
reg [31:0] main_etherbone_record_depacketizer_source_payload_data = 32'd0;
wire [3:0] main_etherbone_record_depacketizer_source_payload_error;
wire main_etherbone_record_depacketizer_source_param_bca;
wire [7:0] main_etherbone_record_depacketizer_source_param_byte_enable;
wire main_etherbone_record_depacketizer_source_param_cyc;
wire main_etherbone_record_depacketizer_source_param_rca;
wire [7:0] main_etherbone_record_depacketizer_source_param_rcount;
wire main_etherbone_record_depacketizer_source_param_rff;
wire main_etherbone_record_depacketizer_source_param_wca;
wire [7:0] main_etherbone_record_depacketizer_source_param_wcount;
wire main_etherbone_record_depacketizer_source_param_wff;
wire [31:0] main_etherbone_record_depacketizer_header;
reg [31:0] main_etherbone_record_depacketizer_sr = 32'd0;
reg main_etherbone_record_depacketizer_sr_shift = 1'd0;
reg main_etherbone_record_depacketizer_sr_shift_leftover = 1'd0;
reg main_etherbone_record_depacketizer_count = 1'd0;
reg main_etherbone_record_depacketizer_sink_d_valid = 1'd0;
reg main_etherbone_record_depacketizer_sink_d_ready = 1'd0;
reg main_etherbone_record_depacketizer_sink_d_first = 1'd0;
reg main_etherbone_record_depacketizer_sink_d_last = 1'd0;
reg [31:0] main_etherbone_record_depacketizer_sink_d_payload_data = 32'd0;
reg [3:0] main_etherbone_record_depacketizer_sink_d_payload_error = 4'd0;
reg [3:0] main_etherbone_record_depacketizer_sink_d_param_addr_size = 4'd0;
reg main_etherbone_record_depacketizer_sink_d_param_nr = 1'd0;
reg main_etherbone_record_depacketizer_sink_d_param_pf = 1'd0;
reg [3:0] main_etherbone_record_depacketizer_sink_d_param_port_size = 4'd0;
reg main_etherbone_record_depacketizer_sink_d_param_pr = 1'd0;
reg [15:0] main_etherbone_record_depacketizer_sink_d_param_src_port = 16'd0;
reg [15:0] main_etherbone_record_depacketizer_sink_d_param_dst_port = 16'd0;
reg [31:0] main_etherbone_record_depacketizer_sink_d_param_ip_address = 32'd0;
reg [15:0] main_etherbone_record_depacketizer_sink_d_param_length = 16'd0;
reg main_etherbone_record_depacketizer_fsm_from_idle = 1'd0;
wire main_etherbone_record_receiver_sink_sink_valid;
wire main_etherbone_record_receiver_sink_sink_ready;
wire main_etherbone_record_receiver_sink_sink_first;
wire main_etherbone_record_receiver_sink_sink_last;
reg [31:0] main_etherbone_record_receiver_sink_sink_payload_data = 32'd0;
wire [3:0] main_etherbone_record_receiver_sink_sink_payload_error;
wire main_etherbone_record_receiver_sink_sink_param_bca;
wire [7:0] main_etherbone_record_receiver_sink_sink_param_byte_enable;
wire main_etherbone_record_receiver_sink_sink_param_cyc;
wire main_etherbone_record_receiver_sink_sink_param_rca;
wire [7:0] main_etherbone_record_receiver_sink_sink_param_rcount;
wire main_etherbone_record_receiver_sink_sink_param_rff;
wire main_etherbone_record_receiver_sink_sink_param_wca;
wire [7:0] main_etherbone_record_receiver_sink_sink_param_wcount;
wire main_etherbone_record_receiver_sink_sink_param_wff;
reg main_etherbone_record_receiver_source_source_valid = 1'd0;
wire main_etherbone_record_receiver_source_source_ready;
reg main_etherbone_record_receiver_source_source_first = 1'd0;
reg main_etherbone_record_receiver_source_source_last = 1'd0;
reg [31:0] main_etherbone_record_receiver_source_source_payload_addr = 32'd0;
reg [31:0] main_etherbone_record_receiver_source_source_payload_data = 32'd0;
reg main_etherbone_record_receiver_source_source_param_we = 1'd0;
reg [7:0] main_etherbone_record_receiver_source_source_param_count = 8'd0;
reg [31:0] main_etherbone_record_receiver_source_source_param_base_addr = 32'd0;
reg [3:0] main_etherbone_record_receiver_source_source_param_be = 4'd0;
wire main_etherbone_record_receiver_fifo_sink_valid;
wire main_etherbone_record_receiver_fifo_sink_ready;
wire main_etherbone_record_receiver_fifo_sink_first;
wire main_etherbone_record_receiver_fifo_sink_last;
wire [31:0] main_etherbone_record_receiver_fifo_sink_payload_data;
wire [3:0] main_etherbone_record_receiver_fifo_sink_payload_error;
wire main_etherbone_record_receiver_fifo_sink_param_bca;
wire [7:0] main_etherbone_record_receiver_fifo_sink_param_byte_enable;
wire main_etherbone_record_receiver_fifo_sink_param_cyc;
wire main_etherbone_record_receiver_fifo_sink_param_rca;
wire [7:0] main_etherbone_record_receiver_fifo_sink_param_rcount;
wire main_etherbone_record_receiver_fifo_sink_param_rff;
wire main_etherbone_record_receiver_fifo_sink_param_wca;
wire [7:0] main_etherbone_record_receiver_fifo_sink_param_wcount;
wire main_etherbone_record_receiver_fifo_sink_param_wff;
wire main_etherbone_record_receiver_fifo_source_valid;
reg main_etherbone_record_receiver_fifo_source_ready = 1'd0;
wire main_etherbone_record_receiver_fifo_source_first;
wire main_etherbone_record_receiver_fifo_source_last;
wire [31:0] main_etherbone_record_receiver_fifo_source_payload_data;
wire [3:0] main_etherbone_record_receiver_fifo_source_payload_error;
wire main_etherbone_record_receiver_fifo_source_param_bca;
wire [7:0] main_etherbone_record_receiver_fifo_source_param_byte_enable;
wire main_etherbone_record_receiver_fifo_source_param_cyc;
wire main_etherbone_record_receiver_fifo_source_param_rca;
wire [7:0] main_etherbone_record_receiver_fifo_source_param_rcount;
wire main_etherbone_record_receiver_fifo_source_param_rff;
wire main_etherbone_record_receiver_fifo_source_param_wca;
wire [7:0] main_etherbone_record_receiver_fifo_source_param_wcount;
wire main_etherbone_record_receiver_fifo_source_param_wff;
wire main_etherbone_record_receiver_fifo_re;
reg main_etherbone_record_receiver_fifo_readable = 1'd0;
wire main_etherbone_record_receiver_fifo_syncfifo_we;
wire main_etherbone_record_receiver_fifo_syncfifo_writable;
wire main_etherbone_record_receiver_fifo_syncfifo_re;
wire main_etherbone_record_receiver_fifo_syncfifo_readable;
wire [67:0] main_etherbone_record_receiver_fifo_syncfifo_din;
wire [67:0] main_etherbone_record_receiver_fifo_syncfifo_dout;
reg [2:0] main_etherbone_record_receiver_fifo_level0 = 3'd0;
reg main_etherbone_record_receiver_fifo_replace = 1'd0;
reg [1:0] main_etherbone_record_receiver_fifo_produce = 2'd0;
reg [1:0] main_etherbone_record_receiver_fifo_consume = 2'd0;
reg [1:0] main_etherbone_record_receiver_fifo_wrport_adr = 2'd0;
wire [67:0] main_etherbone_record_receiver_fifo_wrport_dat_r;
wire main_etherbone_record_receiver_fifo_wrport_we;
wire [67:0] main_etherbone_record_receiver_fifo_wrport_dat_w;
wire main_etherbone_record_receiver_fifo_do_read;
wire [1:0] main_etherbone_record_receiver_fifo_rdport_adr;
wire [67:0] main_etherbone_record_receiver_fifo_rdport_dat_r;
wire main_etherbone_record_receiver_fifo_rdport_re;
wire [2:0] main_etherbone_record_receiver_fifo_level1;
wire [31:0] main_etherbone_record_receiver_fifo_fifo_in_payload_data;
wire [3:0] main_etherbone_record_receiver_fifo_fifo_in_payload_error;
wire main_etherbone_record_receiver_fifo_fifo_in_param_bca;
wire [7:0] main_etherbone_record_receiver_fifo_fifo_in_param_byte_enable;
wire main_etherbone_record_receiver_fifo_fifo_in_param_cyc;
wire main_etherbone_record_receiver_fifo_fifo_in_param_rca;
wire [7:0] main_etherbone_record_receiver_fifo_fifo_in_param_rcount;
wire main_etherbone_record_receiver_fifo_fifo_in_param_rff;
wire main_etherbone_record_receiver_fifo_fifo_in_param_wca;
wire [7:0] main_etherbone_record_receiver_fifo_fifo_in_param_wcount;
wire main_etherbone_record_receiver_fifo_fifo_in_param_wff;
wire main_etherbone_record_receiver_fifo_fifo_in_first;
wire main_etherbone_record_receiver_fifo_fifo_in_last;
wire [31:0] main_etherbone_record_receiver_fifo_fifo_out_payload_data;
wire [3:0] main_etherbone_record_receiver_fifo_fifo_out_payload_error;
wire main_etherbone_record_receiver_fifo_fifo_out_param_bca;
wire [7:0] main_etherbone_record_receiver_fifo_fifo_out_param_byte_enable;
wire main_etherbone_record_receiver_fifo_fifo_out_param_cyc;
wire main_etherbone_record_receiver_fifo_fifo_out_param_rca;
wire [7:0] main_etherbone_record_receiver_fifo_fifo_out_param_rcount;
wire main_etherbone_record_receiver_fifo_fifo_out_param_rff;
wire main_etherbone_record_receiver_fifo_fifo_out_param_wca;
wire [7:0] main_etherbone_record_receiver_fifo_fifo_out_param_wcount;
wire main_etherbone_record_receiver_fifo_fifo_out_param_wff;
wire main_etherbone_record_receiver_fifo_fifo_out_first;
wire main_etherbone_record_receiver_fifo_fifo_out_last;
reg [31:0] main_etherbone_record_receiver_base_addr = 32'd0;
reg main_etherbone_record_receiver_base_addr_update = 1'd0;
reg [8:0] main_etherbone_record_receiver_counter = 9'd0;
reg main_etherbone_record_receiver_counter_reset = 1'd0;
reg main_etherbone_record_receiver_counter_ce = 1'd0;
reg main_etherbone_record_first = 1'd1;
reg [31:0] main_etherbone_record_last_ip_address = 32'd0;
wire main_etherbone_record_sender_sink_sink_valid;
wire main_etherbone_record_sender_sink_sink_ready;
wire main_etherbone_record_sender_sink_sink_first;
wire main_etherbone_record_sender_sink_sink_last;
wire [31:0] main_etherbone_record_sender_sink_sink_payload_addr;
wire [31:0] main_etherbone_record_sender_sink_sink_payload_data;
wire main_etherbone_record_sender_sink_sink_param_we;
wire [7:0] main_etherbone_record_sender_sink_sink_param_count;
wire [31:0] main_etherbone_record_sender_sink_sink_param_base_addr;
wire [3:0] main_etherbone_record_sender_sink_sink_param_be;
reg main_etherbone_record_sender_source_source_valid = 1'd0;
wire main_etherbone_record_sender_source_source_ready;
reg main_etherbone_record_sender_source_source_first = 1'd0;
reg main_etherbone_record_sender_source_source_last = 1'd0;
reg [31:0] main_etherbone_record_sender_source_source_payload_data = 32'd0;
reg [3:0] main_etherbone_record_sender_source_source_payload_error = 4'd0;
reg main_etherbone_record_sender_source_source_param_bca = 1'd0;
reg [7:0] main_etherbone_record_sender_source_source_param_byte_enable = 8'd0;
reg main_etherbone_record_sender_source_source_param_cyc = 1'd0;
reg main_etherbone_record_sender_source_source_param_rca = 1'd0;
reg [7:0] main_etherbone_record_sender_source_source_param_rcount = 8'd0;
reg main_etherbone_record_sender_source_source_param_rff = 1'd0;
reg main_etherbone_record_sender_source_source_param_wca = 1'd0;
reg [7:0] main_etherbone_record_sender_source_source_param_wcount = 8'd0;
reg main_etherbone_record_sender_source_source_param_wff = 1'd0;
wire main_etherbone_record_sender_fifo_sink_valid;
wire main_etherbone_record_sender_fifo_sink_ready;
wire main_etherbone_record_sender_fifo_sink_first;
wire main_etherbone_record_sender_fifo_sink_last;
wire [31:0] main_etherbone_record_sender_fifo_sink_payload_addr;
wire [31:0] main_etherbone_record_sender_fifo_sink_payload_data;
wire main_etherbone_record_sender_fifo_sink_param_we;
wire [7:0] main_etherbone_record_sender_fifo_sink_param_count;
wire [31:0] main_etherbone_record_sender_fifo_sink_param_base_addr;
wire [3:0] main_etherbone_record_sender_fifo_sink_param_be;
wire main_etherbone_record_sender_fifo_source_valid;
reg main_etherbone_record_sender_fifo_source_ready = 1'd0;
wire main_etherbone_record_sender_fifo_source_first;
wire main_etherbone_record_sender_fifo_source_last;
wire [31:0] main_etherbone_record_sender_fifo_source_payload_addr;
wire [31:0] main_etherbone_record_sender_fifo_source_payload_data;
wire main_etherbone_record_sender_fifo_source_param_we;
wire [7:0] main_etherbone_record_sender_fifo_source_param_count;
wire [31:0] main_etherbone_record_sender_fifo_source_param_base_addr;
wire [3:0] main_etherbone_record_sender_fifo_source_param_be;
wire main_etherbone_record_sender_fifo_re;
reg main_etherbone_record_sender_fifo_readable = 1'd0;
wire main_etherbone_record_sender_fifo_syncfifo_we;
wire main_etherbone_record_sender_fifo_syncfifo_writable;
wire main_etherbone_record_sender_fifo_syncfifo_re;
wire main_etherbone_record_sender_fifo_syncfifo_readable;
wire [110:0] main_etherbone_record_sender_fifo_syncfifo_din;
wire [110:0] main_etherbone_record_sender_fifo_syncfifo_dout;
reg [2:0] main_etherbone_record_sender_fifo_level0 = 3'd0;
reg main_etherbone_record_sender_fifo_replace = 1'd0;
reg [1:0] main_etherbone_record_sender_fifo_produce = 2'd0;
reg [1:0] main_etherbone_record_sender_fifo_consume = 2'd0;
reg [1:0] main_etherbone_record_sender_fifo_wrport_adr = 2'd0;
wire [110:0] main_etherbone_record_sender_fifo_wrport_dat_r;
wire main_etherbone_record_sender_fifo_wrport_we;
wire [110:0] main_etherbone_record_sender_fifo_wrport_dat_w;
wire main_etherbone_record_sender_fifo_do_read;
wire [1:0] main_etherbone_record_sender_fifo_rdport_adr;
wire [110:0] main_etherbone_record_sender_fifo_rdport_dat_r;
wire main_etherbone_record_sender_fifo_rdport_re;
wire [2:0] main_etherbone_record_sender_fifo_level1;
wire [31:0] main_etherbone_record_sender_fifo_fifo_in_payload_addr;
wire [31:0] main_etherbone_record_sender_fifo_fifo_in_payload_data;
wire main_etherbone_record_sender_fifo_fifo_in_param_we;
wire [7:0] main_etherbone_record_sender_fifo_fifo_in_param_count;
wire [31:0] main_etherbone_record_sender_fifo_fifo_in_param_base_addr;
wire [3:0] main_etherbone_record_sender_fifo_fifo_in_param_be;
wire main_etherbone_record_sender_fifo_fifo_in_first;
wire main_etherbone_record_sender_fifo_fifo_in_last;
wire [31:0] main_etherbone_record_sender_fifo_fifo_out_payload_addr;
wire [31:0] main_etherbone_record_sender_fifo_fifo_out_payload_data;
wire main_etherbone_record_sender_fifo_fifo_out_param_we;
wire [7:0] main_etherbone_record_sender_fifo_fifo_out_param_count;
wire [31:0] main_etherbone_record_sender_fifo_fifo_out_param_base_addr;
wire [3:0] main_etherbone_record_sender_fifo_fifo_out_param_be;
wire main_etherbone_record_sender_fifo_fifo_out_first;
wire main_etherbone_record_sender_fifo_fifo_out_last;
reg main_etherbone_record_sender_data_sel = 1'd0;
wire main_etherbone_record_packetizer_sink_valid;
reg main_etherbone_record_packetizer_sink_ready = 1'd0;
wire main_etherbone_record_packetizer_sink_first;
wire main_etherbone_record_packetizer_sink_last;
reg [31:0] main_etherbone_record_packetizer_sink_payload_data = 32'd0;
wire [3:0] main_etherbone_record_packetizer_sink_payload_error;
wire main_etherbone_record_packetizer_sink_param_bca;
wire [7:0] main_etherbone_record_packetizer_sink_param_byte_enable;
wire main_etherbone_record_packetizer_sink_param_cyc;
wire main_etherbone_record_packetizer_sink_param_rca;
wire [7:0] main_etherbone_record_packetizer_sink_param_rcount;
wire main_etherbone_record_packetizer_sink_param_rff;
wire main_etherbone_record_packetizer_sink_param_wca;
wire [7:0] main_etherbone_record_packetizer_sink_param_wcount;
wire main_etherbone_record_packetizer_sink_param_wff;
reg main_etherbone_record_packetizer_source_valid = 1'd0;
wire main_etherbone_record_packetizer_source_ready;
reg main_etherbone_record_packetizer_source_first = 1'd0;
reg main_etherbone_record_packetizer_source_last = 1'd0;
reg [31:0] main_etherbone_record_packetizer_source_payload_data = 32'd0;
wire [3:0] main_etherbone_record_packetizer_source_payload_error;
reg [3:0] main_etherbone_record_packetizer_source_param_addr_size = 4'd0;
reg main_etherbone_record_packetizer_source_param_nr = 1'd0;
reg main_etherbone_record_packetizer_source_param_pf = 1'd0;
reg [3:0] main_etherbone_record_packetizer_source_param_port_size = 4'd0;
reg main_etherbone_record_packetizer_source_param_pr = 1'd0;
reg [15:0] main_etherbone_record_packetizer_source_param_src_port = 16'd0;
reg [15:0] main_etherbone_record_packetizer_source_param_dst_port = 16'd0;
reg [31:0] main_etherbone_record_packetizer_source_param_ip_address = 32'd0;
reg [15:0] main_etherbone_record_packetizer_source_param_length = 16'd0;
reg [31:0] main_etherbone_record_packetizer_header = 32'd0;
reg [31:0] main_etherbone_record_packetizer_sr = 32'd0;
reg main_etherbone_record_packetizer_sr_load = 1'd0;
reg main_etherbone_record_packetizer_sr_shift = 1'd0;
reg main_etherbone_record_packetizer_count = 1'd0;
reg main_etherbone_record_packetizer_sink_d_valid = 1'd0;
reg main_etherbone_record_packetizer_sink_d_ready = 1'd0;
reg main_etherbone_record_packetizer_sink_d_first = 1'd0;
reg main_etherbone_record_packetizer_sink_d_last = 1'd0;
reg [31:0] main_etherbone_record_packetizer_sink_d_payload_data = 32'd0;
reg [3:0] main_etherbone_record_packetizer_sink_d_payload_error = 4'd0;
reg main_etherbone_record_packetizer_sink_d_param_bca = 1'd0;
reg [7:0] main_etherbone_record_packetizer_sink_d_param_byte_enable = 8'd0;
reg main_etherbone_record_packetizer_sink_d_param_cyc = 1'd0;
reg main_etherbone_record_packetizer_sink_d_param_rca = 1'd0;
reg [7:0] main_etherbone_record_packetizer_sink_d_param_rcount = 8'd0;
reg main_etherbone_record_packetizer_sink_d_param_rff = 1'd0;
reg main_etherbone_record_packetizer_sink_d_param_wca = 1'd0;
reg [7:0] main_etherbone_record_packetizer_sink_d_param_wcount = 8'd0;
reg main_etherbone_record_packetizer_sink_d_param_wff = 1'd0;
reg main_etherbone_record_packetizer_fsm_from_idle = 1'd0;
wire main_etherbone_dispatcher_sel0;
reg main_etherbone_dispatcher_first = 1'd1;
reg main_etherbone_dispatcher_last = 1'd0;
wire main_etherbone_dispatcher_ongoing0;
reg main_etherbone_dispatcher_ongoing1 = 1'd0;
reg main_etherbone_dispatcher_sel1 = 1'd0;
reg main_etherbone_dispatcher_sel_ongoing = 1'd0;
reg [1:0] main_etherbone_request = 2'd0;
reg main_etherbone_grant = 1'd0;
reg main_etherbone_status0_first = 1'd1;
reg main_etherbone_status0_last = 1'd0;
wire main_etherbone_status0_ongoing0;
reg main_etherbone_status0_ongoing1 = 1'd0;
reg main_etherbone_status1_first = 1'd1;
reg main_etherbone_status1_last = 1'd0;
wire main_etherbone_status1_ongoing0;
reg main_etherbone_status1_ongoing1 = 1'd0;
wire main_etherbone_liteethetherbonewishbonemaster_sink_valid;
reg main_etherbone_liteethetherbonewishbonemaster_sink_ready = 1'd0;
wire main_etherbone_liteethetherbonewishbonemaster_sink_first;
wire main_etherbone_liteethetherbonewishbonemaster_sink_last;
wire [31:0] main_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
wire [31:0] main_etherbone_liteethetherbonewishbonemaster_sink_payload_data;
wire main_etherbone_liteethetherbonewishbonemaster_sink_param_we;
wire [7:0] main_etherbone_liteethetherbonewishbonemaster_sink_param_count;
wire [31:0] main_etherbone_liteethetherbonewishbonemaster_sink_param_base_addr;
wire [3:0] main_etherbone_liteethetherbonewishbonemaster_sink_param_be;
reg main_etherbone_liteethetherbonewishbonemaster_source_valid = 1'd0;
wire main_etherbone_liteethetherbonewishbonemaster_source_ready;
reg main_etherbone_liteethetherbonewishbonemaster_source_first = 1'd0;
reg main_etherbone_liteethetherbonewishbonemaster_source_last = 1'd0;
reg [31:0] main_etherbone_liteethetherbonewishbonemaster_source_payload_addr = 32'd0;
reg [31:0] main_etherbone_liteethetherbonewishbonemaster_source_payload_data = 32'd0;
reg main_etherbone_liteethetherbonewishbonemaster_source_param_we = 1'd0;
reg [7:0] main_etherbone_liteethetherbonewishbonemaster_source_param_count = 8'd0;
reg [31:0] main_etherbone_liteethetherbonewishbonemaster_source_param_base_addr = 32'd0;
reg [3:0] main_etherbone_liteethetherbonewishbonemaster_source_param_be = 4'd0;
reg [29:0] main_etherbone_liteethetherbonewishbonemaster_bus_adr = 30'd0;
reg [31:0] main_etherbone_liteethetherbonewishbonemaster_bus_dat_w = 32'd0;
wire [31:0] main_etherbone_liteethetherbonewishbonemaster_bus_dat_r;
reg [3:0] main_etherbone_liteethetherbonewishbonemaster_bus_sel = 4'd0;
reg main_etherbone_liteethetherbonewishbonemaster_bus_cyc = 1'd0;
reg main_etherbone_liteethetherbonewishbonemaster_bus_stb = 1'd0;
wire main_etherbone_liteethetherbonewishbonemaster_bus_ack;
reg main_etherbone_liteethetherbonewishbonemaster_bus_we = 1'd0;
reg [2:0] main_etherbone_liteethetherbonewishbonemaster_bus_cti = 3'd0;
reg [1:0] main_etherbone_liteethetherbonewishbonemaster_bus_bte = 2'd0;
wire main_etherbone_liteethetherbonewishbonemaster_bus_err;
reg main_etherbone_liteethetherbonewishbonemaster_data_update = 1'd0;
reg spiflash_pads_clk = 1'd0;
reg spiflash_pads_cs_n = 1'd0;
reg spiflash_pads_mosi = 1'd0;
wire spiflash_pads_miso;
wire spiflash_start0;
wire [7:0] spiflash_length0;
reg spiflash_done0 = 1'd0;
reg spiflash_irq = 1'd0;
wire [39:0] spiflash_mosi1;
reg [39:0] spiflash_miso1 = 40'd0;
wire spiflash_cs;
wire spiflash_loopback;
reg [15:0] spiflash_clk_divider0 = 16'd10;
reg spiflash_start1 = 1'd0;
wire [7:0] spiflash_length1;
reg [15:0] spiflash_control_storage = 16'd0;
reg spiflash_control_re = 1'd0;
wire spiflash_done1;
wire spiflash_status_status;
wire spiflash_status_we;
reg [39:0] spiflash_mosi_storage = 40'd0;
reg spiflash_mosi_re = 1'd0;
wire [39:0] spiflash_miso_status;
wire spiflash_miso_we;
wire spiflash_sel;
reg spiflash_cs_storage = 1'd1;
reg spiflash_cs_re = 1'd0;
reg spiflash_loopback_storage = 1'd0;
reg spiflash_loopback_re = 1'd0;
reg spiflash_clk_enable = 1'd0;
reg spiflash_cs_enable = 1'd0;
reg [5:0] spiflash_count = 6'd0;
reg spiflash_mosi_latch = 1'd0;
reg spiflash_miso_latch = 1'd0;
reg [15:0] spiflash_clk_divider1 = 16'd0;
wire spiflash_clk_rise;
wire spiflash_clk_fall;
reg [39:0] spiflash_mosi_data = 40'd0;
reg [5:0] spiflash_mosi_sel = 6'd0;
reg [39:0] spiflash_miso_data = 40'd0;
reg [31:0] t = 32'd0;
wire [29:0] wb_adr;
wire [31:0] wb_dat_w;
wire [31:0] wb_dat_r;
wire [3:0] wb_sel;
wire wb_cyc;
wire wb_stb;
reg wb_ack = 1'd0;
wire wb_we;
wire [2:0] wb_cti;
wire [1:0] wb_bte;
reg wb_err = 1'd0;
wire [15:0] pulsegen_out0;
reg pulsegen_go_storage = 1'd0;
reg pulsegen_go_re = 1'd0;
reg [31:0] pulsegen_r_storage = 32'd200;
reg pulsegen_r_re = 1'd0;
reg [6:0] pulsegen_pos = 7'd0;
reg [1:0] pulsegen_slow = 2'd0;
wire signed [31:0] pulsegen_x_in;
reg pulsegen_x_in_we = 1'd0;
wire [6:0] pulsegen_x_in_adr;
wire signed [31:0] pulsegen_x_out;
wire [6:0] pulsegen_x_out_adr;
wire [6:0] pulsegen_scaling;
wire pulsegen_start;
reg pulsegen_busy = 1'd0;
reg pulsegen_done = 1'd0;
wire signed [17:0] pulsegen_ar;
wire signed [17:0] pulsegen_ai;
wire signed [17:0] pulsegen_br;
wire signed [17:0] pulsegen_bi;
reg [3:0] pulsegen_stage = 4'd0;
wire pulsegen_en;
reg [6:0] pulsegen_scaling_reg = 7'd0;
wire pulsegen_s;
reg [5:0] pulsegen_fft_w_idx = 6'd0;
reg [6:0] pulsegen_fft_step = 7'd0;
wire [4:0] pulsegen_fft_adr;
wire [35:0] pulsegen_fft_dat_r;
wire signed [17:0] pulsegen_fft_wr;
wire signed [17:0] pulsegen_fft_wi;
wire signed [17:0] pulsegen_fft_wr_ram;
wire signed [17:0] pulsegen_fft_wi_ram;
reg pulsegen_fft_w_idx_l = 1'd0;
reg signed [17:0] pulsegen_fft_cr = 18'd0;
reg signed [17:0] pulsegen_fft_ci = 18'd0;
reg signed [17:0] pulsegen_fft_dr = 18'd0;
reg signed [17:0] pulsegen_fft_di = 18'd0;
reg signed [17:0] pulsegen_fft_ar_reg_fft0 = 18'd0;
reg signed [17:0] pulsegen_fft_ar_reg_fft1 = 18'd0;
reg signed [17:0] pulsegen_fft_ar_reg_fft2 = 18'd0;
reg signed [17:0] pulsegen_fft_ar_reg_fft3 = 18'd0;
reg signed [17:0] pulsegen_fft_ar_reg_fft4 = 18'd0;
reg signed [17:0] pulsegen_fft_ar_reg_fft5 = 18'd0;
reg signed [17:0] pulsegen_fft_ai_reg_fft0 = 18'd0;
reg signed [17:0] pulsegen_fft_ai_reg_fft1 = 18'd0;
reg signed [17:0] pulsegen_fft_ai_reg_fft2 = 18'd0;
reg signed [17:0] pulsegen_fft_ai_reg_fft3 = 18'd0;
reg signed [17:0] pulsegen_fft_ai_reg_fft4 = 18'd0;
reg signed [17:0] pulsegen_fft_ai_reg_fft5 = 18'd0;
reg signed [17:0] pulsegen_fft_br_reg_fft0 = 18'd0;
reg signed [17:0] pulsegen_fft_br_reg_fft1 = 18'd0;
reg signed [17:0] pulsegen_fft_br_reg_fft2 = 18'd0;
reg signed [17:0] pulsegen_fft_br_reg_fft3 = 18'd0;
reg signed [17:0] pulsegen_fft_bi_reg_fft0 = 18'd0;
reg signed [17:0] pulsegen_fft_bi_reg_fft1 = 18'd0;
reg signed [17:0] pulsegen_fft_bi_reg_fft2 = 18'd0;
reg signed [17:0] pulsegen_fft_bi_reg_fft3 = 18'd0;
reg signed [17:0] pulsegen_fft_wr_reg_fft0 = 18'd0;
reg signed [17:0] pulsegen_fft_wr_reg_fft1 = 18'd0;
reg signed [17:0] pulsegen_fft_wr_reg_fft2 = 18'd0;
reg signed [17:0] pulsegen_fft_wi_reg_fft0 = 18'd0;
reg signed [17:0] pulsegen_fft_wi_reg_fft1 = 18'd0;
reg signed [17:0] pulsegen_fft_wi_reg_fft2 = 18'd0;
reg signed [18:0] pulsegen_fft_bd = 19'd0;
reg signed [18:0] pulsegen_fft_ws = 19'd0;
reg signed [18:0] pulsegen_fft_wd = 19'd0;
reg signed [36:0] pulsegen_fft_m_fft0 = 37'd0;
reg signed [36:0] pulsegen_fft_m_fft1 = 37'd0;
reg signed [36:0] pulsegen_fft_m_fft2 = 37'd0;
reg signed [36:0] pulsegen_fft_m_fft3 = 37'd0;
reg signed [36:0] pulsegen_fft_m_fft4 = 37'd0;
reg signed [36:0] pulsegen_fft_m_fft5 = 37'd0;
reg signed [36:0] pulsegen_fft_m_fft6 = 37'd0;
reg signed [36:0] pulsegen_fft_m_fft7 = 37'd0;
wire [5:0] pulsegen_xram1_port1_adr;
wire [35:0] pulsegen_xram1_port1_dat_r;
wire pulsegen_xram1_port1_we;
wire [35:0] pulsegen_xram1_port1_dat_w;
wire [5:0] pulsegen_xram1_port2_adr;
wire [35:0] pulsegen_xram1_port2_dat_r;
wire pulsegen_xram1_port2_we;
wire [35:0] pulsegen_xram1_port2_dat_w;
wire [5:0] pulsegen_xram2a_port1_adr;
wire [35:0] pulsegen_xram2a_port1_dat_r;
wire pulsegen_xram2a_port1_we;
wire [35:0] pulsegen_xram2a_port1_dat_w;
wire [5:0] pulsegen_xram2a_port2_adr;
wire [35:0] pulsegen_xram2a_port2_dat_r;
wire pulsegen_xram2a_port2_we;
wire [35:0] pulsegen_xram2a_port2_dat_w;
wire [5:0] pulsegen_xram2b_port1_adr;
wire [35:0] pulsegen_xram2b_port1_dat_r;
wire pulsegen_xram2b_port1_we;
wire [35:0] pulsegen_xram2b_port1_dat_w;
wire [5:0] pulsegen_xram2b_port2_adr;
wire [35:0] pulsegen_xram2b_port2_dat_r;
wire pulsegen_xram2b_port2_we;
wire [35:0] pulsegen_xram2b_port2_dat_w;
wire [35:0] pulsegen_dat_r;
reg [5:0] pulsegen_fft_pos_r = 6'd0;
wire [5:0] pulsegen_fft_pos_w;
reg [3:0] pulsegen_fft_stage_w = 4'd0;
reg [3:0] pulsegen_fft_stage_w_n = 4'd0;
wire pulsegen_fft_a_mux;
wire pulsegen_fft_c_mux;
reg pulsegen_fft_a_mux_l = 1'd0;
wire pulsegen_fft_a_x2_mux;
wire pulsegen_fft_c_x2_mux;
reg pulsegen_fft_a_x2_mux_l = 1'd0;
reg pulsegen_fft_bfl_we = 1'd0;
wire pulsegen_fft_posbit_r;
reg pulsegen_fft_posbit_w = 1'd0;
reg pulsegen_fft_laststart = 1'd0;
wire [5:0] pulsegen_fft_x1p1_adr;
wire [5:0] pulsegen_fft_x1p2_adr;
wire [5:0] pulsegen_fft_x2p1_adr;
wire [5:0] pulsegen_fft_x2p2_adr;
wire [6:0] pulsegen_inp_ram_adr;
reg pulsegen_last_bit_xout_adr_l = 1'd0;
reg pulsegen_superinterpolator_input_input_ack = 1'd0;
wire signed [15:0] pulsegen_superinterpolator_input_input_payload_data;
wire pulsegen_superinterpolator_output_output_stb;
reg signed [15:0] pulsegen_superinterpolator_output_output_payload_data0 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_output_output_payload_data1 = 16'd0;
wire [11:0] pulsegen_superinterpolator_r;
wire pulsegen_superinterpolator_hbfstop;
wire pulsegen_superinterpolator_mode2;
wire pulsegen_superinterpolator_mode3;
reg pulsegen_superinterpolator_hbf0_step1 = 1'd0;
reg pulsegen_superinterpolator_hbf1_step1 = 1'd0;
wire pulsegen_superinterpolator_muxsel0;
reg signed [17:0] pulsegen_superinterpolator0 = 18'd9;
reg signed [17:0] pulsegen_superinterpolator1 = -18'd32;
reg signed [17:0] pulsegen_superinterpolator2 = 18'd83;
reg signed [17:0] pulsegen_superinterpolator3 = -18'd183;
reg signed [17:0] pulsegen_superinterpolator4 = 18'd360;
reg signed [17:0] pulsegen_superinterpolator5 = -18'd650;
reg signed [17:0] pulsegen_superinterpolator6 = 18'd1103;
reg signed [17:0] pulsegen_superinterpolator7 = -18'd1780;
reg signed [17:0] pulsegen_superinterpolator8 = 18'd2765;
reg signed [17:0] pulsegen_superinterpolator9 = -18'd4184;
reg signed [17:0] pulsegen_superinterpolator10 = 18'd6252;
reg signed [17:0] pulsegen_superinterpolator11 = -18'd9411;
reg signed [17:0] pulsegen_superinterpolator12 = 18'd14803;
reg signed [17:0] pulsegen_superinterpolator13 = -18'd26644;
reg signed [17:0] pulsegen_superinterpolator14 = 18'd83046;
reg signed [17:0] pulsegen_superinterpolator15 = 18'd69;
reg signed [17:0] pulsegen_superinterpolator16 = -18'd418;
reg signed [17:0] pulsegen_superinterpolator17 = 18'd1512;
reg signed [17:0] pulsegen_superinterpolator18 = -18'd4175;
reg signed [17:0] pulsegen_superinterpolator19 = 18'd9925;
reg signed [17:0] pulsegen_superinterpolator20 = -18'd23146;
reg signed [17:0] pulsegen_superinterpolator21 = 18'd81772;
reg signed [15:0] pulsegen_superinterpolator_x0 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x2 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x3 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x4 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x5 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x6 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x7 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x8 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x9 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x10 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x11 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x12 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x13 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x14 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x15 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x16 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x17 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x18 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x19 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x20 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x21 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x22 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x23 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x24 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x25 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x26 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x27 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x28 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x29 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x30 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x31 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x_end_l = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_0 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_1 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_2 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_3 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_4 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_5 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_6 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_7 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_8 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_9 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_10 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_11 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_12 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_13 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_14 = 16'd0;
reg signed [15:0] pulsegen_superinterpolator_x1_15 = 16'd0;
wire signed [15:0] pulsegen_superinterpolator_x1__;
wire signed [35:0] pulsegen_superinterpolator_y0;
wire signed [35:0] pulsegen_superinterpolator_y1;
wire signed [35:0] pulsegen_superinterpolator_y2;
wire signed [35:0] pulsegen_superinterpolator_y3;
wire signed [35:0] pulsegen_superinterpolator_y4;
wire signed [35:0] pulsegen_superinterpolator_y5;
wire signed [35:0] pulsegen_superinterpolator_y6;
wire signed [35:0] pulsegen_superinterpolator_y7;
reg signed [35:0] pulsegen_superinterpolator_y8 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y9 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y10 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y11 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y12 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y13 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y14 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y_reg0 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y_reg1 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y_reg2 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y_reg3 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y_reg4 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y_reg5 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_y_reg6 = 36'd0;
wire pulsegen_superinterpolator_cic_input_stb;
wire pulsegen_superinterpolator_cic_input_ack;
wire signed [15:0] pulsegen_superinterpolator_cic_input_payload_data;
wire pulsegen_superinterpolator_cic_output_stb;
wire signed [15:0] pulsegen_superinterpolator_cic_output_payload_data0;
wire signed [15:0] pulsegen_superinterpolator_cic_output_payload_data1;
wire [9:0] pulsegen_superinterpolator_cic_r;
reg [9:0] pulsegen_superinterpolator_cic_i = 10'd0;
wire pulsegen_superinterpolator_cic_comb_ce;
wire pulsegen_superinterpolator_cic_inp_stall;
reg pulsegen_superinterpolator_cic_inp_stall_reg = 1'd0;
reg [9:0] pulsegen_superinterpolator_cic_r_reg = 10'd0;
wire pulsegen_superinterpolator_cic_f_rst;
wire [9:0] pulsegen_superinterpolator_cic_adr;
wire [17:0] pulsegen_superinterpolator_cic_dat_r;
wire signed [17:0] pulsegen_superinterpolator_cic_out;
wire signed [3:0] pulsegen_superinterpolator_cic_shift;
wire signed [29:0] pulsegen_superinterpolator_cic_temp;
reg signed [17:0] pulsegen_superinterpolator_cic_old0 = 18'd0;
reg signed [18:0] pulsegen_superinterpolator_cic_diff0 = 19'd0;
reg signed [18:0] pulsegen_superinterpolator_cic_old1 = 19'd0;
reg signed [19:0] pulsegen_superinterpolator_cic_diff1 = 20'd0;
reg signed [18:0] pulsegen_superinterpolator_cic_sig_a = 19'd0;
reg signed [18:0] pulsegen_superinterpolator_cic_sig_b = 19'd0;
wire signed [18:0] pulsegen_superinterpolator_cic_sig_i;
reg signed [18:0] pulsegen_superinterpolator_cic_sig_a0 = 19'd0;
reg signed [19:0] pulsegen_superinterpolator_cic_sum_ab = 20'd0;
reg signed [27:0] pulsegen_superinterpolator_cic_sum_a = 28'd0;
reg signed [27:0] pulsegen_superinterpolator_cic_sum_b = 28'd0;
reg signed [17:0] pulsegen_superinterpolator_a0 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b0 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg0 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c0 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d0 = 18'd0;
reg pulsegen_superinterpolator_mux_p0 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad0 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m0 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p0 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a1 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b1 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg1 = 18'd0;
wire signed [35:0] pulsegen_superinterpolator_c1;
reg signed [17:0] pulsegen_superinterpolator_d1 = 18'd0;
reg pulsegen_superinterpolator_mux_p1 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad1 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m1 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p1 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a2 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b2 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg2 = 18'd0;
wire signed [35:0] pulsegen_superinterpolator_c2;
reg signed [17:0] pulsegen_superinterpolator_d2 = 18'd0;
reg pulsegen_superinterpolator_mux_p2 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad2 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m2 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p2 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a3 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b3 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg3 = 18'd0;
wire signed [35:0] pulsegen_superinterpolator_c3;
reg signed [17:0] pulsegen_superinterpolator_d3 = 18'd0;
reg pulsegen_superinterpolator_mux_p3 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad3 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m3 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p3 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a4 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b4 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg4 = 18'd0;
wire signed [35:0] pulsegen_superinterpolator_c4;
reg signed [17:0] pulsegen_superinterpolator_d4 = 18'd0;
reg pulsegen_superinterpolator_mux_p4 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad4 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m4 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p4 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a5 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b5 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg5 = 18'd0;
wire signed [35:0] pulsegen_superinterpolator_c5;
reg signed [17:0] pulsegen_superinterpolator_d5 = 18'd0;
reg pulsegen_superinterpolator_mux_p5 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad5 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m5 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p5 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a6 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b6 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg6 = 18'd0;
wire signed [35:0] pulsegen_superinterpolator_c6;
reg signed [17:0] pulsegen_superinterpolator_d6 = 18'd0;
reg pulsegen_superinterpolator_mux_p6 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad6 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m6 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p6 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a7 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b7 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg7 = 18'd0;
wire signed [35:0] pulsegen_superinterpolator_c7;
reg signed [17:0] pulsegen_superinterpolator_d7 = 18'd0;
reg pulsegen_superinterpolator_mux_p7 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad7 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m7 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p7 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a8 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b8 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg8 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c8 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d8 = 18'd0;
reg pulsegen_superinterpolator_mux_p8 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad8 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m8 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p8 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a9 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b9 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg9 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c9 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d9 = 18'd0;
reg pulsegen_superinterpolator_mux_p9 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad9 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m9 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p9 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a10 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b10 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg10 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c10 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d10 = 18'd0;
reg pulsegen_superinterpolator_mux_p10 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad10 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m10 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p10 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a11 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b11 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg11 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c11 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d11 = 18'd0;
reg pulsegen_superinterpolator_mux_p11 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad11 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m11 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p11 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a12 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b12 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg12 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c12 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d12 = 18'd0;
reg pulsegen_superinterpolator_mux_p12 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad12 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m12 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p12 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a13 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b13 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg13 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c13 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d13 = 18'd0;
reg pulsegen_superinterpolator_mux_p13 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad13 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m13 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p13 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_a14 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b14 = 18'd0;
reg signed [17:0] pulsegen_superinterpolator_b_reg14 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_c14 = 36'd0;
reg signed [17:0] pulsegen_superinterpolator_d14 = 18'd0;
reg pulsegen_superinterpolator_mux_p14 = 1'd0;
reg signed [17:0] pulsegen_superinterpolator_ad14 = 18'd0;
reg signed [35:0] pulsegen_superinterpolator_m14 = 36'd0;
reg signed [35:0] pulsegen_superinterpolator_p14 = 36'd0;
wire [15:0] inp;
reg out = 1'd0;
reg [16:0] accu = 17'd0;
reg clockdomainsrenamer_liteethmac_liteethmacgap_state = 1'd0;
reg clockdomainsrenamer_liteethmac_liteethmacgap_next_state = 1'd0;
reg [3:0] main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value = 4'd0;
reg main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce = 1'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_next_state = 2'd0;
reg [2:0] main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value = 3'd0;
reg main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce = 1'd0;
reg clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_state = 1'd0;
reg clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_next_state = 1'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_next_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmaccrc32checker_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmaccrc32checker_next_state = 2'd0;
reg clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_state = 1'd0;
reg clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_next_state = 1'd0;
reg [15:0] main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value = 16'd0;
reg main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce = 1'd0;
reg [1:0] clockdomainsrenamer_liteethmac_request = 2'd0;
reg clockdomainsrenamer_liteethmac_grant = 1'd0;
reg clockdomainsrenamer_liteethmac_status0_first = 1'd1;
reg clockdomainsrenamer_liteethmac_status0_last = 1'd0;
wire clockdomainsrenamer_liteethmac_status0_ongoing0;
reg clockdomainsrenamer_liteethmac_status0_ongoing1 = 1'd0;
reg clockdomainsrenamer_liteethmac_status1_first = 1'd1;
reg clockdomainsrenamer_liteethmac_status1_last = 1'd0;
wire clockdomainsrenamer_liteethmac_status1_ongoing0;
reg clockdomainsrenamer_liteethmac_status1_ongoing1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethmac_sel0 = 2'd0;
reg clockdomainsrenamer_liteethmac_first = 1'd1;
reg clockdomainsrenamer_liteethmac_last = 1'd0;
wire clockdomainsrenamer_liteethmac_ongoing0;
reg clockdomainsrenamer_liteethmac_ongoing1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethmac_sel1 = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_sel_ongoing = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmacpacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state = 2'd0;
reg [3:0] main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value0 = 4'd0;
reg main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value_ce0 = 1'd0;
reg main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 = 1'd0;
reg main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmacdepacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state = 2'd0;
reg [3:0] main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value0 = 4'd0;
reg main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 = 1'd0;
reg main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 = 1'd0;
reg main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteetharptx_liteetharppacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state = 2'd0;
reg [4:0] main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 = 5'd0;
reg main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 = 1'd0;
reg main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 = 1'd0;
reg main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 = 1'd0;
reg clockdomainsrenamer_liteetharptx_fsm_state = 1'd0;
reg clockdomainsrenamer_liteetharptx_fsm_next_state = 1'd0;
reg [5:0] main_ethcore_arp_tx_counter_liteetharp_fsm_next_value = 6'd0;
reg main_ethcore_arp_tx_counter_liteetharp_fsm_next_value_ce = 1'd0;
reg [1:0] clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state = 2'd0;
reg [4:0] main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value0 = 5'd0;
reg main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value_ce0 = 1'd0;
reg main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 = 1'd0;
reg main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteetharprx_fsm_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteetharprx_fsm_next_state = 2'd0;
reg [2:0] clockdomainsrenamer_state = 3'd0;
reg [2:0] clockdomainsrenamer_next_state = 3'd0;
reg [1:0] clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state = 2'd0;
reg [4:0] main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 = 5'd0;
reg main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 = 1'd0;
reg main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 = 1'd0;
reg main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 = 1'd0;
reg [2:0] clockdomainsrenamer_liteethip_liteethiptx_fsm_state = 3'd0;
reg [2:0] clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state = 3'd0;
reg [47:0] main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value = 48'd0;
reg main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value_ce = 1'd0;
reg [1:0] clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state = 2'd0;
reg [4:0] main_ethcore_ip_rx_depacketizer_count_liteethip_next_value0 = 5'd0;
reg main_ethcore_ip_rx_depacketizer_count_liteethip_next_value_ce0 = 1'd0;
reg main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 = 1'd0;
reg main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethip_liteethiprx_fsm_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethip_request = 2'd0;
reg clockdomainsrenamer_liteethip_grant = 1'd0;
reg clockdomainsrenamer_liteethip_status0_first = 1'd1;
reg clockdomainsrenamer_liteethip_status0_last = 1'd0;
wire clockdomainsrenamer_liteethip_status0_ongoing0;
reg clockdomainsrenamer_liteethip_status0_ongoing1 = 1'd0;
reg clockdomainsrenamer_liteethip_status1_first = 1'd1;
reg clockdomainsrenamer_liteethip_status1_last = 1'd0;
wire clockdomainsrenamer_liteethip_status1_ongoing0;
reg clockdomainsrenamer_liteethip_status1_ongoing1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethip_sel0 = 2'd0;
reg clockdomainsrenamer_liteethip_first = 1'd1;
reg clockdomainsrenamer_liteethip_last = 1'd0;
wire clockdomainsrenamer_liteethip_ongoing0;
reg clockdomainsrenamer_liteethip_ongoing1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethip_sel1 = 2'd0;
reg [1:0] clockdomainsrenamer_liteethip_sel_ongoing = 2'd0;
reg [1:0] clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state = 2'd0;
reg [2:0] main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value0 = 3'd0;
reg main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 = 1'd0;
reg main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 = 1'd0;
reg main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 = 1'd0;
reg clockdomainsrenamer_liteethicmptx_fsm_state = 1'd0;
reg clockdomainsrenamer_liteethicmptx_fsm_next_state = 1'd0;
reg [1:0] clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state = 2'd0;
reg [2:0] main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value0 = 3'd0;
reg main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 = 1'd0;
reg main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethicmprx_fsm_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethicmprx_fsm_next_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state = 2'd0;
reg [2:0] main_ethcore_tx_packetizer_count_liteethudptx_next_value0 = 3'd0;
reg main_ethcore_tx_packetizer_count_liteethudptx_next_value_ce0 = 1'd0;
reg main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value1 = 1'd0;
reg main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 = 1'd0;
reg clockdomainsrenamer_liteethudp_liteethudptx_fsm_state = 1'd0;
reg clockdomainsrenamer_liteethudp_liteethudptx_fsm_next_state = 1'd0;
reg [1:0] clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state = 2'd0;
reg [2:0] main_ethcore_rx_depacketizer_count_liteethudprx_next_value0 = 3'd0;
reg main_ethcore_rx_depacketizer_count_liteethudprx_next_value_ce0 = 1'd0;
reg main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 = 1'd0;
reg main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 = 1'd0;
reg [1:0] clockdomainsrenamer_liteethudp_liteethudprx_fsm_state = 2'd0;
reg [1:0] clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state = 2'd0;
reg clockdomainsrenamer_liteethudp_sel = 1'd0;
reg [1:0] liteethetherbonepackettx_liteethetherbonepacketpacketizer_state = 2'd0;
reg [1:0] liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state = 2'd0;
reg main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value0 = 1'd0;
reg main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value_ce0 = 1'd0;
reg main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value1 = 1'd0;
reg main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value_ce1 = 1'd0;
reg liteethetherbonepackettx_fsm_state = 1'd0;
reg liteethetherbonepackettx_fsm_next_state = 1'd0;
reg [1:0] liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_state = 2'd0;
reg [1:0] liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state = 2'd0;
reg main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value0 = 1'd0;
reg main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value_ce0 = 1'd0;
reg main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value1 = 1'd0;
reg main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value_ce1 = 1'd0;
reg [1:0] liteethetherbonepacketrx_fsm_state = 2'd0;
reg [1:0] liteethetherbonepacketrx_fsm_next_state = 2'd0;
reg liteethetherboneprobe_state = 1'd0;
reg liteethetherboneprobe_next_state = 1'd0;
reg [1:0] liteethetherbonerecorddepacketizer_state = 2'd0;
reg [1:0] liteethetherbonerecorddepacketizer_next_state = 2'd0;
reg main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value0 = 1'd0;
reg main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value_ce0 = 1'd0;
reg main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value1 = 1'd0;
reg main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value_ce1 = 1'd0;
reg [1:0] liteethetherbonerecordreceiver_state = 2'd0;
reg [1:0] liteethetherbonerecordreceiver_next_state = 2'd0;
reg [1:0] liteethetherbonerecordsender_state = 2'd0;
reg [1:0] liteethetherbonerecordsender_next_state = 2'd0;
reg [1:0] liteethetherbonerecordpacketizer_state = 2'd0;
reg [1:0] liteethetherbonerecordpacketizer_next_state = 2'd0;
reg main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value0 = 1'd0;
reg main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value_ce0 = 1'd0;
reg main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value1 = 1'd0;
reg main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value_ce1 = 1'd0;
reg [1:0] liteethetherbonewishbonemaster_state = 2'd0;
reg [1:0] liteethetherbonewishbonemaster_next_state = 2'd0;
reg [1:0] ecp5spiflash_state = 2'd0;
reg [1:0] ecp5spiflash_next_state = 2'd0;
reg [5:0] spiflash_count_next_value = 6'd0;
reg spiflash_count_next_value_ce = 1'd0;
reg [13:0] main_adr = 14'd0;
reg main_we = 1'd0;
reg [7:0] main_dat_w = 8'd0;
wire [7:0] main_dat_r;
wire [29:0] main_wishbone_adr;
wire [31:0] main_wishbone_dat_w;
reg [31:0] main_wishbone_dat_r = 32'd0;
wire [3:0] main_wishbone_sel;
wire main_wishbone_cyc;
wire main_wishbone_stb;
reg main_wishbone_ack = 1'd0;
wire main_wishbone_we;
wire [2:0] main_wishbone_cti;
wire [1:0] main_wishbone_bte;
reg main_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire request;
wire grant;
reg [1:0] slave_sel = 2'd0;
reg [1:0] slave_sel_r = 2'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [7:0] interface0_bank_bus_dat_w;
reg [7:0] interface0_bank_bus_dat_r = 8'd0;
wire csrbank0_reset0_re;
wire csrbank0_reset0_r;
wire csrbank0_reset0_we;
wire csrbank0_reset0_w;
wire csrbank0_scratch3_re;
wire [7:0] csrbank0_scratch3_r;
wire csrbank0_scratch3_we;
wire [7:0] csrbank0_scratch3_w;
wire csrbank0_scratch2_re;
wire [7:0] csrbank0_scratch2_r;
wire csrbank0_scratch2_we;
wire [7:0] csrbank0_scratch2_w;
wire csrbank0_scratch1_re;
wire [7:0] csrbank0_scratch1_r;
wire csrbank0_scratch1_we;
wire [7:0] csrbank0_scratch1_w;
wire csrbank0_scratch0_re;
wire [7:0] csrbank0_scratch0_r;
wire csrbank0_scratch0_we;
wire [7:0] csrbank0_scratch0_w;
wire csrbank0_bus_errors3_re;
wire [7:0] csrbank0_bus_errors3_r;
wire csrbank0_bus_errors3_we;
wire [7:0] csrbank0_bus_errors3_w;
wire csrbank0_bus_errors2_re;
wire [7:0] csrbank0_bus_errors2_r;
wire csrbank0_bus_errors2_we;
wire [7:0] csrbank0_bus_errors2_w;
wire csrbank0_bus_errors1_re;
wire [7:0] csrbank0_bus_errors1_r;
wire csrbank0_bus_errors1_we;
wire [7:0] csrbank0_bus_errors1_w;
wire csrbank0_bus_errors0_re;
wire [7:0] csrbank0_bus_errors0_r;
wire csrbank0_bus_errors0_we;
wire [7:0] csrbank0_bus_errors0_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [7:0] interface1_bank_bus_dat_w;
reg [7:0] interface1_bank_bus_dat_r = 8'd0;
wire csrbank1_crg_reset0_re;
wire csrbank1_crg_reset0_r;
wire csrbank1_crg_reset0_we;
wire csrbank1_crg_reset0_w;
wire csrbank1_rx_inband_status_re;
wire [2:0] csrbank1_rx_inband_status_r;
wire csrbank1_rx_inband_status_we;
wire [2:0] csrbank1_rx_inband_status_w;
wire csrbank1_mdio_w0_re;
wire [2:0] csrbank1_mdio_w0_r;
wire csrbank1_mdio_w0_we;
wire [2:0] csrbank1_mdio_w0_w;
wire csrbank1_mdio_r_re;
wire csrbank1_mdio_r_r;
wire csrbank1_mdio_r_we;
wire csrbank1_mdio_r_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [7:0] interface2_bank_bus_dat_w;
reg [7:0] interface2_bank_bus_dat_r = 8'd0;
wire csrbank2_go0_re;
wire csrbank2_go0_r;
wire csrbank2_go0_we;
wire csrbank2_go0_w;
wire csrbank2_r3_re;
wire [7:0] csrbank2_r3_r;
wire csrbank2_r3_we;
wire [7:0] csrbank2_r3_w;
wire csrbank2_r2_re;
wire [7:0] csrbank2_r2_r;
wire csrbank2_r2_we;
wire [7:0] csrbank2_r2_w;
wire csrbank2_r1_re;
wire [7:0] csrbank2_r1_r;
wire csrbank2_r1_we;
wire [7:0] csrbank2_r1_w;
wire csrbank2_r0_re;
wire [7:0] csrbank2_r0_r;
wire csrbank2_r0_we;
wire [7:0] csrbank2_r0_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [7:0] interface3_bank_bus_dat_w;
reg [7:0] interface3_bank_bus_dat_r = 8'd0;
wire csrbank3_spi_control1_re;
wire [7:0] csrbank3_spi_control1_r;
wire csrbank3_spi_control1_we;
wire [7:0] csrbank3_spi_control1_w;
wire csrbank3_spi_control0_re;
wire [7:0] csrbank3_spi_control0_r;
wire csrbank3_spi_control0_we;
wire [7:0] csrbank3_spi_control0_w;
wire csrbank3_spi_status_re;
wire csrbank3_spi_status_r;
wire csrbank3_spi_status_we;
wire csrbank3_spi_status_w;
wire csrbank3_spi_mosi4_re;
wire [7:0] csrbank3_spi_mosi4_r;
wire csrbank3_spi_mosi4_we;
wire [7:0] csrbank3_spi_mosi4_w;
wire csrbank3_spi_mosi3_re;
wire [7:0] csrbank3_spi_mosi3_r;
wire csrbank3_spi_mosi3_we;
wire [7:0] csrbank3_spi_mosi3_w;
wire csrbank3_spi_mosi2_re;
wire [7:0] csrbank3_spi_mosi2_r;
wire csrbank3_spi_mosi2_we;
wire [7:0] csrbank3_spi_mosi2_w;
wire csrbank3_spi_mosi1_re;
wire [7:0] csrbank3_spi_mosi1_r;
wire csrbank3_spi_mosi1_we;
wire [7:0] csrbank3_spi_mosi1_w;
wire csrbank3_spi_mosi0_re;
wire [7:0] csrbank3_spi_mosi0_r;
wire csrbank3_spi_mosi0_we;
wire [7:0] csrbank3_spi_mosi0_w;
wire csrbank3_spi_miso4_re;
wire [7:0] csrbank3_spi_miso4_r;
wire csrbank3_spi_miso4_we;
wire [7:0] csrbank3_spi_miso4_w;
wire csrbank3_spi_miso3_re;
wire [7:0] csrbank3_spi_miso3_r;
wire csrbank3_spi_miso3_we;
wire [7:0] csrbank3_spi_miso3_w;
wire csrbank3_spi_miso2_re;
wire [7:0] csrbank3_spi_miso2_r;
wire csrbank3_spi_miso2_we;
wire [7:0] csrbank3_spi_miso2_w;
wire csrbank3_spi_miso1_re;
wire [7:0] csrbank3_spi_miso1_r;
wire csrbank3_spi_miso1_we;
wire [7:0] csrbank3_spi_miso1_w;
wire csrbank3_spi_miso0_re;
wire [7:0] csrbank3_spi_miso0_r;
wire csrbank3_spi_miso0_we;
wire [7:0] csrbank3_spi_miso0_w;
wire csrbank3_spi_cs0_re;
wire csrbank3_spi_cs0_r;
wire csrbank3_spi_cs0_we;
wire csrbank3_spi_cs0_w;
wire csrbank3_spi_loopback0_re;
wire csrbank3_spi_loopback0_r;
wire csrbank3_spi_loopback0_we;
wire csrbank3_spi_loopback0_w;
wire csrbank3_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [7:0] csr_interconnect_dat_w;
wire [7:0] csr_interconnect_dat_r;
reg state = 1'd0;
reg next_state = 1'd0;
wire [15:0] slice_proxy0;
wire [15:0] slice_proxy1;
wire [47:0] slice_proxy2;
wire [47:0] slice_proxy3;
wire [47:0] slice_proxy4;
wire [47:0] slice_proxy5;
wire [47:0] slice_proxy6;
wire [47:0] slice_proxy7;
wire [47:0] slice_proxy8;
wire [47:0] slice_proxy9;
wire [47:0] slice_proxy10;
wire [47:0] slice_proxy11;
wire [47:0] slice_proxy12;
wire [47:0] slice_proxy13;
wire [7:0] slice_proxy14;
wire [15:0] slice_proxy15;
wire [15:0] slice_proxy16;
wire [15:0] slice_proxy17;
wire [15:0] slice_proxy18;
wire [15:0] slice_proxy19;
wire [15:0] slice_proxy20;
wire [7:0] slice_proxy21;
wire [31:0] slice_proxy22;
wire [31:0] slice_proxy23;
wire [31:0] slice_proxy24;
wire [31:0] slice_proxy25;
wire [47:0] slice_proxy26;
wire [47:0] slice_proxy27;
wire [47:0] slice_proxy28;
wire [47:0] slice_proxy29;
wire [47:0] slice_proxy30;
wire [47:0] slice_proxy31;
wire [31:0] slice_proxy32;
wire [31:0] slice_proxy33;
wire [31:0] slice_proxy34;
wire [31:0] slice_proxy35;
wire [47:0] slice_proxy36;
wire [47:0] slice_proxy37;
wire [47:0] slice_proxy38;
wire [47:0] slice_proxy39;
wire [47:0] slice_proxy40;
wire [47:0] slice_proxy41;
wire [15:0] slice_proxy42;
wire [15:0] slice_proxy43;
wire [15:0] slice_proxy44;
wire [15:0] slice_proxy45;
wire [3:0] slice_proxy46;
wire [7:0] slice_proxy47;
wire [31:0] slice_proxy48;
wire [31:0] slice_proxy49;
wire [31:0] slice_proxy50;
wire [31:0] slice_proxy51;
wire [31:0] slice_proxy52;
wire [31:0] slice_proxy53;
wire [31:0] slice_proxy54;
wire [31:0] slice_proxy55;
wire [15:0] slice_proxy56;
wire [15:0] slice_proxy57;
wire [7:0] slice_proxy58;
wire [3:0] slice_proxy59;
wire [15:0] slice_proxy60;
wire [15:0] slice_proxy61;
wire [7:0] slice_proxy62;
wire [7:0] slice_proxy63;
wire [31:0] slice_proxy64;
wire [31:0] slice_proxy65;
wire [31:0] slice_proxy66;
wire [31:0] slice_proxy67;
wire [15:0] slice_proxy68;
wire [15:0] slice_proxy69;
wire [15:0] slice_proxy70;
wire [15:0] slice_proxy71;
wire [15:0] slice_proxy72;
wire [15:0] slice_proxy73;
wire [15:0] slice_proxy74;
wire [15:0] slice_proxy75;
wire [3:0] slice_proxy76;
wire [15:0] slice_proxy77;
wire [15:0] slice_proxy78;
wire slice_proxy79;
wire slice_proxy80;
wire [3:0] slice_proxy81;
wire slice_proxy82;
wire [3:0] slice_proxy83;
wire slice_proxy84;
wire [7:0] slice_proxy85;
wire slice_proxy86;
wire slice_proxy87;
wire [7:0] slice_proxy88;
wire slice_proxy89;
wire slice_proxy90;
wire [7:0] slice_proxy91;
wire slice_proxy92;
reg comb_array_muxed0 = 1'd0;
reg comb_array_muxed1 = 1'd0;
reg comb_array_muxed2 = 1'd0;
reg [29:0] comb_array_muxed3 = 30'd0;
reg [31:0] comb_array_muxed4 = 32'd0;
reg [3:0] comb_array_muxed5 = 4'd0;
reg comb_array_muxed6 = 1'd0;
reg comb_array_muxed7 = 1'd0;
reg comb_array_muxed8 = 1'd0;
reg [2:0] comb_array_muxed9 = 3'd0;
reg [1:0] comb_array_muxed10 = 2'd0;
reg sync_array_muxed = 1'd0;
wire rst10;
wire rst11;
wire rst12;
reg multiregimpl0_regs0 = 1'd0;
reg multiregimpl0_regs1 = 1'd0;
reg multiregimpl1_regs0 = 1'd0;
reg multiregimpl1_regs1 = 1'd0;
reg multiregimpl2_regs0 = 1'd0;
reg multiregimpl2_regs1 = 1'd0;
reg [6:0] multiregimpl3_regs0 = 7'd0;
reg [6:0] multiregimpl3_regs1 = 7'd0;
reg [6:0] multiregimpl4_regs0 = 7'd0;
reg [6:0] multiregimpl4_regs1 = 7'd0;
reg [6:0] multiregimpl5_regs0 = 7'd0;
reg [6:0] multiregimpl5_regs1 = 7'd0;
reg [6:0] multiregimpl6_regs0 = 7'd0;
reg [6:0] multiregimpl6_regs1 = 7'd0;
reg [2:0] multiregimpl7_regs0 = 3'd0;
reg [2:0] multiregimpl7_regs1 = 3'd0;
reg [2:0] multiregimpl8_regs0 = 3'd0;
reg [2:0] multiregimpl8_regs1 = 3'd0;
reg [2:0] multiregimpl9_regs0 = 3'd0;
reg [2:0] multiregimpl9_regs1 = 3'd0;
reg [2:0] multiregimpl10_regs0 = 3'd0;
reg [2:0] multiregimpl10_regs1 = 3'd0;

assign etherbone_clk = sys_clk;
assign etherbone_rst = sys_rst;
always @(*) begin
	pulsegen_x_in_we <= 1'd0;
	if ((wb_adr[29:26] == 2'd2)) begin
		pulsegen_x_in_we <= wb_we;
	end
end
assign pulsegen_x_in = wb_dat_w;
assign pulsegen_x_in_adr = wb_adr;
assign wb_dat_r = pulsegen_x_out;
assign inp = pulsegen_out0;
assign gpio1 = out;
assign user_led_n = (~t[0]);
assign y = t[1];
assign r = pulsegen_x_out[0];
assign g = pulsegen_done;
assign main_bus_error = error;
assign main_reset = main_reset_re;
assign main_bus_errors_status = main_bus_errors;
assign crg_reset = (~user_btn_n0);
assign crg_clkin = clk25;
assign sys_clk = crg_clkout;
assign eth_tx_clk = eth_rx_clk;
assign eth_rx_clk = eth_clocks_rx;
assign ethphy_reset0 = (ethphy_reset_storage | ethphy_reset1);
assign eth_rst_n = (~ethphy_reset0);
assign ethphy_counter_done = (ethphy_counter == 9'd256);
assign ethphy_counter_ce = (~ethphy_counter_done);
assign ethphy_reset1 = (~ethphy_counter_done);
assign ethphy_sink_ready = 1'd1;
assign ethphy_liteethphyrgmiirx_last = ((~ethphy_liteethphyrgmiirx_rx_ctl_reg[0]) & ethphy_liteethphyrgmiirx_rx_ctl_reg_d[0]);
assign ethphy_liteethphyrgmiirx_source_last = ethphy_liteethphyrgmiirx_last;
assign eth_mdc = ethphy_mdio_storage[0];
assign ethphy_mdio_data_oe = ethphy_mdio_storage[1];
assign ethphy_mdio_data_w = ethphy_mdio_storage[2];
assign main_ethcore_mac_packetizer_sink_valid = main_ethcore_mac_crossbar_source_valid;
assign main_ethcore_mac_crossbar_source_ready = main_ethcore_mac_packetizer_sink_ready;
assign main_ethcore_mac_packetizer_sink_first = main_ethcore_mac_crossbar_source_first;
assign main_ethcore_mac_packetizer_sink_last = main_ethcore_mac_crossbar_source_last;
assign main_ethcore_mac_packetizer_sink_payload_ethernet_type = main_ethcore_mac_crossbar_source_payload_ethernet_type;
assign main_ethcore_mac_packetizer_sink_payload_sender_mac = main_ethcore_mac_crossbar_source_payload_sender_mac;
assign main_ethcore_mac_packetizer_sink_payload_target_mac = main_ethcore_mac_crossbar_source_payload_target_mac;
assign main_ethcore_mac_packetizer_sink_payload_data = main_ethcore_mac_crossbar_source_payload_data;
assign main_ethcore_mac_packetizer_sink_payload_last_be = main_ethcore_mac_crossbar_source_payload_last_be;
assign main_ethcore_mac_packetizer_sink_payload_error = main_ethcore_mac_crossbar_source_payload_error;
assign main_ethcore_mac_tx_cdc_sink_valid = main_ethcore_mac_packetizer_source_valid;
assign main_ethcore_mac_packetizer_source_ready = main_ethcore_mac_tx_cdc_sink_ready;
assign main_ethcore_mac_tx_cdc_sink_first = main_ethcore_mac_packetizer_source_first;
assign main_ethcore_mac_tx_cdc_sink_last = main_ethcore_mac_packetizer_source_last;
assign main_ethcore_mac_tx_cdc_sink_payload_data = main_ethcore_mac_packetizer_source_payload_data;
assign main_ethcore_mac_tx_cdc_sink_payload_last_be = main_ethcore_mac_packetizer_source_payload_last_be;
assign main_ethcore_mac_tx_cdc_sink_payload_error = main_ethcore_mac_packetizer_source_payload_error;
assign main_ethcore_mac_depacketizer_sink_valid = main_ethcore_mac_rx_cdc_source_valid;
assign main_ethcore_mac_rx_cdc_source_ready = main_ethcore_mac_depacketizer_sink_ready;
assign main_ethcore_mac_depacketizer_sink_first = main_ethcore_mac_rx_cdc_source_first;
assign main_ethcore_mac_depacketizer_sink_last = main_ethcore_mac_rx_cdc_source_last;
assign main_ethcore_mac_depacketizer_sink_payload_data = main_ethcore_mac_rx_cdc_source_payload_data;
assign main_ethcore_mac_depacketizer_sink_payload_last_be = main_ethcore_mac_rx_cdc_source_payload_last_be;
assign main_ethcore_mac_depacketizer_sink_payload_error = main_ethcore_mac_rx_cdc_source_payload_error;
assign main_ethcore_mac_crossbar_sink_valid = main_ethcore_mac_depacketizer_source_valid;
assign main_ethcore_mac_depacketizer_source_ready = main_ethcore_mac_crossbar_sink_ready;
assign main_ethcore_mac_crossbar_sink_first = main_ethcore_mac_depacketizer_source_first;
assign main_ethcore_mac_crossbar_sink_last = main_ethcore_mac_depacketizer_source_last;
assign main_ethcore_mac_crossbar_sink_payload_ethernet_type = main_ethcore_mac_depacketizer_source_payload_ethernet_type;
assign main_ethcore_mac_crossbar_sink_payload_sender_mac = main_ethcore_mac_depacketizer_source_payload_sender_mac;
assign main_ethcore_mac_crossbar_sink_payload_target_mac = main_ethcore_mac_depacketizer_source_payload_target_mac;
assign main_ethcore_mac_crossbar_sink_payload_data = main_ethcore_mac_depacketizer_source_payload_data;
assign main_ethcore_mac_crossbar_sink_payload_last_be = main_ethcore_mac_depacketizer_source_payload_last_be;
assign main_ethcore_mac_crossbar_sink_payload_error = main_ethcore_mac_depacketizer_source_payload_error;
assign main_ethcore_mac_ps_preamble_error_i = main_ethcore_mac_preamble_checker_error;
assign main_ethcore_mac_ps_crc_error_i = main_ethcore_mac_crc32_checker_error;
always @(*) begin
	main_ethcore_mac_tx_gap_inserter_sink_ready <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacgap_next_state <= 1'd0;
	main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value <= 4'd0;
	main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce <= 1'd0;
	main_ethcore_mac_tx_gap_inserter_source_valid <= 1'd0;
	main_ethcore_mac_tx_gap_inserter_source_first <= 1'd0;
	main_ethcore_mac_tx_gap_inserter_source_last <= 1'd0;
	main_ethcore_mac_tx_gap_inserter_source_payload_data <= 8'd0;
	main_ethcore_mac_tx_gap_inserter_source_payload_last_be <= 1'd0;
	main_ethcore_mac_tx_gap_inserter_source_payload_error <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacgap_next_state <= clockdomainsrenamer_liteethmac_liteethmacgap_state;
	case (clockdomainsrenamer_liteethmac_liteethmacgap_state)
		1'd1: begin
			main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value <= (main_ethcore_mac_tx_gap_inserter_counter + 1'd1);
			main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce <= 1'd1;
			if ((main_ethcore_mac_tx_gap_inserter_counter == 4'd11)) begin
				clockdomainsrenamer_liteethmac_liteethmacgap_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value <= 1'd0;
			main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce <= 1'd1;
			main_ethcore_mac_tx_gap_inserter_source_valid <= main_ethcore_mac_tx_gap_inserter_sink_valid;
			main_ethcore_mac_tx_gap_inserter_sink_ready <= main_ethcore_mac_tx_gap_inserter_source_ready;
			main_ethcore_mac_tx_gap_inserter_source_first <= main_ethcore_mac_tx_gap_inserter_sink_first;
			main_ethcore_mac_tx_gap_inserter_source_last <= main_ethcore_mac_tx_gap_inserter_sink_last;
			main_ethcore_mac_tx_gap_inserter_source_payload_data <= main_ethcore_mac_tx_gap_inserter_sink_payload_data;
			main_ethcore_mac_tx_gap_inserter_source_payload_last_be <= main_ethcore_mac_tx_gap_inserter_sink_payload_last_be;
			main_ethcore_mac_tx_gap_inserter_source_payload_error <= main_ethcore_mac_tx_gap_inserter_sink_payload_error;
			if (((main_ethcore_mac_tx_gap_inserter_sink_valid & main_ethcore_mac_tx_gap_inserter_sink_last) & main_ethcore_mac_tx_gap_inserter_sink_ready)) begin
				clockdomainsrenamer_liteethmac_liteethmacgap_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_mac_preamble_inserter_source_payload_last_be = main_ethcore_mac_preamble_inserter_sink_payload_last_be;
always @(*) begin
	main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce <= 1'd0;
	main_ethcore_mac_preamble_inserter_source_first <= 1'd0;
	main_ethcore_mac_preamble_inserter_source_last <= 1'd0;
	main_ethcore_mac_preamble_inserter_source_payload_data <= 8'd0;
	main_ethcore_mac_preamble_inserter_source_payload_error <= 1'd0;
	main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value <= 3'd0;
	main_ethcore_mac_preamble_inserter_sink_ready <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_next_state <= 2'd0;
	main_ethcore_mac_preamble_inserter_source_valid <= 1'd0;
	main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_sink_payload_data;
	clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_next_state <= clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_state;
	case (clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_state)
		1'd1: begin
			main_ethcore_mac_preamble_inserter_source_valid <= 1'd1;
			case (main_ethcore_mac_preamble_inserter_count)
				1'd0: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[7:0];
				end
				1'd1: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[15:8];
				end
				2'd2: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[23:16];
				end
				2'd3: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[31:24];
				end
				3'd4: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[39:32];
				end
				3'd5: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[47:40];
				end
				3'd6: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[55:48];
				end
				default: begin
					main_ethcore_mac_preamble_inserter_source_payload_data <= main_ethcore_mac_preamble_inserter_preamble[63:56];
				end
			endcase
			if (main_ethcore_mac_preamble_inserter_source_ready) begin
				if ((main_ethcore_mac_preamble_inserter_count == 3'd7)) begin
					clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_next_state <= 2'd2;
				end else begin
					main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value <= (main_ethcore_mac_preamble_inserter_count + 1'd1);
					main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_ethcore_mac_preamble_inserter_source_valid <= main_ethcore_mac_preamble_inserter_sink_valid;
			main_ethcore_mac_preamble_inserter_sink_ready <= main_ethcore_mac_preamble_inserter_source_ready;
			main_ethcore_mac_preamble_inserter_source_first <= main_ethcore_mac_preamble_inserter_sink_first;
			main_ethcore_mac_preamble_inserter_source_last <= main_ethcore_mac_preamble_inserter_sink_last;
			main_ethcore_mac_preamble_inserter_source_payload_error <= main_ethcore_mac_preamble_inserter_sink_payload_error;
			if (((main_ethcore_mac_preamble_inserter_sink_valid & main_ethcore_mac_preamble_inserter_sink_last) & main_ethcore_mac_preamble_inserter_source_ready)) begin
				clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_mac_preamble_inserter_sink_ready <= 1'd1;
			main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value <= 1'd0;
			main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce <= 1'd1;
			if (main_ethcore_mac_preamble_inserter_sink_valid) begin
				main_ethcore_mac_preamble_inserter_sink_ready <= 1'd0;
				clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_mac_preamble_checker_source_payload_data = main_ethcore_mac_preamble_checker_sink_payload_data;
assign main_ethcore_mac_preamble_checker_source_payload_last_be = main_ethcore_mac_preamble_checker_sink_payload_last_be;
always @(*) begin
	main_ethcore_mac_preamble_checker_source_payload_error <= 1'd0;
	main_ethcore_mac_preamble_checker_error <= 1'd0;
	main_ethcore_mac_preamble_checker_source_valid <= 1'd0;
	main_ethcore_mac_preamble_checker_source_first <= 1'd0;
	main_ethcore_mac_preamble_checker_sink_ready <= 1'd0;
	main_ethcore_mac_preamble_checker_source_last <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_next_state <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_next_state <= clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_state;
	case (clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_state)
		1'd1: begin
			main_ethcore_mac_preamble_checker_source_valid <= main_ethcore_mac_preamble_checker_sink_valid;
			main_ethcore_mac_preamble_checker_sink_ready <= main_ethcore_mac_preamble_checker_source_ready;
			main_ethcore_mac_preamble_checker_source_first <= main_ethcore_mac_preamble_checker_sink_first;
			main_ethcore_mac_preamble_checker_source_last <= main_ethcore_mac_preamble_checker_sink_last;
			main_ethcore_mac_preamble_checker_source_payload_error <= main_ethcore_mac_preamble_checker_sink_payload_error;
			if (((main_ethcore_mac_preamble_checker_source_valid & main_ethcore_mac_preamble_checker_source_last) & main_ethcore_mac_preamble_checker_source_ready)) begin
				clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_mac_preamble_checker_sink_ready <= 1'd1;
			if (((main_ethcore_mac_preamble_checker_sink_valid & (~main_ethcore_mac_preamble_checker_sink_last)) & (main_ethcore_mac_preamble_checker_sink_payload_data == 8'd213))) begin
				clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_next_state <= 1'd1;
			end
			if ((main_ethcore_mac_preamble_checker_sink_valid & main_ethcore_mac_preamble_checker_sink_last)) begin
				main_ethcore_mac_preamble_checker_error <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_mac_crc32_inserter_cnt_done = (main_ethcore_mac_crc32_inserter_cnt == 1'd0);
assign main_ethcore_mac_crc32_inserter_data1 = main_ethcore_mac_crc32_inserter_data0;
assign main_ethcore_mac_crc32_inserter_last = main_ethcore_mac_crc32_inserter_reg;
assign main_ethcore_mac_crc32_inserter_value = (~{main_ethcore_mac_crc32_inserter_reg[0], main_ethcore_mac_crc32_inserter_reg[1], main_ethcore_mac_crc32_inserter_reg[2], main_ethcore_mac_crc32_inserter_reg[3], main_ethcore_mac_crc32_inserter_reg[4], main_ethcore_mac_crc32_inserter_reg[5], main_ethcore_mac_crc32_inserter_reg[6], main_ethcore_mac_crc32_inserter_reg[7], main_ethcore_mac_crc32_inserter_reg[8], main_ethcore_mac_crc32_inserter_reg[9], main_ethcore_mac_crc32_inserter_reg[10], main_ethcore_mac_crc32_inserter_reg[11], main_ethcore_mac_crc32_inserter_reg[12], main_ethcore_mac_crc32_inserter_reg[13], main_ethcore_mac_crc32_inserter_reg[14], main_ethcore_mac_crc32_inserter_reg[15], main_ethcore_mac_crc32_inserter_reg[16], main_ethcore_mac_crc32_inserter_reg[17], main_ethcore_mac_crc32_inserter_reg[18], main_ethcore_mac_crc32_inserter_reg[19], main_ethcore_mac_crc32_inserter_reg[20], main_ethcore_mac_crc32_inserter_reg[21], main_ethcore_mac_crc32_inserter_reg[22], main_ethcore_mac_crc32_inserter_reg[23], main_ethcore_mac_crc32_inserter_reg[24], main_ethcore_mac_crc32_inserter_reg[25], main_ethcore_mac_crc32_inserter_reg[26], main_ethcore_mac_crc32_inserter_reg[27], main_ethcore_mac_crc32_inserter_reg[28], main_ethcore_mac_crc32_inserter_reg[29], main_ethcore_mac_crc32_inserter_reg[30], main_ethcore_mac_crc32_inserter_reg[31]});
assign main_ethcore_mac_crc32_inserter_error = (main_ethcore_mac_crc32_inserter_next != 32'd3338984827);
always @(*) begin
	main_ethcore_mac_crc32_inserter_next <= 32'd0;
	main_ethcore_mac_crc32_inserter_next[0] <= (((main_ethcore_mac_crc32_inserter_last[24] ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[1] <= (((((((main_ethcore_mac_crc32_inserter_last[25] ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[2] <= (((((((((main_ethcore_mac_crc32_inserter_last[26] ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[3] <= (((((((main_ethcore_mac_crc32_inserter_last[27] ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]);
	main_ethcore_mac_crc32_inserter_next[4] <= (((((((((main_ethcore_mac_crc32_inserter_last[28] ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[5] <= (((((((((((((main_ethcore_mac_crc32_inserter_last[29] ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[6] <= (((((((((((main_ethcore_mac_crc32_inserter_last[30] ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]);
	main_ethcore_mac_crc32_inserter_next[7] <= (((((((((main_ethcore_mac_crc32_inserter_last[31] ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[8] <= ((((((((main_ethcore_mac_crc32_inserter_last[0] ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_data1[6]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[9] <= ((((((((main_ethcore_mac_crc32_inserter_last[1] ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_data1[6]);
	main_ethcore_mac_crc32_inserter_next[10] <= ((((((((main_ethcore_mac_crc32_inserter_last[2] ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[11] <= ((((((((main_ethcore_mac_crc32_inserter_last[3] ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_data1[6]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[12] <= ((((((((((((main_ethcore_mac_crc32_inserter_last[4] ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_data1[6]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[13] <= ((((((((((((main_ethcore_mac_crc32_inserter_last[5] ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]);
	main_ethcore_mac_crc32_inserter_next[14] <= ((((((((((main_ethcore_mac_crc32_inserter_last[6] ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]);
	main_ethcore_mac_crc32_inserter_next[15] <= ((((((((main_ethcore_mac_crc32_inserter_last[7] ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]);
	main_ethcore_mac_crc32_inserter_next[16] <= ((((((main_ethcore_mac_crc32_inserter_last[8] ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[17] <= ((((((main_ethcore_mac_crc32_inserter_last[9] ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_data1[6]);
	main_ethcore_mac_crc32_inserter_next[18] <= ((((((main_ethcore_mac_crc32_inserter_last[10] ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]);
	main_ethcore_mac_crc32_inserter_next[19] <= ((((main_ethcore_mac_crc32_inserter_last[11] ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]);
	main_ethcore_mac_crc32_inserter_next[20] <= ((main_ethcore_mac_crc32_inserter_last[12] ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]);
	main_ethcore_mac_crc32_inserter_next[21] <= ((main_ethcore_mac_crc32_inserter_last[13] ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]);
	main_ethcore_mac_crc32_inserter_next[22] <= ((main_ethcore_mac_crc32_inserter_last[14] ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[23] <= ((((((main_ethcore_mac_crc32_inserter_last[15] ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_data1[6]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[24] <= ((((((main_ethcore_mac_crc32_inserter_last[16] ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]);
	main_ethcore_mac_crc32_inserter_next[25] <= ((((main_ethcore_mac_crc32_inserter_last[17] ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]);
	main_ethcore_mac_crc32_inserter_next[26] <= ((((((((main_ethcore_mac_crc32_inserter_last[18] ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]) ^ main_ethcore_mac_crc32_inserter_last[24]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_data1[7]);
	main_ethcore_mac_crc32_inserter_next[27] <= ((((((((main_ethcore_mac_crc32_inserter_last[19] ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]) ^ main_ethcore_mac_crc32_inserter_last[25]) ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_data1[6]);
	main_ethcore_mac_crc32_inserter_next[28] <= ((((((main_ethcore_mac_crc32_inserter_last[20] ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]) ^ main_ethcore_mac_crc32_inserter_last[26]) ^ main_ethcore_mac_crc32_inserter_data1[5]);
	main_ethcore_mac_crc32_inserter_next[29] <= ((((((main_ethcore_mac_crc32_inserter_last[21] ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_last[30]) ^ main_ethcore_mac_crc32_inserter_data1[1]) ^ main_ethcore_mac_crc32_inserter_last[27]) ^ main_ethcore_mac_crc32_inserter_data1[4]);
	main_ethcore_mac_crc32_inserter_next[30] <= ((((main_ethcore_mac_crc32_inserter_last[22] ^ main_ethcore_mac_crc32_inserter_last[31]) ^ main_ethcore_mac_crc32_inserter_data1[0]) ^ main_ethcore_mac_crc32_inserter_last[28]) ^ main_ethcore_mac_crc32_inserter_data1[3]);
	main_ethcore_mac_crc32_inserter_next[31] <= ((main_ethcore_mac_crc32_inserter_last[23] ^ main_ethcore_mac_crc32_inserter_last[29]) ^ main_ethcore_mac_crc32_inserter_data1[2]);
end
always @(*) begin
	main_ethcore_mac_crc32_inserter_source_valid <= 1'd0;
	main_ethcore_mac_crc32_inserter_source_first <= 1'd0;
	main_ethcore_mac_crc32_inserter_source_last <= 1'd0;
	main_ethcore_mac_crc32_inserter_source_payload_data <= 8'd0;
	main_ethcore_mac_crc32_inserter_source_payload_last_be <= 1'd0;
	main_ethcore_mac_crc32_inserter_source_payload_error <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_next_state <= 2'd0;
	main_ethcore_mac_crc32_inserter_data0 <= 8'd0;
	main_ethcore_mac_crc32_inserter_is_ongoing0 <= 1'd0;
	main_ethcore_mac_crc32_inserter_sink_ready <= 1'd0;
	main_ethcore_mac_crc32_inserter_is_ongoing1 <= 1'd0;
	main_ethcore_mac_crc32_inserter_ce <= 1'd0;
	main_ethcore_mac_crc32_inserter_reset <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_next_state <= clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_state;
	case (clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_state)
		1'd1: begin
			main_ethcore_mac_crc32_inserter_ce <= (main_ethcore_mac_crc32_inserter_sink_valid & main_ethcore_mac_crc32_inserter_source_ready);
			main_ethcore_mac_crc32_inserter_data0 <= main_ethcore_mac_crc32_inserter_sink_payload_data;
			main_ethcore_mac_crc32_inserter_source_valid <= main_ethcore_mac_crc32_inserter_sink_valid;
			main_ethcore_mac_crc32_inserter_sink_ready <= main_ethcore_mac_crc32_inserter_source_ready;
			main_ethcore_mac_crc32_inserter_source_first <= main_ethcore_mac_crc32_inserter_sink_first;
			main_ethcore_mac_crc32_inserter_source_last <= main_ethcore_mac_crc32_inserter_sink_last;
			main_ethcore_mac_crc32_inserter_source_payload_data <= main_ethcore_mac_crc32_inserter_sink_payload_data;
			main_ethcore_mac_crc32_inserter_source_payload_last_be <= main_ethcore_mac_crc32_inserter_sink_payload_last_be;
			main_ethcore_mac_crc32_inserter_source_payload_error <= main_ethcore_mac_crc32_inserter_sink_payload_error;
			main_ethcore_mac_crc32_inserter_source_last <= 1'd0;
			if (((main_ethcore_mac_crc32_inserter_sink_valid & main_ethcore_mac_crc32_inserter_sink_last) & main_ethcore_mac_crc32_inserter_source_ready)) begin
				clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_next_state <= 2'd2;
			end
		end
		2'd2: begin
			main_ethcore_mac_crc32_inserter_source_valid <= 1'd1;
			case (main_ethcore_mac_crc32_inserter_cnt)
				1'd0: begin
					main_ethcore_mac_crc32_inserter_source_payload_data <= main_ethcore_mac_crc32_inserter_value[31:24];
				end
				1'd1: begin
					main_ethcore_mac_crc32_inserter_source_payload_data <= main_ethcore_mac_crc32_inserter_value[23:16];
				end
				2'd2: begin
					main_ethcore_mac_crc32_inserter_source_payload_data <= main_ethcore_mac_crc32_inserter_value[15:8];
				end
				default: begin
					main_ethcore_mac_crc32_inserter_source_payload_data <= main_ethcore_mac_crc32_inserter_value[7:0];
				end
			endcase
			if (main_ethcore_mac_crc32_inserter_cnt_done) begin
				main_ethcore_mac_crc32_inserter_source_last <= 1'd1;
				if (main_ethcore_mac_crc32_inserter_source_ready) begin
					clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_next_state <= 1'd0;
				end
			end
			main_ethcore_mac_crc32_inserter_is_ongoing1 <= 1'd1;
		end
		default: begin
			main_ethcore_mac_crc32_inserter_reset <= 1'd1;
			main_ethcore_mac_crc32_inserter_sink_ready <= 1'd1;
			if (main_ethcore_mac_crc32_inserter_sink_valid) begin
				main_ethcore_mac_crc32_inserter_sink_ready <= 1'd0;
				clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_next_state <= 1'd1;
			end
			main_ethcore_mac_crc32_inserter_is_ongoing0 <= 1'd1;
		end
	endcase
end
assign main_ethcore_mac_crc32_checker_fifo_full = (main_ethcore_mac_crc32_checker_syncfifo_level == 3'd4);
assign main_ethcore_mac_crc32_checker_fifo_in = (main_ethcore_mac_crc32_checker_sink_sink_valid & ((~main_ethcore_mac_crc32_checker_fifo_full) | main_ethcore_mac_crc32_checker_fifo_out));
assign main_ethcore_mac_crc32_checker_fifo_out = (main_ethcore_mac_crc32_checker_source_source_valid & main_ethcore_mac_crc32_checker_source_source_ready);
assign main_ethcore_mac_crc32_checker_syncfifo_sink_first = main_ethcore_mac_crc32_checker_sink_sink_first;
assign main_ethcore_mac_crc32_checker_syncfifo_sink_last = main_ethcore_mac_crc32_checker_sink_sink_last;
assign main_ethcore_mac_crc32_checker_syncfifo_sink_payload_data = main_ethcore_mac_crc32_checker_sink_sink_payload_data;
assign main_ethcore_mac_crc32_checker_syncfifo_sink_payload_last_be = main_ethcore_mac_crc32_checker_sink_sink_payload_last_be;
assign main_ethcore_mac_crc32_checker_syncfifo_sink_payload_error = main_ethcore_mac_crc32_checker_sink_sink_payload_error;
always @(*) begin
	main_ethcore_mac_crc32_checker_syncfifo_sink_valid <= 1'd0;
	main_ethcore_mac_crc32_checker_syncfifo_sink_valid <= main_ethcore_mac_crc32_checker_sink_sink_valid;
	main_ethcore_mac_crc32_checker_syncfifo_sink_valid <= main_ethcore_mac_crc32_checker_fifo_in;
end
always @(*) begin
	main_ethcore_mac_crc32_checker_sink_sink_ready <= 1'd0;
	main_ethcore_mac_crc32_checker_sink_sink_ready <= main_ethcore_mac_crc32_checker_syncfifo_sink_ready;
	main_ethcore_mac_crc32_checker_sink_sink_ready <= main_ethcore_mac_crc32_checker_fifo_in;
end
assign main_ethcore_mac_crc32_checker_source_source_valid = (main_ethcore_mac_crc32_checker_sink_sink_valid & main_ethcore_mac_crc32_checker_fifo_full);
assign main_ethcore_mac_crc32_checker_source_source_last = main_ethcore_mac_crc32_checker_sink_sink_last;
assign main_ethcore_mac_crc32_checker_syncfifo_source_ready = main_ethcore_mac_crc32_checker_fifo_out;
assign main_ethcore_mac_crc32_checker_source_source_payload_data = main_ethcore_mac_crc32_checker_syncfifo_source_payload_data;
assign main_ethcore_mac_crc32_checker_source_source_payload_last_be = main_ethcore_mac_crc32_checker_syncfifo_source_payload_last_be;
always @(*) begin
	main_ethcore_mac_crc32_checker_source_source_payload_error <= 1'd0;
	main_ethcore_mac_crc32_checker_source_source_payload_error <= main_ethcore_mac_crc32_checker_syncfifo_source_payload_error;
	main_ethcore_mac_crc32_checker_source_source_payload_error <= (main_ethcore_mac_crc32_checker_sink_sink_payload_error | main_ethcore_mac_crc32_checker_crc_error);
end
assign main_ethcore_mac_crc32_checker_error = ((main_ethcore_mac_crc32_checker_source_source_valid & main_ethcore_mac_crc32_checker_source_source_last) & main_ethcore_mac_crc32_checker_crc_error);
assign main_ethcore_mac_crc32_checker_crc_data0 = main_ethcore_mac_crc32_checker_sink_sink_payload_data;
assign main_ethcore_mac_crc32_checker_crc_data1 = main_ethcore_mac_crc32_checker_crc_data0;
assign main_ethcore_mac_crc32_checker_crc_last = main_ethcore_mac_crc32_checker_crc_reg;
assign main_ethcore_mac_crc32_checker_crc_value = (~{main_ethcore_mac_crc32_checker_crc_reg[0], main_ethcore_mac_crc32_checker_crc_reg[1], main_ethcore_mac_crc32_checker_crc_reg[2], main_ethcore_mac_crc32_checker_crc_reg[3], main_ethcore_mac_crc32_checker_crc_reg[4], main_ethcore_mac_crc32_checker_crc_reg[5], main_ethcore_mac_crc32_checker_crc_reg[6], main_ethcore_mac_crc32_checker_crc_reg[7], main_ethcore_mac_crc32_checker_crc_reg[8], main_ethcore_mac_crc32_checker_crc_reg[9], main_ethcore_mac_crc32_checker_crc_reg[10], main_ethcore_mac_crc32_checker_crc_reg[11], main_ethcore_mac_crc32_checker_crc_reg[12], main_ethcore_mac_crc32_checker_crc_reg[13], main_ethcore_mac_crc32_checker_crc_reg[14], main_ethcore_mac_crc32_checker_crc_reg[15], main_ethcore_mac_crc32_checker_crc_reg[16], main_ethcore_mac_crc32_checker_crc_reg[17], main_ethcore_mac_crc32_checker_crc_reg[18], main_ethcore_mac_crc32_checker_crc_reg[19], main_ethcore_mac_crc32_checker_crc_reg[20], main_ethcore_mac_crc32_checker_crc_reg[21], main_ethcore_mac_crc32_checker_crc_reg[22], main_ethcore_mac_crc32_checker_crc_reg[23], main_ethcore_mac_crc32_checker_crc_reg[24], main_ethcore_mac_crc32_checker_crc_reg[25], main_ethcore_mac_crc32_checker_crc_reg[26], main_ethcore_mac_crc32_checker_crc_reg[27], main_ethcore_mac_crc32_checker_crc_reg[28], main_ethcore_mac_crc32_checker_crc_reg[29], main_ethcore_mac_crc32_checker_crc_reg[30], main_ethcore_mac_crc32_checker_crc_reg[31]});
assign main_ethcore_mac_crc32_checker_crc_error = (main_ethcore_mac_crc32_checker_crc_next != 32'd3338984827);
always @(*) begin
	main_ethcore_mac_crc32_checker_crc_next <= 32'd0;
	main_ethcore_mac_crc32_checker_crc_next[0] <= (((main_ethcore_mac_crc32_checker_crc_last[24] ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[1] <= (((((((main_ethcore_mac_crc32_checker_crc_last[25] ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[2] <= (((((((((main_ethcore_mac_crc32_checker_crc_last[26] ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[3] <= (((((((main_ethcore_mac_crc32_checker_crc_last[27] ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]);
	main_ethcore_mac_crc32_checker_crc_next[4] <= (((((((((main_ethcore_mac_crc32_checker_crc_last[28] ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[5] <= (((((((((((((main_ethcore_mac_crc32_checker_crc_last[29] ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[6] <= (((((((((((main_ethcore_mac_crc32_checker_crc_last[30] ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]);
	main_ethcore_mac_crc32_checker_crc_next[7] <= (((((((((main_ethcore_mac_crc32_checker_crc_last[31] ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[8] <= ((((((((main_ethcore_mac_crc32_checker_crc_last[0] ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[9] <= ((((((((main_ethcore_mac_crc32_checker_crc_last[1] ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]);
	main_ethcore_mac_crc32_checker_crc_next[10] <= ((((((((main_ethcore_mac_crc32_checker_crc_last[2] ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[11] <= ((((((((main_ethcore_mac_crc32_checker_crc_last[3] ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[12] <= ((((((((((((main_ethcore_mac_crc32_checker_crc_last[4] ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[13] <= ((((((((((((main_ethcore_mac_crc32_checker_crc_last[5] ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]);
	main_ethcore_mac_crc32_checker_crc_next[14] <= ((((((((((main_ethcore_mac_crc32_checker_crc_last[6] ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]);
	main_ethcore_mac_crc32_checker_crc_next[15] <= ((((((((main_ethcore_mac_crc32_checker_crc_last[7] ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]);
	main_ethcore_mac_crc32_checker_crc_next[16] <= ((((((main_ethcore_mac_crc32_checker_crc_last[8] ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[17] <= ((((((main_ethcore_mac_crc32_checker_crc_last[9] ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]);
	main_ethcore_mac_crc32_checker_crc_next[18] <= ((((((main_ethcore_mac_crc32_checker_crc_last[10] ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]);
	main_ethcore_mac_crc32_checker_crc_next[19] <= ((((main_ethcore_mac_crc32_checker_crc_last[11] ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]);
	main_ethcore_mac_crc32_checker_crc_next[20] <= ((main_ethcore_mac_crc32_checker_crc_last[12] ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]);
	main_ethcore_mac_crc32_checker_crc_next[21] <= ((main_ethcore_mac_crc32_checker_crc_last[13] ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]);
	main_ethcore_mac_crc32_checker_crc_next[22] <= ((main_ethcore_mac_crc32_checker_crc_last[14] ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[23] <= ((((((main_ethcore_mac_crc32_checker_crc_last[15] ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[24] <= ((((((main_ethcore_mac_crc32_checker_crc_last[16] ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]);
	main_ethcore_mac_crc32_checker_crc_next[25] <= ((((main_ethcore_mac_crc32_checker_crc_last[17] ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]);
	main_ethcore_mac_crc32_checker_crc_next[26] <= ((((((((main_ethcore_mac_crc32_checker_crc_last[18] ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]) ^ main_ethcore_mac_crc32_checker_crc_last[24]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_data1[7]);
	main_ethcore_mac_crc32_checker_crc_next[27] <= ((((((((main_ethcore_mac_crc32_checker_crc_last[19] ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]) ^ main_ethcore_mac_crc32_checker_crc_last[25]) ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_data1[6]);
	main_ethcore_mac_crc32_checker_crc_next[28] <= ((((((main_ethcore_mac_crc32_checker_crc_last[20] ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]) ^ main_ethcore_mac_crc32_checker_crc_last[26]) ^ main_ethcore_mac_crc32_checker_crc_data1[5]);
	main_ethcore_mac_crc32_checker_crc_next[29] <= ((((((main_ethcore_mac_crc32_checker_crc_last[21] ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_last[30]) ^ main_ethcore_mac_crc32_checker_crc_data1[1]) ^ main_ethcore_mac_crc32_checker_crc_last[27]) ^ main_ethcore_mac_crc32_checker_crc_data1[4]);
	main_ethcore_mac_crc32_checker_crc_next[30] <= ((((main_ethcore_mac_crc32_checker_crc_last[22] ^ main_ethcore_mac_crc32_checker_crc_last[31]) ^ main_ethcore_mac_crc32_checker_crc_data1[0]) ^ main_ethcore_mac_crc32_checker_crc_last[28]) ^ main_ethcore_mac_crc32_checker_crc_data1[3]);
	main_ethcore_mac_crc32_checker_crc_next[31] <= ((main_ethcore_mac_crc32_checker_crc_last[23] ^ main_ethcore_mac_crc32_checker_crc_last[29]) ^ main_ethcore_mac_crc32_checker_crc_data1[2]);
end
assign main_ethcore_mac_crc32_checker_syncfifo_syncfifo_din = {main_ethcore_mac_crc32_checker_syncfifo_fifo_in_last, main_ethcore_mac_crc32_checker_syncfifo_fifo_in_first, main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_error, main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_last_be, main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_data};
assign {main_ethcore_mac_crc32_checker_syncfifo_fifo_out_last, main_ethcore_mac_crc32_checker_syncfifo_fifo_out_first, main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_error, main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_last_be, main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_data} = main_ethcore_mac_crc32_checker_syncfifo_syncfifo_dout;
assign main_ethcore_mac_crc32_checker_syncfifo_sink_ready = main_ethcore_mac_crc32_checker_syncfifo_syncfifo_writable;
assign main_ethcore_mac_crc32_checker_syncfifo_syncfifo_we = main_ethcore_mac_crc32_checker_syncfifo_sink_valid;
assign main_ethcore_mac_crc32_checker_syncfifo_fifo_in_first = main_ethcore_mac_crc32_checker_syncfifo_sink_first;
assign main_ethcore_mac_crc32_checker_syncfifo_fifo_in_last = main_ethcore_mac_crc32_checker_syncfifo_sink_last;
assign main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_data = main_ethcore_mac_crc32_checker_syncfifo_sink_payload_data;
assign main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_last_be = main_ethcore_mac_crc32_checker_syncfifo_sink_payload_last_be;
assign main_ethcore_mac_crc32_checker_syncfifo_fifo_in_payload_error = main_ethcore_mac_crc32_checker_syncfifo_sink_payload_error;
assign main_ethcore_mac_crc32_checker_syncfifo_source_valid = main_ethcore_mac_crc32_checker_syncfifo_syncfifo_readable;
assign main_ethcore_mac_crc32_checker_syncfifo_source_first = main_ethcore_mac_crc32_checker_syncfifo_fifo_out_first;
assign main_ethcore_mac_crc32_checker_syncfifo_source_last = main_ethcore_mac_crc32_checker_syncfifo_fifo_out_last;
assign main_ethcore_mac_crc32_checker_syncfifo_source_payload_data = main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_data;
assign main_ethcore_mac_crc32_checker_syncfifo_source_payload_last_be = main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_last_be;
assign main_ethcore_mac_crc32_checker_syncfifo_source_payload_error = main_ethcore_mac_crc32_checker_syncfifo_fifo_out_payload_error;
assign main_ethcore_mac_crc32_checker_syncfifo_syncfifo_re = main_ethcore_mac_crc32_checker_syncfifo_source_ready;
always @(*) begin
	main_ethcore_mac_crc32_checker_syncfifo_wrport_adr <= 3'd0;
	if (main_ethcore_mac_crc32_checker_syncfifo_replace) begin
		main_ethcore_mac_crc32_checker_syncfifo_wrport_adr <= (main_ethcore_mac_crc32_checker_syncfifo_produce - 1'd1);
	end else begin
		main_ethcore_mac_crc32_checker_syncfifo_wrport_adr <= main_ethcore_mac_crc32_checker_syncfifo_produce;
	end
end
assign main_ethcore_mac_crc32_checker_syncfifo_wrport_dat_w = main_ethcore_mac_crc32_checker_syncfifo_syncfifo_din;
assign main_ethcore_mac_crc32_checker_syncfifo_wrport_we = (main_ethcore_mac_crc32_checker_syncfifo_syncfifo_we & (main_ethcore_mac_crc32_checker_syncfifo_syncfifo_writable | main_ethcore_mac_crc32_checker_syncfifo_replace));
assign main_ethcore_mac_crc32_checker_syncfifo_do_read = (main_ethcore_mac_crc32_checker_syncfifo_syncfifo_readable & main_ethcore_mac_crc32_checker_syncfifo_syncfifo_re);
assign main_ethcore_mac_crc32_checker_syncfifo_rdport_adr = main_ethcore_mac_crc32_checker_syncfifo_consume;
assign main_ethcore_mac_crc32_checker_syncfifo_syncfifo_dout = main_ethcore_mac_crc32_checker_syncfifo_rdport_dat_r;
assign main_ethcore_mac_crc32_checker_syncfifo_syncfifo_writable = (main_ethcore_mac_crc32_checker_syncfifo_level != 3'd5);
assign main_ethcore_mac_crc32_checker_syncfifo_syncfifo_readable = (main_ethcore_mac_crc32_checker_syncfifo_level != 1'd0);
always @(*) begin
	clockdomainsrenamer_liteethmac_liteethmaccrc32checker_next_state <= 2'd0;
	main_ethcore_mac_crc32_checker_crc_ce <= 1'd0;
	main_ethcore_mac_crc32_checker_crc_reset <= 1'd0;
	main_ethcore_mac_crc32_checker_fifo_reset <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmaccrc32checker_next_state <= clockdomainsrenamer_liteethmac_liteethmaccrc32checker_state;
	case (clockdomainsrenamer_liteethmac_liteethmaccrc32checker_state)
		1'd1: begin
			if ((main_ethcore_mac_crc32_checker_sink_sink_valid & main_ethcore_mac_crc32_checker_sink_sink_ready)) begin
				main_ethcore_mac_crc32_checker_crc_ce <= 1'd1;
				clockdomainsrenamer_liteethmac_liteethmaccrc32checker_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if ((main_ethcore_mac_crc32_checker_sink_sink_valid & main_ethcore_mac_crc32_checker_sink_sink_ready)) begin
				main_ethcore_mac_crc32_checker_crc_ce <= 1'd1;
				if (main_ethcore_mac_crc32_checker_sink_sink_last) begin
					clockdomainsrenamer_liteethmac_liteethmaccrc32checker_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_mac_crc32_checker_crc_reset <= 1'd1;
			main_ethcore_mac_crc32_checker_fifo_reset <= 1'd1;
			clockdomainsrenamer_liteethmac_liteethmaccrc32checker_next_state <= 1'd1;
		end
	endcase
end
assign main_ethcore_mac_ps_preamble_error_o = (main_ethcore_mac_ps_preamble_error_toggle_o ^ main_ethcore_mac_ps_preamble_error_toggle_o_r);
assign main_ethcore_mac_ps_crc_error_o = (main_ethcore_mac_ps_crc_error_toggle_o ^ main_ethcore_mac_ps_crc_error_toggle_o_r);
assign main_ethcore_mac_padding_inserter_counter_done = (main_ethcore_mac_padding_inserter_counter >= 6'd59);
always @(*) begin
	main_ethcore_mac_padding_inserter_source_valid <= 1'd0;
	main_ethcore_mac_padding_inserter_source_first <= 1'd0;
	main_ethcore_mac_padding_inserter_source_last <= 1'd0;
	main_ethcore_mac_padding_inserter_source_payload_data <= 8'd0;
	main_ethcore_mac_padding_inserter_source_payload_last_be <= 1'd0;
	main_ethcore_mac_padding_inserter_source_payload_error <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_next_state <= 1'd0;
	main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= 16'd0;
	main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd0;
	main_ethcore_mac_padding_inserter_sink_ready <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_next_state <= clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_state;
	case (clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_state)
		1'd1: begin
			main_ethcore_mac_padding_inserter_source_valid <= 1'd1;
			main_ethcore_mac_padding_inserter_source_last <= main_ethcore_mac_padding_inserter_counter_done;
			main_ethcore_mac_padding_inserter_source_payload_data <= 1'd0;
			if ((main_ethcore_mac_padding_inserter_source_valid & main_ethcore_mac_padding_inserter_source_ready)) begin
				main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= (main_ethcore_mac_padding_inserter_counter + 1'd1);
				main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
				if (main_ethcore_mac_padding_inserter_counter_done) begin
					main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= 1'd0;
					main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
					clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_mac_padding_inserter_source_valid <= main_ethcore_mac_padding_inserter_sink_valid;
			main_ethcore_mac_padding_inserter_sink_ready <= main_ethcore_mac_padding_inserter_source_ready;
			main_ethcore_mac_padding_inserter_source_first <= main_ethcore_mac_padding_inserter_sink_first;
			main_ethcore_mac_padding_inserter_source_last <= main_ethcore_mac_padding_inserter_sink_last;
			main_ethcore_mac_padding_inserter_source_payload_data <= main_ethcore_mac_padding_inserter_sink_payload_data;
			main_ethcore_mac_padding_inserter_source_payload_last_be <= main_ethcore_mac_padding_inserter_sink_payload_last_be;
			main_ethcore_mac_padding_inserter_source_payload_error <= main_ethcore_mac_padding_inserter_sink_payload_error;
			if ((main_ethcore_mac_padding_inserter_source_valid & main_ethcore_mac_padding_inserter_source_ready)) begin
				main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= (main_ethcore_mac_padding_inserter_counter + 1'd1);
				main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
				if (main_ethcore_mac_padding_inserter_sink_last) begin
					if ((~main_ethcore_mac_padding_inserter_counter_done)) begin
						main_ethcore_mac_padding_inserter_source_last <= 1'd0;
						clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_next_state <= 1'd1;
					end else begin
						main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value <= 1'd0;
						main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce <= 1'd1;
					end
				end
			end
		end
	endcase
end
assign main_ethcore_mac_padding_checker_source_valid = main_ethcore_mac_padding_checker_sink_valid;
assign main_ethcore_mac_padding_checker_sink_ready = main_ethcore_mac_padding_checker_source_ready;
assign main_ethcore_mac_padding_checker_source_first = main_ethcore_mac_padding_checker_sink_first;
assign main_ethcore_mac_padding_checker_source_last = main_ethcore_mac_padding_checker_sink_last;
assign main_ethcore_mac_padding_checker_source_payload_data = main_ethcore_mac_padding_checker_sink_payload_data;
assign main_ethcore_mac_padding_checker_source_payload_last_be = main_ethcore_mac_padding_checker_sink_payload_last_be;
assign main_ethcore_mac_padding_checker_source_payload_error = main_ethcore_mac_padding_checker_sink_payload_error;
assign main_ethcore_mac_tx_cdc_asyncfifo_din = {main_ethcore_mac_tx_cdc_fifo_in_last, main_ethcore_mac_tx_cdc_fifo_in_first, main_ethcore_mac_tx_cdc_fifo_in_payload_error, main_ethcore_mac_tx_cdc_fifo_in_payload_last_be, main_ethcore_mac_tx_cdc_fifo_in_payload_data};
assign {main_ethcore_mac_tx_cdc_fifo_out_last, main_ethcore_mac_tx_cdc_fifo_out_first, main_ethcore_mac_tx_cdc_fifo_out_payload_error, main_ethcore_mac_tx_cdc_fifo_out_payload_last_be, main_ethcore_mac_tx_cdc_fifo_out_payload_data} = main_ethcore_mac_tx_cdc_asyncfifo_dout;
assign main_ethcore_mac_tx_cdc_sink_ready = main_ethcore_mac_tx_cdc_asyncfifo_writable;
assign main_ethcore_mac_tx_cdc_asyncfifo_we = main_ethcore_mac_tx_cdc_sink_valid;
assign main_ethcore_mac_tx_cdc_fifo_in_first = main_ethcore_mac_tx_cdc_sink_first;
assign main_ethcore_mac_tx_cdc_fifo_in_last = main_ethcore_mac_tx_cdc_sink_last;
assign main_ethcore_mac_tx_cdc_fifo_in_payload_data = main_ethcore_mac_tx_cdc_sink_payload_data;
assign main_ethcore_mac_tx_cdc_fifo_in_payload_last_be = main_ethcore_mac_tx_cdc_sink_payload_last_be;
assign main_ethcore_mac_tx_cdc_fifo_in_payload_error = main_ethcore_mac_tx_cdc_sink_payload_error;
assign main_ethcore_mac_tx_cdc_source_valid = main_ethcore_mac_tx_cdc_asyncfifo_readable;
assign main_ethcore_mac_tx_cdc_source_first = main_ethcore_mac_tx_cdc_fifo_out_first;
assign main_ethcore_mac_tx_cdc_source_last = main_ethcore_mac_tx_cdc_fifo_out_last;
assign main_ethcore_mac_tx_cdc_source_payload_data = main_ethcore_mac_tx_cdc_fifo_out_payload_data;
assign main_ethcore_mac_tx_cdc_source_payload_last_be = main_ethcore_mac_tx_cdc_fifo_out_payload_last_be;
assign main_ethcore_mac_tx_cdc_source_payload_error = main_ethcore_mac_tx_cdc_fifo_out_payload_error;
assign main_ethcore_mac_tx_cdc_asyncfifo_re = main_ethcore_mac_tx_cdc_source_ready;
assign main_ethcore_mac_tx_cdc_graycounter0_ce = (main_ethcore_mac_tx_cdc_asyncfifo_writable & main_ethcore_mac_tx_cdc_asyncfifo_we);
assign main_ethcore_mac_tx_cdc_graycounter1_ce = (main_ethcore_mac_tx_cdc_asyncfifo_readable & main_ethcore_mac_tx_cdc_asyncfifo_re);
assign main_ethcore_mac_tx_cdc_asyncfifo_writable = (((main_ethcore_mac_tx_cdc_graycounter0_q[6] == main_ethcore_mac_tx_cdc_consume_wdomain[6]) | (main_ethcore_mac_tx_cdc_graycounter0_q[5] == main_ethcore_mac_tx_cdc_consume_wdomain[5])) | (main_ethcore_mac_tx_cdc_graycounter0_q[4:0] != main_ethcore_mac_tx_cdc_consume_wdomain[4:0]));
assign main_ethcore_mac_tx_cdc_asyncfifo_readable = (main_ethcore_mac_tx_cdc_graycounter1_q != main_ethcore_mac_tx_cdc_produce_rdomain);
assign main_ethcore_mac_tx_cdc_wrport_adr = main_ethcore_mac_tx_cdc_graycounter0_q_binary[5:0];
assign main_ethcore_mac_tx_cdc_wrport_dat_w = main_ethcore_mac_tx_cdc_asyncfifo_din;
assign main_ethcore_mac_tx_cdc_wrport_we = main_ethcore_mac_tx_cdc_graycounter0_ce;
assign main_ethcore_mac_tx_cdc_rdport_adr = main_ethcore_mac_tx_cdc_graycounter1_q_next_binary[5:0];
assign main_ethcore_mac_tx_cdc_asyncfifo_dout = main_ethcore_mac_tx_cdc_rdport_dat_r;
always @(*) begin
	main_ethcore_mac_tx_cdc_graycounter0_q_next_binary <= 7'd0;
	if (main_ethcore_mac_tx_cdc_graycounter0_ce) begin
		main_ethcore_mac_tx_cdc_graycounter0_q_next_binary <= (main_ethcore_mac_tx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		main_ethcore_mac_tx_cdc_graycounter0_q_next_binary <= main_ethcore_mac_tx_cdc_graycounter0_q_binary;
	end
end
assign main_ethcore_mac_tx_cdc_graycounter0_q_next = (main_ethcore_mac_tx_cdc_graycounter0_q_next_binary ^ main_ethcore_mac_tx_cdc_graycounter0_q_next_binary[6:1]);
always @(*) begin
	main_ethcore_mac_tx_cdc_graycounter1_q_next_binary <= 7'd0;
	if (main_ethcore_mac_tx_cdc_graycounter1_ce) begin
		main_ethcore_mac_tx_cdc_graycounter1_q_next_binary <= (main_ethcore_mac_tx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		main_ethcore_mac_tx_cdc_graycounter1_q_next_binary <= main_ethcore_mac_tx_cdc_graycounter1_q_binary;
	end
end
assign main_ethcore_mac_tx_cdc_graycounter1_q_next = (main_ethcore_mac_tx_cdc_graycounter1_q_next_binary ^ main_ethcore_mac_tx_cdc_graycounter1_q_next_binary[6:1]);
assign main_ethcore_mac_rx_cdc_asyncfifo_din = {main_ethcore_mac_rx_cdc_fifo_in_last, main_ethcore_mac_rx_cdc_fifo_in_first, main_ethcore_mac_rx_cdc_fifo_in_payload_error, main_ethcore_mac_rx_cdc_fifo_in_payload_last_be, main_ethcore_mac_rx_cdc_fifo_in_payload_data};
assign {main_ethcore_mac_rx_cdc_fifo_out_last, main_ethcore_mac_rx_cdc_fifo_out_first, main_ethcore_mac_rx_cdc_fifo_out_payload_error, main_ethcore_mac_rx_cdc_fifo_out_payload_last_be, main_ethcore_mac_rx_cdc_fifo_out_payload_data} = main_ethcore_mac_rx_cdc_asyncfifo_dout;
assign main_ethcore_mac_rx_cdc_sink_ready = main_ethcore_mac_rx_cdc_asyncfifo_writable;
assign main_ethcore_mac_rx_cdc_asyncfifo_we = main_ethcore_mac_rx_cdc_sink_valid;
assign main_ethcore_mac_rx_cdc_fifo_in_first = main_ethcore_mac_rx_cdc_sink_first;
assign main_ethcore_mac_rx_cdc_fifo_in_last = main_ethcore_mac_rx_cdc_sink_last;
assign main_ethcore_mac_rx_cdc_fifo_in_payload_data = main_ethcore_mac_rx_cdc_sink_payload_data;
assign main_ethcore_mac_rx_cdc_fifo_in_payload_last_be = main_ethcore_mac_rx_cdc_sink_payload_last_be;
assign main_ethcore_mac_rx_cdc_fifo_in_payload_error = main_ethcore_mac_rx_cdc_sink_payload_error;
assign main_ethcore_mac_rx_cdc_source_valid = main_ethcore_mac_rx_cdc_asyncfifo_readable;
assign main_ethcore_mac_rx_cdc_source_first = main_ethcore_mac_rx_cdc_fifo_out_first;
assign main_ethcore_mac_rx_cdc_source_last = main_ethcore_mac_rx_cdc_fifo_out_last;
assign main_ethcore_mac_rx_cdc_source_payload_data = main_ethcore_mac_rx_cdc_fifo_out_payload_data;
assign main_ethcore_mac_rx_cdc_source_payload_last_be = main_ethcore_mac_rx_cdc_fifo_out_payload_last_be;
assign main_ethcore_mac_rx_cdc_source_payload_error = main_ethcore_mac_rx_cdc_fifo_out_payload_error;
assign main_ethcore_mac_rx_cdc_asyncfifo_re = main_ethcore_mac_rx_cdc_source_ready;
assign main_ethcore_mac_rx_cdc_graycounter0_ce = (main_ethcore_mac_rx_cdc_asyncfifo_writable & main_ethcore_mac_rx_cdc_asyncfifo_we);
assign main_ethcore_mac_rx_cdc_graycounter1_ce = (main_ethcore_mac_rx_cdc_asyncfifo_readable & main_ethcore_mac_rx_cdc_asyncfifo_re);
assign main_ethcore_mac_rx_cdc_asyncfifo_writable = (((main_ethcore_mac_rx_cdc_graycounter0_q[6] == main_ethcore_mac_rx_cdc_consume_wdomain[6]) | (main_ethcore_mac_rx_cdc_graycounter0_q[5] == main_ethcore_mac_rx_cdc_consume_wdomain[5])) | (main_ethcore_mac_rx_cdc_graycounter0_q[4:0] != main_ethcore_mac_rx_cdc_consume_wdomain[4:0]));
assign main_ethcore_mac_rx_cdc_asyncfifo_readable = (main_ethcore_mac_rx_cdc_graycounter1_q != main_ethcore_mac_rx_cdc_produce_rdomain);
assign main_ethcore_mac_rx_cdc_wrport_adr = main_ethcore_mac_rx_cdc_graycounter0_q_binary[5:0];
assign main_ethcore_mac_rx_cdc_wrport_dat_w = main_ethcore_mac_rx_cdc_asyncfifo_din;
assign main_ethcore_mac_rx_cdc_wrport_we = main_ethcore_mac_rx_cdc_graycounter0_ce;
assign main_ethcore_mac_rx_cdc_rdport_adr = main_ethcore_mac_rx_cdc_graycounter1_q_next_binary[5:0];
assign main_ethcore_mac_rx_cdc_asyncfifo_dout = main_ethcore_mac_rx_cdc_rdport_dat_r;
always @(*) begin
	main_ethcore_mac_rx_cdc_graycounter0_q_next_binary <= 7'd0;
	if (main_ethcore_mac_rx_cdc_graycounter0_ce) begin
		main_ethcore_mac_rx_cdc_graycounter0_q_next_binary <= (main_ethcore_mac_rx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		main_ethcore_mac_rx_cdc_graycounter0_q_next_binary <= main_ethcore_mac_rx_cdc_graycounter0_q_binary;
	end
end
assign main_ethcore_mac_rx_cdc_graycounter0_q_next = (main_ethcore_mac_rx_cdc_graycounter0_q_next_binary ^ main_ethcore_mac_rx_cdc_graycounter0_q_next_binary[6:1]);
always @(*) begin
	main_ethcore_mac_rx_cdc_graycounter1_q_next_binary <= 7'd0;
	if (main_ethcore_mac_rx_cdc_graycounter1_ce) begin
		main_ethcore_mac_rx_cdc_graycounter1_q_next_binary <= (main_ethcore_mac_rx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		main_ethcore_mac_rx_cdc_graycounter1_q_next_binary <= main_ethcore_mac_rx_cdc_graycounter1_q_binary;
	end
end
assign main_ethcore_mac_rx_cdc_graycounter1_q_next = (main_ethcore_mac_rx_cdc_graycounter1_q_next_binary ^ main_ethcore_mac_rx_cdc_graycounter1_q_next_binary[6:1]);
assign main_ethcore_mac_padding_inserter_sink_valid = main_ethcore_mac_tx_cdc_source_valid;
assign main_ethcore_mac_tx_cdc_source_ready = main_ethcore_mac_padding_inserter_sink_ready;
assign main_ethcore_mac_padding_inserter_sink_first = main_ethcore_mac_tx_cdc_source_first;
assign main_ethcore_mac_padding_inserter_sink_last = main_ethcore_mac_tx_cdc_source_last;
assign main_ethcore_mac_padding_inserter_sink_payload_data = main_ethcore_mac_tx_cdc_source_payload_data;
assign main_ethcore_mac_padding_inserter_sink_payload_last_be = main_ethcore_mac_tx_cdc_source_payload_last_be;
assign main_ethcore_mac_padding_inserter_sink_payload_error = main_ethcore_mac_tx_cdc_source_payload_error;
assign main_ethcore_mac_crc32_inserter_sink_valid = main_ethcore_mac_padding_inserter_source_valid;
assign main_ethcore_mac_padding_inserter_source_ready = main_ethcore_mac_crc32_inserter_sink_ready;
assign main_ethcore_mac_crc32_inserter_sink_first = main_ethcore_mac_padding_inserter_source_first;
assign main_ethcore_mac_crc32_inserter_sink_last = main_ethcore_mac_padding_inserter_source_last;
assign main_ethcore_mac_crc32_inserter_sink_payload_data = main_ethcore_mac_padding_inserter_source_payload_data;
assign main_ethcore_mac_crc32_inserter_sink_payload_last_be = main_ethcore_mac_padding_inserter_source_payload_last_be;
assign main_ethcore_mac_crc32_inserter_sink_payload_error = main_ethcore_mac_padding_inserter_source_payload_error;
assign main_ethcore_mac_preamble_inserter_sink_valid = main_ethcore_mac_crc32_inserter_source_valid;
assign main_ethcore_mac_crc32_inserter_source_ready = main_ethcore_mac_preamble_inserter_sink_ready;
assign main_ethcore_mac_preamble_inserter_sink_first = main_ethcore_mac_crc32_inserter_source_first;
assign main_ethcore_mac_preamble_inserter_sink_last = main_ethcore_mac_crc32_inserter_source_last;
assign main_ethcore_mac_preamble_inserter_sink_payload_data = main_ethcore_mac_crc32_inserter_source_payload_data;
assign main_ethcore_mac_preamble_inserter_sink_payload_last_be = main_ethcore_mac_crc32_inserter_source_payload_last_be;
assign main_ethcore_mac_preamble_inserter_sink_payload_error = main_ethcore_mac_crc32_inserter_source_payload_error;
assign main_ethcore_mac_tx_gap_inserter_sink_valid = main_ethcore_mac_preamble_inserter_source_valid;
assign main_ethcore_mac_preamble_inserter_source_ready = main_ethcore_mac_tx_gap_inserter_sink_ready;
assign main_ethcore_mac_tx_gap_inserter_sink_first = main_ethcore_mac_preamble_inserter_source_first;
assign main_ethcore_mac_tx_gap_inserter_sink_last = main_ethcore_mac_preamble_inserter_source_last;
assign main_ethcore_mac_tx_gap_inserter_sink_payload_data = main_ethcore_mac_preamble_inserter_source_payload_data;
assign main_ethcore_mac_tx_gap_inserter_sink_payload_last_be = main_ethcore_mac_preamble_inserter_source_payload_last_be;
assign main_ethcore_mac_tx_gap_inserter_sink_payload_error = main_ethcore_mac_preamble_inserter_source_payload_error;
assign ethphy_sink_valid = main_ethcore_mac_tx_gap_inserter_source_valid;
assign main_ethcore_mac_tx_gap_inserter_source_ready = ethphy_sink_ready;
assign ethphy_sink_first = main_ethcore_mac_tx_gap_inserter_source_first;
assign ethphy_sink_last = main_ethcore_mac_tx_gap_inserter_source_last;
assign ethphy_sink_payload_data = main_ethcore_mac_tx_gap_inserter_source_payload_data;
assign ethphy_sink_payload_last_be = main_ethcore_mac_tx_gap_inserter_source_payload_last_be;
assign ethphy_sink_payload_error = main_ethcore_mac_tx_gap_inserter_source_payload_error;
assign main_ethcore_mac_preamble_checker_sink_valid = ethphy_liteethphyrgmiirx_source_valid;
assign ethphy_liteethphyrgmiirx_source_ready = main_ethcore_mac_preamble_checker_sink_ready;
assign main_ethcore_mac_preamble_checker_sink_first = ethphy_liteethphyrgmiirx_source_first;
assign main_ethcore_mac_preamble_checker_sink_last = ethphy_liteethphyrgmiirx_source_last;
assign main_ethcore_mac_preamble_checker_sink_payload_data = ethphy_liteethphyrgmiirx_source_payload_data;
assign main_ethcore_mac_preamble_checker_sink_payload_last_be = ethphy_liteethphyrgmiirx_source_payload_last_be;
assign main_ethcore_mac_preamble_checker_sink_payload_error = ethphy_liteethphyrgmiirx_source_payload_error;
assign main_ethcore_mac_crc32_checker_sink_sink_valid = main_ethcore_mac_preamble_checker_source_valid;
assign main_ethcore_mac_preamble_checker_source_ready = main_ethcore_mac_crc32_checker_sink_sink_ready;
assign main_ethcore_mac_crc32_checker_sink_sink_first = main_ethcore_mac_preamble_checker_source_first;
assign main_ethcore_mac_crc32_checker_sink_sink_last = main_ethcore_mac_preamble_checker_source_last;
assign main_ethcore_mac_crc32_checker_sink_sink_payload_data = main_ethcore_mac_preamble_checker_source_payload_data;
assign main_ethcore_mac_crc32_checker_sink_sink_payload_last_be = main_ethcore_mac_preamble_checker_source_payload_last_be;
assign main_ethcore_mac_crc32_checker_sink_sink_payload_error = main_ethcore_mac_preamble_checker_source_payload_error;
assign main_ethcore_mac_padding_checker_sink_valid = main_ethcore_mac_crc32_checker_source_source_valid;
assign main_ethcore_mac_crc32_checker_source_source_ready = main_ethcore_mac_padding_checker_sink_ready;
assign main_ethcore_mac_padding_checker_sink_first = main_ethcore_mac_crc32_checker_source_source_first;
assign main_ethcore_mac_padding_checker_sink_last = main_ethcore_mac_crc32_checker_source_source_last;
assign main_ethcore_mac_padding_checker_sink_payload_data = main_ethcore_mac_crc32_checker_source_source_payload_data;
assign main_ethcore_mac_padding_checker_sink_payload_last_be = main_ethcore_mac_crc32_checker_source_source_payload_last_be;
assign main_ethcore_mac_padding_checker_sink_payload_error = main_ethcore_mac_crc32_checker_source_source_payload_error;
assign main_ethcore_mac_rx_cdc_sink_valid = main_ethcore_mac_padding_checker_source_valid;
assign main_ethcore_mac_padding_checker_source_ready = main_ethcore_mac_rx_cdc_sink_ready;
assign main_ethcore_mac_rx_cdc_sink_first = main_ethcore_mac_padding_checker_source_first;
assign main_ethcore_mac_rx_cdc_sink_last = main_ethcore_mac_padding_checker_source_last;
assign main_ethcore_mac_rx_cdc_sink_payload_data = main_ethcore_mac_padding_checker_source_payload_data;
assign main_ethcore_mac_rx_cdc_sink_payload_last_be = main_ethcore_mac_padding_checker_source_payload_last_be;
assign main_ethcore_mac_rx_cdc_sink_payload_error = main_ethcore_mac_padding_checker_source_payload_error;
always @(*) begin
	clockdomainsrenamer_liteethmac_sel0 <= 2'd0;
	case (main_ethcore_mac_crossbar_sink_payload_ethernet_type)
		12'd2048: begin
			clockdomainsrenamer_liteethmac_sel0 <= 2'd2;
		end
		12'd2054: begin
			clockdomainsrenamer_liteethmac_sel0 <= 1'd1;
		end
		default: begin
			clockdomainsrenamer_liteethmac_sel0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethmac_request <= 2'd0;
	clockdomainsrenamer_liteethmac_request[0] <= clockdomainsrenamer_liteethmac_status0_ongoing0;
	clockdomainsrenamer_liteethmac_request[1] <= clockdomainsrenamer_liteethmac_status1_ongoing0;
end
always @(*) begin
	main_ethcore_mac_crossbar_source_first <= 1'd0;
	main_ethcore_mac_crossbar_source_last <= 1'd0;
	main_ethcore_mac_crossbar_source_payload_ethernet_type <= 16'd0;
	main_ethcore_mac_crossbar_source_payload_sender_mac <= 48'd0;
	main_ethcore_mac_crossbar_source_payload_target_mac <= 48'd0;
	main_ethcore_ip_mac_port_sink_ready <= 1'd0;
	main_ethcore_mac_crossbar_source_payload_data <= 8'd0;
	main_ethcore_mac_crossbar_source_payload_last_be <= 1'd0;
	main_ethcore_mac_crossbar_source_payload_error <= 1'd0;
	main_ethcore_arp_mac_port_sink_ready <= 1'd0;
	main_ethcore_mac_crossbar_source_valid <= 1'd0;
	case (clockdomainsrenamer_liteethmac_grant)
		1'd0: begin
			main_ethcore_mac_crossbar_source_valid <= main_ethcore_arp_mac_port_sink_valid;
			main_ethcore_arp_mac_port_sink_ready <= main_ethcore_mac_crossbar_source_ready;
			main_ethcore_mac_crossbar_source_first <= main_ethcore_arp_mac_port_sink_first;
			main_ethcore_mac_crossbar_source_last <= main_ethcore_arp_mac_port_sink_last;
			main_ethcore_mac_crossbar_source_payload_ethernet_type <= main_ethcore_arp_mac_port_sink_payload_ethernet_type;
			main_ethcore_mac_crossbar_source_payload_sender_mac <= main_ethcore_arp_mac_port_sink_payload_sender_mac;
			main_ethcore_mac_crossbar_source_payload_target_mac <= main_ethcore_arp_mac_port_sink_payload_target_mac;
			main_ethcore_mac_crossbar_source_payload_data <= main_ethcore_arp_mac_port_sink_payload_data;
			main_ethcore_mac_crossbar_source_payload_last_be <= main_ethcore_arp_mac_port_sink_payload_last_be;
			main_ethcore_mac_crossbar_source_payload_error <= main_ethcore_arp_mac_port_sink_payload_error;
		end
		1'd1: begin
			main_ethcore_mac_crossbar_source_valid <= main_ethcore_ip_mac_port_sink_valid;
			main_ethcore_ip_mac_port_sink_ready <= main_ethcore_mac_crossbar_source_ready;
			main_ethcore_mac_crossbar_source_first <= main_ethcore_ip_mac_port_sink_first;
			main_ethcore_mac_crossbar_source_last <= main_ethcore_ip_mac_port_sink_last;
			main_ethcore_mac_crossbar_source_payload_ethernet_type <= main_ethcore_ip_mac_port_sink_payload_ethernet_type;
			main_ethcore_mac_crossbar_source_payload_sender_mac <= main_ethcore_ip_mac_port_sink_payload_sender_mac;
			main_ethcore_mac_crossbar_source_payload_target_mac <= main_ethcore_ip_mac_port_sink_payload_target_mac;
			main_ethcore_mac_crossbar_source_payload_data <= main_ethcore_ip_mac_port_sink_payload_data;
			main_ethcore_mac_crossbar_source_payload_last_be <= main_ethcore_ip_mac_port_sink_payload_last_be;
			main_ethcore_mac_crossbar_source_payload_error <= main_ethcore_ip_mac_port_sink_payload_error;
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethmac_status0_last <= 1'd0;
	if (main_ethcore_arp_mac_port_sink_valid) begin
		clockdomainsrenamer_liteethmac_status0_last <= (main_ethcore_arp_mac_port_sink_last & main_ethcore_arp_mac_port_sink_ready);
	end
end
assign clockdomainsrenamer_liteethmac_status0_ongoing0 = ((main_ethcore_arp_mac_port_sink_valid | clockdomainsrenamer_liteethmac_status0_ongoing1) & (~clockdomainsrenamer_liteethmac_status0_last));
always @(*) begin
	clockdomainsrenamer_liteethmac_status1_last <= 1'd0;
	if (main_ethcore_ip_mac_port_sink_valid) begin
		clockdomainsrenamer_liteethmac_status1_last <= (main_ethcore_ip_mac_port_sink_last & main_ethcore_ip_mac_port_sink_ready);
	end
end
assign clockdomainsrenamer_liteethmac_status1_ongoing0 = ((main_ethcore_ip_mac_port_sink_valid | clockdomainsrenamer_liteethmac_status1_ongoing1) & (~clockdomainsrenamer_liteethmac_status1_last));
always @(*) begin
	clockdomainsrenamer_liteethmac_sel1 <= 2'd0;
	if (clockdomainsrenamer_liteethmac_first) begin
		clockdomainsrenamer_liteethmac_sel1 <= clockdomainsrenamer_liteethmac_sel0;
	end else begin
		clockdomainsrenamer_liteethmac_sel1 <= clockdomainsrenamer_liteethmac_sel_ongoing;
	end
end
always @(*) begin
	main_ethcore_arp_mac_port_source_payload_error <= 1'd0;
	main_ethcore_ip_mac_port_source_first <= 1'd0;
	main_ethcore_ip_mac_port_source_last <= 1'd0;
	main_ethcore_ip_mac_port_source_payload_ethernet_type <= 16'd0;
	main_ethcore_ip_mac_port_source_payload_sender_mac <= 48'd0;
	main_ethcore_ip_mac_port_source_payload_target_mac <= 48'd0;
	main_ethcore_ip_mac_port_source_payload_data <= 8'd0;
	main_ethcore_ip_mac_port_source_payload_last_be <= 1'd0;
	main_ethcore_ip_mac_port_source_payload_error <= 1'd0;
	main_ethcore_mac_crossbar_sink_ready <= 1'd0;
	main_ethcore_arp_mac_port_source_valid <= 1'd0;
	main_ethcore_arp_mac_port_source_first <= 1'd0;
	main_ethcore_arp_mac_port_source_last <= 1'd0;
	main_ethcore_arp_mac_port_source_payload_ethernet_type <= 16'd0;
	main_ethcore_arp_mac_port_source_payload_sender_mac <= 48'd0;
	main_ethcore_arp_mac_port_source_payload_target_mac <= 48'd0;
	main_ethcore_arp_mac_port_source_payload_data <= 8'd0;
	main_ethcore_ip_mac_port_source_valid <= 1'd0;
	main_ethcore_arp_mac_port_source_payload_last_be <= 1'd0;
	case (clockdomainsrenamer_liteethmac_sel1)
		1'd1: begin
			main_ethcore_arp_mac_port_source_valid <= main_ethcore_mac_crossbar_sink_valid;
			main_ethcore_mac_crossbar_sink_ready <= main_ethcore_arp_mac_port_source_ready;
			main_ethcore_arp_mac_port_source_first <= main_ethcore_mac_crossbar_sink_first;
			main_ethcore_arp_mac_port_source_last <= main_ethcore_mac_crossbar_sink_last;
			main_ethcore_arp_mac_port_source_payload_ethernet_type <= main_ethcore_mac_crossbar_sink_payload_ethernet_type;
			main_ethcore_arp_mac_port_source_payload_sender_mac <= main_ethcore_mac_crossbar_sink_payload_sender_mac;
			main_ethcore_arp_mac_port_source_payload_target_mac <= main_ethcore_mac_crossbar_sink_payload_target_mac;
			main_ethcore_arp_mac_port_source_payload_data <= main_ethcore_mac_crossbar_sink_payload_data;
			main_ethcore_arp_mac_port_source_payload_last_be <= main_ethcore_mac_crossbar_sink_payload_last_be;
			main_ethcore_arp_mac_port_source_payload_error <= main_ethcore_mac_crossbar_sink_payload_error;
		end
		2'd2: begin
			main_ethcore_ip_mac_port_source_valid <= main_ethcore_mac_crossbar_sink_valid;
			main_ethcore_mac_crossbar_sink_ready <= main_ethcore_ip_mac_port_source_ready;
			main_ethcore_ip_mac_port_source_first <= main_ethcore_mac_crossbar_sink_first;
			main_ethcore_ip_mac_port_source_last <= main_ethcore_mac_crossbar_sink_last;
			main_ethcore_ip_mac_port_source_payload_ethernet_type <= main_ethcore_mac_crossbar_sink_payload_ethernet_type;
			main_ethcore_ip_mac_port_source_payload_sender_mac <= main_ethcore_mac_crossbar_sink_payload_sender_mac;
			main_ethcore_ip_mac_port_source_payload_target_mac <= main_ethcore_mac_crossbar_sink_payload_target_mac;
			main_ethcore_ip_mac_port_source_payload_data <= main_ethcore_mac_crossbar_sink_payload_data;
			main_ethcore_ip_mac_port_source_payload_last_be <= main_ethcore_mac_crossbar_sink_payload_last_be;
			main_ethcore_ip_mac_port_source_payload_error <= main_ethcore_mac_crossbar_sink_payload_error;
		end
		default: begin
			main_ethcore_mac_crossbar_sink_ready <= 1'd1;
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethmac_last <= 1'd0;
	if (main_ethcore_mac_crossbar_sink_valid) begin
		clockdomainsrenamer_liteethmac_last <= (main_ethcore_mac_crossbar_sink_last & main_ethcore_mac_crossbar_sink_ready);
	end
end
assign clockdomainsrenamer_liteethmac_ongoing0 = ((main_ethcore_mac_crossbar_sink_valid | clockdomainsrenamer_liteethmac_ongoing1) & (~clockdomainsrenamer_liteethmac_last));
always @(*) begin
	main_ethcore_mac_packetizer_header <= 112'd0;
	main_ethcore_mac_packetizer_header[111:96] <= {main_ethcore_mac_packetizer_sink_payload_ethernet_type[7:0], main_ethcore_mac_packetizer_sink_payload_ethernet_type[15:8]};
	main_ethcore_mac_packetizer_header[95:48] <= {main_ethcore_mac_packetizer_sink_payload_sender_mac[7:0], main_ethcore_mac_packetizer_sink_payload_sender_mac[15:8], main_ethcore_mac_packetizer_sink_payload_sender_mac[23:16], main_ethcore_mac_packetizer_sink_payload_sender_mac[31:24], main_ethcore_mac_packetizer_sink_payload_sender_mac[39:32], main_ethcore_mac_packetizer_sink_payload_sender_mac[47:40]};
	main_ethcore_mac_packetizer_header[47:0] <= {main_ethcore_mac_packetizer_sink_payload_target_mac[7:0], main_ethcore_mac_packetizer_sink_payload_target_mac[15:8], main_ethcore_mac_packetizer_sink_payload_target_mac[23:16], main_ethcore_mac_packetizer_sink_payload_target_mac[31:24], main_ethcore_mac_packetizer_sink_payload_target_mac[39:32], main_ethcore_mac_packetizer_sink_payload_target_mac[47:40]};
end
assign main_ethcore_mac_packetizer_source_payload_error = main_ethcore_mac_packetizer_sink_payload_error;
assign main_ethcore_mac_packetizer_source_payload_last_be = {main_ethcore_mac_packetizer_sink_payload_last_be};
always @(*) begin
	main_ethcore_mac_packetizer_source_last <= 1'd0;
	main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value0 <= 4'd0;
	main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd0;
	main_ethcore_mac_packetizer_source_payload_data <= 8'd0;
	main_ethcore_mac_packetizer_sink_ready <= 1'd0;
	main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 <= 1'd0;
	main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 <= 1'd0;
	main_ethcore_mac_packetizer_sr_load <= 1'd0;
	main_ethcore_mac_packetizer_sr_shift <= 1'd0;
	main_ethcore_mac_packetizer_source_valid <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 2'd0;
	clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= clockdomainsrenamer_liteethmac_liteethmacpacketizer_state;
	case (clockdomainsrenamer_liteethmac_liteethmacpacketizer_state)
		1'd1: begin
			main_ethcore_mac_packetizer_source_valid <= 1'd1;
			main_ethcore_mac_packetizer_source_last <= 1'd0;
			main_ethcore_mac_packetizer_source_payload_data <= main_ethcore_mac_packetizer_sr[111:8];
			if ((main_ethcore_mac_packetizer_source_valid & main_ethcore_mac_packetizer_source_ready)) begin
				main_ethcore_mac_packetizer_sr_shift <= 1'd1;
				if ((main_ethcore_mac_packetizer_count == 4'd13)) begin
					main_ethcore_mac_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 2'd3;
						main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value0 <= (main_ethcore_mac_packetizer_count + 1'd1);
						main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd1;
					end else begin
						clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 2'd2;
					end
				end else begin
					main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value0 <= (main_ethcore_mac_packetizer_count + 1'd1);
					main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_ethcore_mac_packetizer_source_valid <= main_ethcore_mac_packetizer_sink_valid;
			main_ethcore_mac_packetizer_source_last <= main_ethcore_mac_packetizer_sink_last;
			main_ethcore_mac_packetizer_source_payload_data <= main_ethcore_mac_packetizer_sink_payload_data;
			if ((main_ethcore_mac_packetizer_source_valid & main_ethcore_mac_packetizer_source_ready)) begin
				main_ethcore_mac_packetizer_sink_ready <= 1'd1;
				if (main_ethcore_mac_packetizer_source_last) begin
					clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_mac_packetizer_source_valid <= (main_ethcore_mac_packetizer_sink_valid | main_ethcore_mac_packetizer_sink_d_last);
			main_ethcore_mac_packetizer_source_last <= main_ethcore_mac_packetizer_sink_d_last;
			if (main_ethcore_mac_packetizer_fsm_from_idle) begin
				main_ethcore_mac_packetizer_source_payload_data[0] <= main_ethcore_mac_packetizer_sr[111:16];
			end else begin
				main_ethcore_mac_packetizer_source_payload_data[0] <= main_ethcore_mac_packetizer_sink_d_payload_data[7];
			end
			main_ethcore_mac_packetizer_source_payload_data[7:0] <= main_ethcore_mac_packetizer_sink_payload_data;
			if ((main_ethcore_mac_packetizer_source_valid & main_ethcore_mac_packetizer_source_ready)) begin
				main_ethcore_mac_packetizer_sink_ready <= (~main_ethcore_mac_packetizer_source_last);
				main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 <= 1'd0;
				main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 <= 1'd1;
				if (main_ethcore_mac_packetizer_source_last) begin
					clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_mac_packetizer_sink_ready <= 1'd1;
			main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value0 <= 1'd1;
			main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value_ce0 <= 1'd1;
			if (main_ethcore_mac_packetizer_sink_valid) begin
				main_ethcore_mac_packetizer_sink_ready <= 1'd0;
				main_ethcore_mac_packetizer_source_valid <= 1'd1;
				main_ethcore_mac_packetizer_source_last <= 1'd0;
				main_ethcore_mac_packetizer_source_payload_data <= main_ethcore_mac_packetizer_header[7:0];
				if ((main_ethcore_mac_packetizer_source_valid & main_ethcore_mac_packetizer_source_ready)) begin
					main_ethcore_mac_packetizer_sr_load <= 1'd1;
					main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1 <= 1'd1;
					main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 2'd3;
						end else begin
							clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 2'd2;
						end
					end else begin
						clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
assign main_ethcore_mac_depacketizer_header = main_ethcore_mac_depacketizer_sr;
assign main_ethcore_mac_depacketizer_source_payload_ethernet_type = {slice_proxy1[7:0], slice_proxy0[15:8]};
assign main_ethcore_mac_depacketizer_source_payload_sender_mac = {slice_proxy7[7:0], slice_proxy6[15:8], slice_proxy5[23:16], slice_proxy4[31:24], slice_proxy3[39:32], slice_proxy2[47:40]};
assign main_ethcore_mac_depacketizer_source_payload_target_mac = {slice_proxy13[7:0], slice_proxy12[15:8], slice_proxy11[23:16], slice_proxy10[31:24], slice_proxy9[39:32], slice_proxy8[47:40]};
assign main_ethcore_mac_depacketizer_source_payload_error = main_ethcore_mac_depacketizer_sink_payload_error;
assign main_ethcore_mac_depacketizer_source_payload_last_be = {main_ethcore_mac_depacketizer_sink_payload_last_be};
always @(*) begin
	main_ethcore_mac_depacketizer_sink_ready <= 1'd0;
	main_ethcore_mac_depacketizer_sr_shift <= 1'd0;
	main_ethcore_mac_depacketizer_sr_shift_leftover <= 1'd0;
	main_ethcore_mac_depacketizer_source_valid <= 1'd0;
	clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 2'd0;
	main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= 4'd0;
	main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd0;
	main_ethcore_mac_depacketizer_source_last <= 1'd0;
	main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 <= 1'd0;
	main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 <= 1'd0;
	main_ethcore_mac_depacketizer_source_payload_data <= 8'd0;
	clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= clockdomainsrenamer_liteethmac_liteethmacdepacketizer_state;
	case (clockdomainsrenamer_liteethmac_liteethmacdepacketizer_state)
		1'd1: begin
			main_ethcore_mac_depacketizer_sink_ready <= 1'd1;
			if (main_ethcore_mac_depacketizer_sink_valid) begin
				main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= (main_ethcore_mac_depacketizer_count + 1'd1);
				main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd1;
				main_ethcore_mac_depacketizer_sr_shift <= 1'd1;
				if ((main_ethcore_mac_depacketizer_count == 4'd13)) begin
					if (1'd0) begin
						main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= (main_ethcore_mac_depacketizer_count + 1'd1);
						main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd1;
						clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			main_ethcore_mac_depacketizer_source_valid <= (main_ethcore_mac_depacketizer_sink_valid | main_ethcore_mac_depacketizer_sink_d_last);
			main_ethcore_mac_depacketizer_source_last <= (main_ethcore_mac_depacketizer_sink_last | main_ethcore_mac_depacketizer_sink_d_last);
			main_ethcore_mac_depacketizer_sink_ready <= main_ethcore_mac_depacketizer_source_ready;
			main_ethcore_mac_depacketizer_source_payload_data <= main_ethcore_mac_depacketizer_sink_d_payload_data[7:0];
			main_ethcore_mac_depacketizer_source_payload_data[7] <= main_ethcore_mac_depacketizer_sink_payload_data;
			if (main_ethcore_mac_depacketizer_fsm_from_idle) begin
				main_ethcore_mac_depacketizer_source_valid <= main_ethcore_mac_depacketizer_sink_d_last;
				main_ethcore_mac_depacketizer_sink_ready <= 1'd1;
				if (main_ethcore_mac_depacketizer_sink_valid) begin
					main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 <= 1'd0;
					main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 <= 1'd1;
					main_ethcore_mac_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((main_ethcore_mac_depacketizer_source_valid & main_ethcore_mac_depacketizer_source_ready)) begin
				if (main_ethcore_mac_depacketizer_source_last) begin
					clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_mac_depacketizer_source_valid <= (main_ethcore_mac_depacketizer_sink_valid | main_ethcore_mac_depacketizer_sink_d_last);
			main_ethcore_mac_depacketizer_source_last <= (main_ethcore_mac_depacketizer_sink_last | main_ethcore_mac_depacketizer_sink_d_last);
			main_ethcore_mac_depacketizer_sink_ready <= main_ethcore_mac_depacketizer_source_ready;
			main_ethcore_mac_depacketizer_source_payload_data <= main_ethcore_mac_depacketizer_sink_payload_data;
			if ((main_ethcore_mac_depacketizer_source_valid & main_ethcore_mac_depacketizer_source_ready)) begin
				if (main_ethcore_mac_depacketizer_source_last) begin
					clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_mac_depacketizer_sink_ready <= 1'd1;
			main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value0 <= 1'd1;
			main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0 <= 1'd1;
			if (main_ethcore_mac_depacketizer_sink_valid) begin
				main_ethcore_mac_depacketizer_sr_shift <= 1'd1;
				main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1 <= 1'd1;
				main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 2'd3;
					end
				end else begin
					clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign main_ethcore_arp_table_sink_valid = main_ethcore_arp_rx_source_source_valid;
assign main_ethcore_arp_rx_source_source_ready = main_ethcore_arp_table_sink_ready;
assign main_ethcore_arp_table_sink_first = main_ethcore_arp_rx_source_source_first;
assign main_ethcore_arp_table_sink_last = main_ethcore_arp_rx_source_source_last;
assign main_ethcore_arp_table_sink_payload_reply = main_ethcore_arp_rx_source_source_payload_reply;
assign main_ethcore_arp_table_sink_payload_request = main_ethcore_arp_rx_source_source_payload_request;
assign main_ethcore_arp_table_sink_payload_ip_address = main_ethcore_arp_rx_source_source_payload_ip_address;
assign main_ethcore_arp_table_sink_payload_mac_address = main_ethcore_arp_rx_source_source_payload_mac_address;
assign main_ethcore_arp_tx_sink_sink_valid = main_ethcore_arp_table_source_valid;
assign main_ethcore_arp_table_source_ready = main_ethcore_arp_tx_sink_sink_ready;
assign main_ethcore_arp_tx_sink_sink_first = main_ethcore_arp_table_source_first;
assign main_ethcore_arp_tx_sink_sink_last = main_ethcore_arp_table_source_last;
assign main_ethcore_arp_tx_sink_sink_payload_reply = main_ethcore_arp_table_source_payload_reply;
assign main_ethcore_arp_tx_sink_sink_payload_request = main_ethcore_arp_table_source_payload_request;
assign main_ethcore_arp_tx_sink_sink_payload_ip_address = main_ethcore_arp_table_source_payload_ip_address;
assign main_ethcore_arp_tx_sink_sink_payload_mac_address = main_ethcore_arp_table_source_payload_mac_address;
assign main_ethcore_arp_mac_port_sink_valid = main_ethcore_arp_tx_source_source_valid;
assign main_ethcore_arp_tx_source_source_ready = main_ethcore_arp_mac_port_sink_ready;
assign main_ethcore_arp_mac_port_sink_first = main_ethcore_arp_tx_source_source_first;
assign main_ethcore_arp_mac_port_sink_last = main_ethcore_arp_tx_source_source_last;
assign main_ethcore_arp_mac_port_sink_payload_ethernet_type = main_ethcore_arp_tx_source_source_payload_ethernet_type;
assign main_ethcore_arp_mac_port_sink_payload_sender_mac = main_ethcore_arp_tx_source_source_payload_sender_mac;
assign main_ethcore_arp_mac_port_sink_payload_target_mac = main_ethcore_arp_tx_source_source_payload_target_mac;
assign main_ethcore_arp_mac_port_sink_payload_data = main_ethcore_arp_tx_source_source_payload_data;
assign main_ethcore_arp_mac_port_sink_payload_last_be = main_ethcore_arp_tx_source_source_payload_last_be;
assign main_ethcore_arp_mac_port_sink_payload_error = main_ethcore_arp_tx_source_source_payload_error;
assign main_ethcore_arp_rx_sink_sink_valid = main_ethcore_arp_mac_port_source_valid;
assign main_ethcore_arp_mac_port_source_ready = main_ethcore_arp_rx_sink_sink_ready;
assign main_ethcore_arp_rx_sink_sink_first = main_ethcore_arp_mac_port_source_first;
assign main_ethcore_arp_rx_sink_sink_last = main_ethcore_arp_mac_port_source_last;
assign main_ethcore_arp_rx_sink_sink_payload_ethernet_type = main_ethcore_arp_mac_port_source_payload_ethernet_type;
assign main_ethcore_arp_rx_sink_sink_payload_sender_mac = main_ethcore_arp_mac_port_source_payload_sender_mac;
assign main_ethcore_arp_rx_sink_sink_payload_target_mac = main_ethcore_arp_mac_port_source_payload_target_mac;
assign main_ethcore_arp_rx_sink_sink_payload_data = main_ethcore_arp_mac_port_source_payload_data;
assign main_ethcore_arp_rx_sink_sink_payload_last_be = main_ethcore_arp_mac_port_source_payload_last_be;
assign main_ethcore_arp_rx_sink_sink_payload_error = main_ethcore_arp_mac_port_source_payload_error;
assign main_ethcore_arp_tx_packetizer_sink_last = (main_ethcore_arp_tx_counter == 6'd45);
assign main_ethcore_arp_tx_packetizer_sink_param_hwtype = 1'd1;
assign main_ethcore_arp_tx_packetizer_sink_param_proto = 12'd2048;
assign main_ethcore_arp_tx_packetizer_sink_param_hwsize = 3'd6;
assign main_ethcore_arp_tx_packetizer_sink_param_protosize = 3'd4;
assign main_ethcore_arp_tx_packetizer_sink_param_sender_mac = 47'd125806191559394;
assign main_ethcore_arp_tx_packetizer_sink_param_sender_ip = 32'd3232235796;
always @(*) begin
	main_ethcore_arp_tx_packetizer_sink_param_target_mac <= 48'd0;
	main_ethcore_arp_tx_packetizer_sink_param_opcode <= 16'd0;
	main_ethcore_arp_tx_packetizer_sink_param_target_ip <= 32'd0;
	if (main_ethcore_arp_tx_sink_sink_payload_reply) begin
		main_ethcore_arp_tx_packetizer_sink_param_opcode <= 2'd2;
		main_ethcore_arp_tx_packetizer_sink_param_target_mac <= main_ethcore_arp_tx_sink_sink_payload_mac_address;
		main_ethcore_arp_tx_packetizer_sink_param_target_ip <= main_ethcore_arp_tx_sink_sink_payload_ip_address;
	end else begin
		if (main_ethcore_arp_tx_sink_sink_payload_request) begin
			main_ethcore_arp_tx_packetizer_sink_param_opcode <= 1'd1;
			main_ethcore_arp_tx_packetizer_sink_param_target_mac <= 48'd281474976710655;
			main_ethcore_arp_tx_packetizer_sink_param_target_ip <= main_ethcore_arp_tx_sink_sink_payload_ip_address;
		end
	end
end
always @(*) begin
	main_ethcore_arp_tx_packetizer_header <= 224'd0;
	main_ethcore_arp_tx_packetizer_header[39:32] <= {main_ethcore_arp_tx_packetizer_sink_param_hwsize[7:0]};
	main_ethcore_arp_tx_packetizer_header[15:0] <= {main_ethcore_arp_tx_packetizer_sink_param_hwtype[7:0], main_ethcore_arp_tx_packetizer_sink_param_hwtype[15:8]};
	main_ethcore_arp_tx_packetizer_header[63:48] <= {main_ethcore_arp_tx_packetizer_sink_param_opcode[7:0], main_ethcore_arp_tx_packetizer_sink_param_opcode[15:8]};
	main_ethcore_arp_tx_packetizer_header[31:16] <= {main_ethcore_arp_tx_packetizer_sink_param_proto[7:0], main_ethcore_arp_tx_packetizer_sink_param_proto[15:8]};
	main_ethcore_arp_tx_packetizer_header[47:40] <= {main_ethcore_arp_tx_packetizer_sink_param_protosize[7:0]};
	main_ethcore_arp_tx_packetizer_header[143:112] <= {main_ethcore_arp_tx_packetizer_sink_param_sender_ip[7:0], main_ethcore_arp_tx_packetizer_sink_param_sender_ip[15:8], main_ethcore_arp_tx_packetizer_sink_param_sender_ip[23:16], main_ethcore_arp_tx_packetizer_sink_param_sender_ip[31:24]};
	main_ethcore_arp_tx_packetizer_header[111:64] <= {main_ethcore_arp_tx_packetizer_sink_param_sender_mac[7:0], main_ethcore_arp_tx_packetizer_sink_param_sender_mac[15:8], main_ethcore_arp_tx_packetizer_sink_param_sender_mac[23:16], main_ethcore_arp_tx_packetizer_sink_param_sender_mac[31:24], main_ethcore_arp_tx_packetizer_sink_param_sender_mac[39:32], main_ethcore_arp_tx_packetizer_sink_param_sender_mac[47:40]};
	main_ethcore_arp_tx_packetizer_header[223:192] <= {main_ethcore_arp_tx_packetizer_sink_param_target_ip[7:0], main_ethcore_arp_tx_packetizer_sink_param_target_ip[15:8], main_ethcore_arp_tx_packetizer_sink_param_target_ip[23:16], main_ethcore_arp_tx_packetizer_sink_param_target_ip[31:24]};
	main_ethcore_arp_tx_packetizer_header[191:144] <= {main_ethcore_arp_tx_packetizer_sink_param_target_mac[7:0], main_ethcore_arp_tx_packetizer_sink_param_target_mac[15:8], main_ethcore_arp_tx_packetizer_sink_param_target_mac[23:16], main_ethcore_arp_tx_packetizer_sink_param_target_mac[31:24], main_ethcore_arp_tx_packetizer_sink_param_target_mac[39:32], main_ethcore_arp_tx_packetizer_sink_param_target_mac[47:40]};
end
assign main_ethcore_arp_tx_packetizer_source_payload_error = main_ethcore_arp_tx_packetizer_sink_payload_error;
always @(*) begin
	main_ethcore_arp_tx_packetizer_source_payload_data <= 8'd0;
	main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 <= 1'd0;
	main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 <= 1'd0;
	main_ethcore_arp_tx_packetizer_sr_load <= 1'd0;
	main_ethcore_arp_tx_packetizer_sr_shift <= 1'd0;
	main_ethcore_arp_tx_packetizer_source_valid <= 1'd0;
	main_ethcore_arp_tx_packetizer_sink_ready <= 1'd0;
	main_ethcore_arp_tx_packetizer_source_last <= 1'd0;
	clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 2'd0;
	main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= 5'd0;
	main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd0;
	clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= clockdomainsrenamer_liteetharptx_liteetharppacketizer_state;
	case (clockdomainsrenamer_liteetharptx_liteetharppacketizer_state)
		1'd1: begin
			main_ethcore_arp_tx_packetizer_source_valid <= 1'd1;
			main_ethcore_arp_tx_packetizer_source_last <= 1'd0;
			main_ethcore_arp_tx_packetizer_source_payload_data <= main_ethcore_arp_tx_packetizer_sr[223:8];
			if ((main_ethcore_arp_tx_packetizer_source_valid & main_ethcore_arp_tx_packetizer_source_ready)) begin
				main_ethcore_arp_tx_packetizer_sr_shift <= 1'd1;
				if ((main_ethcore_arp_tx_packetizer_count == 5'd27)) begin
					main_ethcore_arp_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 2'd3;
						main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= (main_ethcore_arp_tx_packetizer_count + 1'd1);
						main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd1;
					end else begin
						clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 2'd2;
					end
				end else begin
					main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= (main_ethcore_arp_tx_packetizer_count + 1'd1);
					main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_ethcore_arp_tx_packetizer_source_valid <= main_ethcore_arp_tx_packetizer_sink_valid;
			main_ethcore_arp_tx_packetizer_source_last <= main_ethcore_arp_tx_packetizer_sink_last;
			main_ethcore_arp_tx_packetizer_source_payload_data <= main_ethcore_arp_tx_packetizer_sink_payload_data;
			if ((main_ethcore_arp_tx_packetizer_source_valid & main_ethcore_arp_tx_packetizer_source_ready)) begin
				main_ethcore_arp_tx_packetizer_sink_ready <= 1'd1;
				if (main_ethcore_arp_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_arp_tx_packetizer_source_valid <= (main_ethcore_arp_tx_packetizer_sink_valid | main_ethcore_arp_tx_packetizer_sink_d_last);
			main_ethcore_arp_tx_packetizer_source_last <= main_ethcore_arp_tx_packetizer_sink_d_last;
			if (main_ethcore_arp_tx_packetizer_fsm_from_idle) begin
				main_ethcore_arp_tx_packetizer_source_payload_data[0] <= main_ethcore_arp_tx_packetizer_sr[223:16];
			end else begin
				main_ethcore_arp_tx_packetizer_source_payload_data[0] <= main_ethcore_arp_tx_packetizer_sink_d_payload_data[7];
			end
			main_ethcore_arp_tx_packetizer_source_payload_data[7:0] <= main_ethcore_arp_tx_packetizer_sink_payload_data;
			if ((main_ethcore_arp_tx_packetizer_source_valid & main_ethcore_arp_tx_packetizer_source_ready)) begin
				main_ethcore_arp_tx_packetizer_sink_ready <= (~main_ethcore_arp_tx_packetizer_source_last);
				main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 <= 1'd0;
				main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 <= 1'd1;
				if (main_ethcore_arp_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_arp_tx_packetizer_sink_ready <= 1'd1;
			main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0 <= 1'd1;
			main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0 <= 1'd1;
			if (main_ethcore_arp_tx_packetizer_sink_valid) begin
				main_ethcore_arp_tx_packetizer_sink_ready <= 1'd0;
				main_ethcore_arp_tx_packetizer_source_valid <= 1'd1;
				main_ethcore_arp_tx_packetizer_source_last <= 1'd0;
				main_ethcore_arp_tx_packetizer_source_payload_data <= main_ethcore_arp_tx_packetizer_header[7:0];
				if ((main_ethcore_arp_tx_packetizer_source_valid & main_ethcore_arp_tx_packetizer_source_ready)) begin
					main_ethcore_arp_tx_packetizer_sr_load <= 1'd1;
					main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1 <= 1'd1;
					main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 2'd3;
						end else begin
							clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 2'd2;
						end
					end else begin
						clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_ethcore_arp_tx_source_source_first <= 1'd0;
	main_ethcore_arp_tx_source_source_last <= 1'd0;
	main_ethcore_arp_tx_source_source_payload_ethernet_type <= 16'd0;
	main_ethcore_arp_tx_source_source_payload_sender_mac <= 48'd0;
	clockdomainsrenamer_liteetharptx_fsm_next_state <= 1'd0;
	main_ethcore_arp_tx_source_source_payload_target_mac <= 48'd0;
	main_ethcore_arp_tx_counter_liteetharp_fsm_next_value <= 6'd0;
	main_ethcore_arp_tx_source_source_payload_data <= 8'd0;
	main_ethcore_arp_tx_counter_liteetharp_fsm_next_value_ce <= 1'd0;
	main_ethcore_arp_tx_source_source_payload_last_be <= 1'd0;
	main_ethcore_arp_tx_sink_sink_ready <= 1'd0;
	main_ethcore_arp_tx_source_source_payload_error <= 1'd0;
	main_ethcore_arp_tx_packetizer_sink_valid <= 1'd0;
	main_ethcore_arp_tx_packetizer_source_ready <= 1'd0;
	main_ethcore_arp_tx_source_source_valid <= 1'd0;
	clockdomainsrenamer_liteetharptx_fsm_next_state <= clockdomainsrenamer_liteetharptx_fsm_state;
	case (clockdomainsrenamer_liteetharptx_fsm_state)
		1'd1: begin
			main_ethcore_arp_tx_packetizer_sink_valid <= 1'd1;
			main_ethcore_arp_tx_source_source_valid <= main_ethcore_arp_tx_packetizer_source_valid;
			main_ethcore_arp_tx_packetizer_source_ready <= main_ethcore_arp_tx_source_source_ready;
			main_ethcore_arp_tx_source_source_first <= main_ethcore_arp_tx_packetizer_source_first;
			main_ethcore_arp_tx_source_source_last <= main_ethcore_arp_tx_packetizer_source_last;
			main_ethcore_arp_tx_source_source_payload_ethernet_type <= main_ethcore_arp_tx_packetizer_source_payload_ethernet_type;
			main_ethcore_arp_tx_source_source_payload_sender_mac <= main_ethcore_arp_tx_packetizer_source_payload_sender_mac;
			main_ethcore_arp_tx_source_source_payload_target_mac <= main_ethcore_arp_tx_packetizer_source_payload_target_mac;
			main_ethcore_arp_tx_source_source_payload_data <= main_ethcore_arp_tx_packetizer_source_payload_data;
			main_ethcore_arp_tx_source_source_payload_last_be <= main_ethcore_arp_tx_packetizer_source_payload_last_be;
			main_ethcore_arp_tx_source_source_payload_error <= main_ethcore_arp_tx_packetizer_source_payload_error;
			main_ethcore_arp_tx_source_source_payload_target_mac <= main_ethcore_arp_tx_packetizer_sink_param_target_mac;
			main_ethcore_arp_tx_source_source_payload_sender_mac <= 47'd125806191559394;
			main_ethcore_arp_tx_source_source_payload_ethernet_type <= 12'd2054;
			if ((main_ethcore_arp_tx_source_source_valid & main_ethcore_arp_tx_source_source_ready)) begin
				main_ethcore_arp_tx_counter_liteetharp_fsm_next_value <= (main_ethcore_arp_tx_counter + 1'd1);
				main_ethcore_arp_tx_counter_liteetharp_fsm_next_value_ce <= 1'd1;
				if (main_ethcore_arp_tx_source_source_last) begin
					main_ethcore_arp_tx_sink_sink_ready <= 1'd1;
					clockdomainsrenamer_liteetharptx_fsm_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_arp_tx_sink_sink_ready <= 1'd1;
			main_ethcore_arp_tx_counter_liteetharp_fsm_next_value <= 1'd0;
			main_ethcore_arp_tx_counter_liteetharp_fsm_next_value_ce <= 1'd1;
			if (main_ethcore_arp_tx_sink_sink_valid) begin
				main_ethcore_arp_tx_sink_sink_ready <= 1'd0;
				clockdomainsrenamer_liteetharptx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_arp_rx_depacketizer_sink_valid = main_ethcore_arp_rx_sink_sink_valid;
assign main_ethcore_arp_rx_sink_sink_ready = main_ethcore_arp_rx_depacketizer_sink_ready;
assign main_ethcore_arp_rx_depacketizer_sink_first = main_ethcore_arp_rx_sink_sink_first;
assign main_ethcore_arp_rx_depacketizer_sink_last = main_ethcore_arp_rx_sink_sink_last;
assign main_ethcore_arp_rx_depacketizer_sink_payload_ethernet_type = main_ethcore_arp_rx_sink_sink_payload_ethernet_type;
assign main_ethcore_arp_rx_depacketizer_sink_payload_sender_mac = main_ethcore_arp_rx_sink_sink_payload_sender_mac;
assign main_ethcore_arp_rx_depacketizer_sink_payload_target_mac = main_ethcore_arp_rx_sink_sink_payload_target_mac;
assign main_ethcore_arp_rx_depacketizer_sink_payload_data = main_ethcore_arp_rx_sink_sink_payload_data;
assign main_ethcore_arp_rx_depacketizer_sink_payload_last_be = main_ethcore_arp_rx_sink_sink_payload_last_be;
assign main_ethcore_arp_rx_depacketizer_sink_payload_error = main_ethcore_arp_rx_sink_sink_payload_error;
always @(*) begin
	main_ethcore_arp_rx_request <= 1'd0;
	main_ethcore_arp_rx_reply <= 1'd0;
	case (main_ethcore_arp_rx_depacketizer_source_param_opcode)
		1'd1: begin
			main_ethcore_arp_rx_request <= 1'd1;
		end
		2'd2: begin
			main_ethcore_arp_rx_reply <= 1'd1;
		end
		default: begin
		end
	endcase
end
assign main_ethcore_arp_rx_source_source_payload_ip_address = main_ethcore_arp_rx_depacketizer_source_param_sender_ip;
assign main_ethcore_arp_rx_source_source_payload_mac_address = main_ethcore_arp_rx_depacketizer_source_param_sender_mac;
assign main_ethcore_arp_rx_depacketizer_header = main_ethcore_arp_rx_depacketizer_sr;
assign main_ethcore_arp_rx_depacketizer_source_param_hwsize = {slice_proxy14[7:0]};
assign main_ethcore_arp_rx_depacketizer_source_param_hwtype = {slice_proxy16[7:0], slice_proxy15[15:8]};
assign main_ethcore_arp_rx_depacketizer_source_param_opcode = {slice_proxy18[7:0], slice_proxy17[15:8]};
assign main_ethcore_arp_rx_depacketizer_source_param_proto = {slice_proxy20[7:0], slice_proxy19[15:8]};
assign main_ethcore_arp_rx_depacketizer_source_param_protosize = {slice_proxy21[7:0]};
assign main_ethcore_arp_rx_depacketizer_source_param_sender_ip = {slice_proxy25[7:0], slice_proxy24[15:8], slice_proxy23[23:16], slice_proxy22[31:24]};
assign main_ethcore_arp_rx_depacketizer_source_param_sender_mac = {slice_proxy31[7:0], slice_proxy30[15:8], slice_proxy29[23:16], slice_proxy28[31:24], slice_proxy27[39:32], slice_proxy26[47:40]};
assign main_ethcore_arp_rx_depacketizer_source_param_target_ip = {slice_proxy35[7:0], slice_proxy34[15:8], slice_proxy33[23:16], slice_proxy32[31:24]};
assign main_ethcore_arp_rx_depacketizer_source_param_target_mac = {slice_proxy41[7:0], slice_proxy40[15:8], slice_proxy39[23:16], slice_proxy38[31:24], slice_proxy37[39:32], slice_proxy36[47:40]};
assign main_ethcore_arp_rx_depacketizer_source_payload_error = main_ethcore_arp_rx_depacketizer_sink_payload_error;
always @(*) begin
	main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd0;
	main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 <= 1'd0;
	main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 <= 1'd0;
	main_ethcore_arp_rx_depacketizer_source_valid <= 1'd0;
	main_ethcore_arp_rx_depacketizer_sr_shift <= 1'd0;
	main_ethcore_arp_rx_depacketizer_sr_shift_leftover <= 1'd0;
	main_ethcore_arp_rx_depacketizer_source_last <= 1'd0;
	main_ethcore_arp_rx_depacketizer_source_payload_data <= 8'd0;
	main_ethcore_arp_rx_depacketizer_sink_ready <= 1'd0;
	clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 2'd0;
	main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value0 <= 5'd0;
	clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_state;
	case (clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_state)
		1'd1: begin
			main_ethcore_arp_rx_depacketizer_sink_ready <= 1'd1;
			if (main_ethcore_arp_rx_depacketizer_sink_valid) begin
				main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value0 <= (main_ethcore_arp_rx_depacketizer_count + 1'd1);
				main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd1;
				main_ethcore_arp_rx_depacketizer_sr_shift <= 1'd1;
				if ((main_ethcore_arp_rx_depacketizer_count == 5'd27)) begin
					if (1'd0) begin
						main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value0 <= (main_ethcore_arp_rx_depacketizer_count + 1'd1);
						main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd1;
						clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			main_ethcore_arp_rx_depacketizer_source_valid <= (main_ethcore_arp_rx_depacketizer_sink_valid | main_ethcore_arp_rx_depacketizer_sink_d_last);
			main_ethcore_arp_rx_depacketizer_source_last <= (main_ethcore_arp_rx_depacketizer_sink_last | main_ethcore_arp_rx_depacketizer_sink_d_last);
			main_ethcore_arp_rx_depacketizer_sink_ready <= main_ethcore_arp_rx_depacketizer_source_ready;
			main_ethcore_arp_rx_depacketizer_source_payload_data <= main_ethcore_arp_rx_depacketizer_sink_d_payload_data[7:0];
			main_ethcore_arp_rx_depacketizer_source_payload_data[7] <= main_ethcore_arp_rx_depacketizer_sink_payload_data;
			if (main_ethcore_arp_rx_depacketizer_fsm_from_idle) begin
				main_ethcore_arp_rx_depacketizer_source_valid <= main_ethcore_arp_rx_depacketizer_sink_d_last;
				main_ethcore_arp_rx_depacketizer_sink_ready <= 1'd1;
				if (main_ethcore_arp_rx_depacketizer_sink_valid) begin
					main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 <= 1'd0;
					main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 <= 1'd1;
					main_ethcore_arp_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((main_ethcore_arp_rx_depacketizer_source_valid & main_ethcore_arp_rx_depacketizer_source_ready)) begin
				if (main_ethcore_arp_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_arp_rx_depacketizer_source_valid <= (main_ethcore_arp_rx_depacketizer_sink_valid | main_ethcore_arp_rx_depacketizer_sink_d_last);
			main_ethcore_arp_rx_depacketizer_source_last <= (main_ethcore_arp_rx_depacketizer_sink_last | main_ethcore_arp_rx_depacketizer_sink_d_last);
			main_ethcore_arp_rx_depacketizer_sink_ready <= main_ethcore_arp_rx_depacketizer_source_ready;
			main_ethcore_arp_rx_depacketizer_source_payload_data <= main_ethcore_arp_rx_depacketizer_sink_payload_data;
			if ((main_ethcore_arp_rx_depacketizer_source_valid & main_ethcore_arp_rx_depacketizer_source_ready)) begin
				if (main_ethcore_arp_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_arp_rx_depacketizer_sink_ready <= 1'd1;
			main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value0 <= 1'd1;
			main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value_ce0 <= 1'd1;
			if (main_ethcore_arp_rx_depacketizer_sink_valid) begin
				main_ethcore_arp_rx_depacketizer_sr_shift <= 1'd1;
				main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1 <= 1'd1;
				main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 2'd3;
					end
				end else begin
					clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_ethcore_arp_rx_source_source_payload_request <= 1'd0;
	main_ethcore_arp_rx_source_source_valid <= 1'd0;
	clockdomainsrenamer_liteetharprx_fsm_next_state <= 2'd0;
	main_ethcore_arp_rx_depacketizer_source_ready <= 1'd0;
	main_ethcore_arp_rx_source_source_payload_reply <= 1'd0;
	clockdomainsrenamer_liteetharprx_fsm_next_state <= clockdomainsrenamer_liteetharprx_fsm_state;
	case (clockdomainsrenamer_liteetharprx_fsm_state)
		1'd1: begin
			if (main_ethcore_arp_rx_valid) begin
				main_ethcore_arp_rx_source_source_valid <= 1'd1;
				main_ethcore_arp_rx_source_source_payload_reply <= main_ethcore_arp_rx_reply;
				main_ethcore_arp_rx_source_source_payload_request <= main_ethcore_arp_rx_request;
			end
			clockdomainsrenamer_liteetharprx_fsm_next_state <= 2'd2;
		end
		2'd2: begin
			main_ethcore_arp_rx_depacketizer_source_ready <= 1'd1;
			if ((main_ethcore_arp_rx_depacketizer_source_valid & main_ethcore_arp_rx_depacketizer_source_last)) begin
				clockdomainsrenamer_liteetharprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_arp_rx_depacketizer_source_ready <= 1'd1;
			if (main_ethcore_arp_rx_depacketizer_source_valid) begin
				main_ethcore_arp_rx_depacketizer_source_ready <= 1'd0;
				clockdomainsrenamer_liteetharprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_arp_table_request_timer_wait = (main_ethcore_arp_table_request_pending & (~main_ethcore_arp_table_request_counter_ce));
assign main_ethcore_arp_table_cached_timer_wait = (~main_ethcore_arp_table_update);
assign main_ethcore_arp_table_response_payload_mac_address = main_ethcore_arp_table_cached_mac_address;
assign main_ethcore_arp_table_request_timer_done = (main_ethcore_arp_table_request_timer_count == 1'd0);
assign main_ethcore_arp_table_cached_timer_done = (main_ethcore_arp_table_cached_timer_count == 1'd0);
always @(*) begin
	main_ethcore_arp_table_source_valid <= 1'd0;
	main_ethcore_arp_table_request_counter_reset <= 1'd0;
	main_ethcore_arp_table_response_payload_failed <= 1'd0;
	main_ethcore_arp_table_request_counter_ce <= 1'd0;
	main_ethcore_arp_table_source_payload_reply <= 1'd0;
	main_ethcore_arp_table_request_pending_clr <= 1'd0;
	main_ethcore_arp_table_source_payload_request <= 1'd0;
	main_ethcore_arp_table_update <= 1'd0;
	main_ethcore_arp_table_source_payload_ip_address <= 32'd0;
	main_ethcore_arp_table_request_pending_set <= 1'd0;
	main_ethcore_arp_table_source_payload_mac_address <= 48'd0;
	main_ethcore_arp_table_request_ip_address_reset <= 1'd0;
	main_ethcore_arp_table_request_ready <= 1'd0;
	main_ethcore_arp_table_request_ip_address_update <= 1'd0;
	clockdomainsrenamer_next_state <= 3'd0;
	main_ethcore_arp_table_response_valid <= 1'd0;
	if ((main_ethcore_arp_table_request_counter == 3'd7)) begin
		main_ethcore_arp_table_response_payload_failed <= 1'd1;
		main_ethcore_arp_table_request_counter_reset <= 1'd1;
		main_ethcore_arp_table_request_pending_clr <= 1'd1;
	end
	clockdomainsrenamer_next_state <= clockdomainsrenamer_state;
	case (clockdomainsrenamer_state)
		1'd1: begin
			main_ethcore_arp_table_source_valid <= 1'd1;
			main_ethcore_arp_table_source_payload_reply <= 1'd1;
			main_ethcore_arp_table_source_payload_ip_address <= main_ethcore_arp_table_sink_payload_ip_address;
			main_ethcore_arp_table_source_payload_mac_address <= main_ethcore_arp_table_sink_payload_mac_address;
			if (main_ethcore_arp_table_source_ready) begin
				clockdomainsrenamer_next_state <= 1'd0;
			end
		end
		2'd2: begin
			main_ethcore_arp_table_request_pending_clr <= 1'd1;
			main_ethcore_arp_table_update <= 1'd1;
			clockdomainsrenamer_next_state <= 2'd3;
		end
		2'd3: begin
			if (main_ethcore_arp_table_cached_valid) begin
				if ((main_ethcore_arp_table_request_ip_address == main_ethcore_arp_table_cached_ip_address)) begin
					main_ethcore_arp_table_request_ip_address_reset <= 1'd1;
					clockdomainsrenamer_next_state <= 3'd5;
				end else begin
					if ((main_ethcore_arp_table_request_payload_ip_address == main_ethcore_arp_table_cached_ip_address)) begin
						main_ethcore_arp_table_request_ready <= main_ethcore_arp_table_request_valid;
						clockdomainsrenamer_next_state <= 3'd5;
					end else begin
						main_ethcore_arp_table_request_ip_address_update <= main_ethcore_arp_table_request_valid;
						clockdomainsrenamer_next_state <= 3'd4;
					end
				end
			end else begin
				main_ethcore_arp_table_request_ip_address_update <= main_ethcore_arp_table_request_valid;
				clockdomainsrenamer_next_state <= 3'd4;
			end
		end
		3'd4: begin
			main_ethcore_arp_table_source_valid <= 1'd1;
			main_ethcore_arp_table_source_payload_request <= 1'd1;
			main_ethcore_arp_table_source_payload_ip_address <= main_ethcore_arp_table_request_ip_address;
			if (main_ethcore_arp_table_source_ready) begin
				main_ethcore_arp_table_request_counter_reset <= main_ethcore_arp_table_request_valid;
				main_ethcore_arp_table_request_counter_ce <= 1'd1;
				main_ethcore_arp_table_request_pending_set <= 1'd1;
				main_ethcore_arp_table_request_ready <= 1'd1;
				clockdomainsrenamer_next_state <= 1'd0;
			end
		end
		3'd5: begin
			main_ethcore_arp_table_response_valid <= 1'd1;
			if (main_ethcore_arp_table_response_ready) begin
				clockdomainsrenamer_next_state <= 1'd0;
			end
		end
		default: begin
			if ((main_ethcore_arp_table_sink_valid & main_ethcore_arp_table_sink_payload_request)) begin
				clockdomainsrenamer_next_state <= 1'd1;
			end else begin
				if (((main_ethcore_arp_table_sink_valid & main_ethcore_arp_table_sink_payload_reply) & main_ethcore_arp_table_request_pending)) begin
					clockdomainsrenamer_next_state <= 2'd2;
				end else begin
					if ((main_ethcore_arp_table_request_counter == 3'd7)) begin
						clockdomainsrenamer_next_state <= 3'd5;
					end else begin
						if ((main_ethcore_arp_table_request_valid | (main_ethcore_arp_table_request_pending & main_ethcore_arp_table_request_timer_done))) begin
							clockdomainsrenamer_next_state <= 2'd3;
						end
					end
				end
			end
		end
	endcase
end
assign main_ethcore_ip_mac_port_sink_valid = main_ethcore_ip_tx_source_source_valid;
assign main_ethcore_ip_tx_source_source_ready = main_ethcore_ip_mac_port_sink_ready;
assign main_ethcore_ip_mac_port_sink_first = main_ethcore_ip_tx_source_source_first;
assign main_ethcore_ip_mac_port_sink_last = main_ethcore_ip_tx_source_source_last;
assign main_ethcore_ip_mac_port_sink_payload_ethernet_type = main_ethcore_ip_tx_source_source_payload_ethernet_type;
assign main_ethcore_ip_mac_port_sink_payload_sender_mac = main_ethcore_ip_tx_source_source_payload_sender_mac;
assign main_ethcore_ip_mac_port_sink_payload_target_mac = main_ethcore_ip_tx_source_source_payload_target_mac;
assign main_ethcore_ip_mac_port_sink_payload_data = main_ethcore_ip_tx_source_source_payload_data;
assign main_ethcore_ip_mac_port_sink_payload_last_be = main_ethcore_ip_tx_source_source_payload_last_be;
assign main_ethcore_ip_mac_port_sink_payload_error = main_ethcore_ip_tx_source_source_payload_error;
assign main_ethcore_ip_rx_sink_sink_valid = main_ethcore_ip_mac_port_source_valid;
assign main_ethcore_ip_mac_port_source_ready = main_ethcore_ip_rx_sink_sink_ready;
assign main_ethcore_ip_rx_sink_sink_first = main_ethcore_ip_mac_port_source_first;
assign main_ethcore_ip_rx_sink_sink_last = main_ethcore_ip_mac_port_source_last;
assign main_ethcore_ip_rx_sink_sink_payload_ethernet_type = main_ethcore_ip_mac_port_source_payload_ethernet_type;
assign main_ethcore_ip_rx_sink_sink_payload_sender_mac = main_ethcore_ip_mac_port_source_payload_sender_mac;
assign main_ethcore_ip_rx_sink_sink_payload_target_mac = main_ethcore_ip_mac_port_source_payload_target_mac;
assign main_ethcore_ip_rx_sink_sink_payload_data = main_ethcore_ip_mac_port_source_payload_data;
assign main_ethcore_ip_rx_sink_sink_payload_last_be = main_ethcore_ip_mac_port_source_payload_last_be;
assign main_ethcore_ip_rx_sink_sink_payload_error = main_ethcore_ip_mac_port_source_payload_error;
assign main_ethcore_ip_tx_sink_sink_valid = main_ethcore_ip_crossbar_source_valid;
assign main_ethcore_ip_crossbar_source_ready = main_ethcore_ip_tx_sink_sink_ready;
assign main_ethcore_ip_tx_sink_sink_first = main_ethcore_ip_crossbar_source_first;
assign main_ethcore_ip_tx_sink_sink_last = main_ethcore_ip_crossbar_source_last;
assign main_ethcore_ip_tx_sink_sink_payload_data = main_ethcore_ip_crossbar_source_payload_data;
assign main_ethcore_ip_tx_sink_sink_payload_error = main_ethcore_ip_crossbar_source_payload_error;
assign main_ethcore_ip_tx_sink_sink_param_length = main_ethcore_ip_crossbar_source_param_length;
assign main_ethcore_ip_tx_sink_sink_param_protocol = main_ethcore_ip_crossbar_source_param_protocol;
assign main_ethcore_ip_tx_sink_sink_param_ip_address = main_ethcore_ip_crossbar_source_param_ip_address;
assign main_ethcore_ip_crossbar_sink_valid = main_ethcore_ip_rx_source_source_valid;
assign main_ethcore_ip_rx_source_source_ready = main_ethcore_ip_crossbar_sink_ready;
assign main_ethcore_ip_crossbar_sink_first = main_ethcore_ip_rx_source_source_first;
assign main_ethcore_ip_crossbar_sink_last = main_ethcore_ip_rx_source_source_last;
assign main_ethcore_ip_crossbar_sink_payload_data = main_ethcore_ip_rx_source_source_payload_data;
assign main_ethcore_ip_crossbar_sink_payload_error = main_ethcore_ip_rx_source_source_payload_error;
assign main_ethcore_ip_crossbar_sink_param_length = main_ethcore_ip_rx_source_source_param_length;
assign main_ethcore_ip_crossbar_sink_param_protocol = main_ethcore_ip_rx_source_source_param_protocol;
assign main_ethcore_ip_crossbar_sink_param_ip_address = main_ethcore_ip_rx_source_source_param_ip_address;
assign main_ethcore_ip_tx_ce = main_ethcore_ip_tx_sink_sink_valid;
assign main_ethcore_ip_tx_reset = ((main_ethcore_ip_tx_source_source_valid & main_ethcore_ip_tx_source_source_last) & main_ethcore_ip_tx_source_source_ready);
assign main_ethcore_ip_tx_packetizer_sink_valid = (main_ethcore_ip_tx_sink_sink_valid & main_ethcore_ip_tx_liteethipv4checksum_done);
assign main_ethcore_ip_tx_packetizer_sink_last = main_ethcore_ip_tx_sink_sink_last;
assign main_ethcore_ip_tx_sink_sink_ready = (main_ethcore_ip_tx_packetizer_sink_ready & main_ethcore_ip_tx_liteethipv4checksum_done);
assign main_ethcore_ip_tx_packetizer_sink_param_target_ip = main_ethcore_ip_tx_sink_sink_param_ip_address;
assign main_ethcore_ip_tx_packetizer_sink_param_protocol = main_ethcore_ip_tx_sink_sink_param_protocol;
assign main_ethcore_ip_tx_packetizer_sink_param_total_length = (5'd20 + main_ethcore_ip_tx_sink_sink_param_length);
assign main_ethcore_ip_tx_packetizer_sink_param_version = 3'd4;
assign main_ethcore_ip_tx_packetizer_sink_param_ihl = 3'd5;
assign main_ethcore_ip_tx_packetizer_sink_param_identification = 1'd0;
assign main_ethcore_ip_tx_packetizer_sink_param_ttl = 8'd128;
assign main_ethcore_ip_tx_packetizer_sink_param_sender_ip = 32'd3232235796;
assign main_ethcore_ip_tx_packetizer_sink_payload_data = main_ethcore_ip_tx_sink_sink_payload_data;
assign main_ethcore_ip_tx_liteethipv4checksum_header = main_ethcore_ip_tx_packetizer_header;
assign main_ethcore_ip_tx_packetizer_sink_param_checksum = main_ethcore_ip_tx_liteethipv4checksum_value;
assign main_ethcore_arp_table_request_payload_ip_address = main_ethcore_ip_tx_sink_sink_param_ip_address;
assign main_ethcore_ip_tx_liteethipv4checksum_s_next0 = (main_ethcore_ip_tx_liteethipv4checksum_r + main_ethcore_ip_tx_liteethipv4checksum_header[15:0]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next1 = (main_ethcore_ip_tx_liteethipv4checksum_r_next0 + main_ethcore_ip_tx_liteethipv4checksum_header[31:16]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next2 = (main_ethcore_ip_tx_liteethipv4checksum_r_next1 + main_ethcore_ip_tx_liteethipv4checksum_header[47:32]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next3 = (main_ethcore_ip_tx_liteethipv4checksum_r_next2 + main_ethcore_ip_tx_liteethipv4checksum_header[63:48]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next4 = (main_ethcore_ip_tx_liteethipv4checksum_r_next3 + main_ethcore_ip_tx_liteethipv4checksum_header[79:64]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next5 = (main_ethcore_ip_tx_liteethipv4checksum_r_next4 + main_ethcore_ip_tx_liteethipv4checksum_header[111:96]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next6 = (main_ethcore_ip_tx_liteethipv4checksum_r_next5 + main_ethcore_ip_tx_liteethipv4checksum_header[127:112]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next7 = (main_ethcore_ip_tx_liteethipv4checksum_r_next6 + main_ethcore_ip_tx_liteethipv4checksum_header[143:128]);
assign main_ethcore_ip_tx_liteethipv4checksum_s_next8 = (main_ethcore_ip_tx_liteethipv4checksum_r_next7 + main_ethcore_ip_tx_liteethipv4checksum_header[159:144]);
assign main_ethcore_ip_tx_liteethipv4checksum_value = (~{main_ethcore_ip_tx_liteethipv4checksum_r_next8[7:0], main_ethcore_ip_tx_liteethipv4checksum_r_next8[15:8]});
assign main_ethcore_ip_tx_liteethipv4checksum_counter_ce = (~main_ethcore_ip_tx_liteethipv4checksum_done);
assign main_ethcore_ip_tx_liteethipv4checksum_done = (main_ethcore_ip_tx_liteethipv4checksum_counter == 4'd9);
always @(*) begin
	main_ethcore_ip_tx_packetizer_header <= 160'd0;
	main_ethcore_ip_tx_packetizer_header[95:80] <= {main_ethcore_ip_tx_packetizer_sink_param_checksum[7:0], main_ethcore_ip_tx_packetizer_sink_param_checksum[15:8]};
	main_ethcore_ip_tx_packetizer_header[47:32] <= {main_ethcore_ip_tx_packetizer_sink_param_identification[7:0], main_ethcore_ip_tx_packetizer_sink_param_identification[15:8]};
	main_ethcore_ip_tx_packetizer_header[3:0] <= {main_ethcore_ip_tx_packetizer_sink_param_ihl[3:0]};
	main_ethcore_ip_tx_packetizer_header[79:72] <= {main_ethcore_ip_tx_packetizer_sink_param_protocol[7:0]};
	main_ethcore_ip_tx_packetizer_header[127:96] <= {main_ethcore_ip_tx_packetizer_sink_param_sender_ip[7:0], main_ethcore_ip_tx_packetizer_sink_param_sender_ip[15:8], main_ethcore_ip_tx_packetizer_sink_param_sender_ip[23:16], main_ethcore_ip_tx_packetizer_sink_param_sender_ip[31:24]};
	main_ethcore_ip_tx_packetizer_header[159:128] <= {main_ethcore_ip_tx_packetizer_sink_param_target_ip[7:0], main_ethcore_ip_tx_packetizer_sink_param_target_ip[15:8], main_ethcore_ip_tx_packetizer_sink_param_target_ip[23:16], main_ethcore_ip_tx_packetizer_sink_param_target_ip[31:24]};
	main_ethcore_ip_tx_packetizer_header[31:16] <= {main_ethcore_ip_tx_packetizer_sink_param_total_length[7:0], main_ethcore_ip_tx_packetizer_sink_param_total_length[15:8]};
	main_ethcore_ip_tx_packetizer_header[71:64] <= {main_ethcore_ip_tx_packetizer_sink_param_ttl[7:0]};
	main_ethcore_ip_tx_packetizer_header[7:4] <= {main_ethcore_ip_tx_packetizer_sink_param_version[3:0]};
end
assign main_ethcore_ip_tx_packetizer_source_payload_error = main_ethcore_ip_tx_packetizer_sink_payload_error;
always @(*) begin
	main_ethcore_ip_tx_packetizer_source_last <= 1'd0;
	main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 <= 1'd0;
	main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 <= 1'd0;
	main_ethcore_ip_tx_packetizer_source_payload_data <= 8'd0;
	main_ethcore_ip_tx_packetizer_source_valid <= 1'd0;
	main_ethcore_ip_tx_packetizer_sr_load <= 1'd0;
	main_ethcore_ip_tx_packetizer_sr_shift <= 1'd0;
	clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd0;
	main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= 5'd0;
	main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd0;
	main_ethcore_ip_tx_packetizer_sink_ready <= 1'd0;
	clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_state;
	case (clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_state)
		1'd1: begin
			main_ethcore_ip_tx_packetizer_source_valid <= 1'd1;
			main_ethcore_ip_tx_packetizer_source_last <= 1'd0;
			main_ethcore_ip_tx_packetizer_source_payload_data <= main_ethcore_ip_tx_packetizer_sr[159:8];
			if ((main_ethcore_ip_tx_packetizer_source_valid & main_ethcore_ip_tx_packetizer_source_ready)) begin
				main_ethcore_ip_tx_packetizer_sr_shift <= 1'd1;
				if ((main_ethcore_ip_tx_packetizer_count == 5'd19)) begin
					main_ethcore_ip_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd3;
						main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= (main_ethcore_ip_tx_packetizer_count + 1'd1);
						main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd1;
					end else begin
						clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd2;
					end
				end else begin
					main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= (main_ethcore_ip_tx_packetizer_count + 1'd1);
					main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_ethcore_ip_tx_packetizer_source_valid <= main_ethcore_ip_tx_packetizer_sink_valid;
			main_ethcore_ip_tx_packetizer_source_last <= main_ethcore_ip_tx_packetizer_sink_last;
			main_ethcore_ip_tx_packetizer_source_payload_data <= main_ethcore_ip_tx_packetizer_sink_payload_data;
			if ((main_ethcore_ip_tx_packetizer_source_valid & main_ethcore_ip_tx_packetizer_source_ready)) begin
				main_ethcore_ip_tx_packetizer_sink_ready <= 1'd1;
				if (main_ethcore_ip_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_ip_tx_packetizer_source_valid <= (main_ethcore_ip_tx_packetizer_sink_valid | main_ethcore_ip_tx_packetizer_sink_d_last);
			main_ethcore_ip_tx_packetizer_source_last <= main_ethcore_ip_tx_packetizer_sink_d_last;
			if (main_ethcore_ip_tx_packetizer_fsm_from_idle) begin
				main_ethcore_ip_tx_packetizer_source_payload_data[0] <= main_ethcore_ip_tx_packetizer_sr[159:16];
			end else begin
				main_ethcore_ip_tx_packetizer_source_payload_data[0] <= main_ethcore_ip_tx_packetizer_sink_d_payload_data[7];
			end
			main_ethcore_ip_tx_packetizer_source_payload_data[7:0] <= main_ethcore_ip_tx_packetizer_sink_payload_data;
			if ((main_ethcore_ip_tx_packetizer_source_valid & main_ethcore_ip_tx_packetizer_source_ready)) begin
				main_ethcore_ip_tx_packetizer_sink_ready <= (~main_ethcore_ip_tx_packetizer_source_last);
				main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 <= 1'd0;
				main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 <= 1'd1;
				if (main_ethcore_ip_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_ip_tx_packetizer_sink_ready <= 1'd1;
			main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0 <= 1'd1;
			main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0 <= 1'd1;
			if (main_ethcore_ip_tx_packetizer_sink_valid) begin
				main_ethcore_ip_tx_packetizer_sink_ready <= 1'd0;
				main_ethcore_ip_tx_packetizer_source_valid <= 1'd1;
				main_ethcore_ip_tx_packetizer_source_last <= 1'd0;
				main_ethcore_ip_tx_packetizer_source_payload_data <= main_ethcore_ip_tx_packetizer_header[7:0];
				if ((main_ethcore_ip_tx_packetizer_source_valid & main_ethcore_ip_tx_packetizer_source_ready)) begin
					main_ethcore_ip_tx_packetizer_sr_load <= 1'd1;
					main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1 <= 1'd1;
					main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd3;
						end else begin
							clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 2'd2;
						end
					end else begin
						clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_ethcore_ip_tx_source_source_valid <= 1'd0;
	main_ethcore_ip_tx_source_source_first <= 1'd0;
	main_ethcore_ip_tx_source_source_last <= 1'd0;
	main_ethcore_ip_tx_source_source_payload_ethernet_type <= 16'd0;
	main_ethcore_ip_tx_packetizer_source_ready <= 1'd0;
	main_ethcore_ip_tx_source_source_payload_sender_mac <= 48'd0;
	main_ethcore_ip_tx_source_source_payload_target_mac <= 48'd0;
	main_ethcore_ip_tx_source_source_payload_data <= 8'd0;
	main_ethcore_ip_tx_source_source_payload_last_be <= 1'd0;
	clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 3'd0;
	main_ethcore_ip_tx_source_source_payload_error <= 1'd0;
	main_ethcore_ip_tx_target_unreachable <= 1'd0;
	main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value <= 48'd0;
	main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value_ce <= 1'd0;
	main_ethcore_arp_table_request_valid <= 1'd0;
	main_ethcore_arp_table_response_ready <= 1'd0;
	clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= clockdomainsrenamer_liteethip_liteethiptx_fsm_state;
	case (clockdomainsrenamer_liteethip_liteethiptx_fsm_state)
		1'd1: begin
			main_ethcore_arp_table_request_valid <= 1'd1;
			if ((main_ethcore_arp_table_request_valid & main_ethcore_arp_table_request_ready)) begin
				clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (main_ethcore_arp_table_response_valid) begin
				main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value <= main_ethcore_arp_table_response_payload_mac_address;
				main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value_ce <= 1'd1;
				main_ethcore_arp_table_response_ready <= 1'd1;
				if (main_ethcore_arp_table_response_payload_failed) begin
					main_ethcore_ip_tx_target_unreachable <= 1'd1;
					clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 3'd4;
				end else begin
					clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			main_ethcore_ip_tx_source_source_valid <= main_ethcore_ip_tx_packetizer_source_valid;
			main_ethcore_ip_tx_packetizer_source_ready <= main_ethcore_ip_tx_source_source_ready;
			main_ethcore_ip_tx_source_source_first <= main_ethcore_ip_tx_packetizer_source_first;
			main_ethcore_ip_tx_source_source_last <= main_ethcore_ip_tx_packetizer_source_last;
			main_ethcore_ip_tx_source_source_payload_ethernet_type <= main_ethcore_ip_tx_packetizer_source_payload_ethernet_type;
			main_ethcore_ip_tx_source_source_payload_sender_mac <= main_ethcore_ip_tx_packetizer_source_payload_sender_mac;
			main_ethcore_ip_tx_source_source_payload_target_mac <= main_ethcore_ip_tx_packetizer_source_payload_target_mac;
			main_ethcore_ip_tx_source_source_payload_data <= main_ethcore_ip_tx_packetizer_source_payload_data;
			main_ethcore_ip_tx_source_source_payload_last_be <= main_ethcore_ip_tx_packetizer_source_payload_last_be;
			main_ethcore_ip_tx_source_source_payload_error <= main_ethcore_ip_tx_packetizer_source_payload_error;
			main_ethcore_ip_tx_source_source_payload_ethernet_type <= 12'd2048;
			main_ethcore_ip_tx_source_source_payload_target_mac <= main_ethcore_ip_tx_target_mac;
			main_ethcore_ip_tx_source_source_payload_sender_mac <= 47'd125806191559394;
			if (((main_ethcore_ip_tx_source_source_valid & main_ethcore_ip_tx_source_source_last) & main_ethcore_ip_tx_source_source_ready)) begin
				clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 1'd0;
			end
		end
		3'd4: begin
			main_ethcore_ip_tx_packetizer_source_ready <= 1'd1;
			if (((main_ethcore_ip_tx_packetizer_source_valid & main_ethcore_ip_tx_packetizer_source_last) & main_ethcore_ip_tx_packetizer_source_ready)) begin
				clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_ip_tx_packetizer_source_ready <= 1'd1;
			if (main_ethcore_ip_tx_packetizer_source_valid) begin
				main_ethcore_ip_tx_packetizer_source_ready <= 1'd0;
				if ((main_ethcore_ip_tx_sink_sink_param_ip_address[31:28] == 4'd14)) begin
					main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value <= {24'd65630, 1'd0, main_ethcore_ip_tx_sink_sink_param_ip_address[22:0]};
					main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value_ce <= 1'd1;
					clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 2'd3;
				end else begin
					clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign main_ethcore_ip_rx_depacketizer_sink_valid = main_ethcore_ip_rx_sink_sink_valid;
assign main_ethcore_ip_rx_sink_sink_ready = main_ethcore_ip_rx_depacketizer_sink_ready;
assign main_ethcore_ip_rx_depacketizer_sink_first = main_ethcore_ip_rx_sink_sink_first;
assign main_ethcore_ip_rx_depacketizer_sink_last = main_ethcore_ip_rx_sink_sink_last;
assign main_ethcore_ip_rx_depacketizer_sink_payload_ethernet_type = main_ethcore_ip_rx_sink_sink_payload_ethernet_type;
assign main_ethcore_ip_rx_depacketizer_sink_payload_sender_mac = main_ethcore_ip_rx_sink_sink_payload_sender_mac;
assign main_ethcore_ip_rx_depacketizer_sink_payload_target_mac = main_ethcore_ip_rx_sink_sink_payload_target_mac;
assign main_ethcore_ip_rx_depacketizer_sink_payload_data = main_ethcore_ip_rx_sink_sink_payload_data;
assign main_ethcore_ip_rx_depacketizer_sink_payload_last_be = main_ethcore_ip_rx_sink_sink_payload_last_be;
assign main_ethcore_ip_rx_depacketizer_sink_payload_error = main_ethcore_ip_rx_sink_sink_payload_error;
assign main_ethcore_ip_rx_liteethipv4checksum_header = main_ethcore_ip_rx_depacketizer_header;
assign main_ethcore_ip_rx_reset = (~main_ethcore_ip_rx_depacketizer_source_valid);
assign main_ethcore_ip_rx_ce = 1'd1;
assign main_ethcore_ip_rx_source_source_last = main_ethcore_ip_rx_depacketizer_source_last;
assign main_ethcore_ip_rx_source_source_param_length = (main_ethcore_ip_rx_depacketizer_source_param_total_length - 5'd20);
assign main_ethcore_ip_rx_source_source_param_protocol = main_ethcore_ip_rx_depacketizer_source_param_protocol;
assign main_ethcore_ip_rx_source_source_param_ip_address = main_ethcore_ip_rx_depacketizer_source_param_sender_ip;
assign main_ethcore_ip_rx_source_source_payload_data = main_ethcore_ip_rx_depacketizer_source_payload_data;
assign main_ethcore_ip_rx_source_source_payload_error = main_ethcore_ip_rx_depacketizer_source_payload_error;
assign main_ethcore_ip_rx_depacketizer_header = main_ethcore_ip_rx_depacketizer_sr;
assign main_ethcore_ip_rx_depacketizer_source_param_checksum = {slice_proxy43[7:0], slice_proxy42[15:8]};
assign main_ethcore_ip_rx_depacketizer_source_param_identification = {slice_proxy45[7:0], slice_proxy44[15:8]};
assign main_ethcore_ip_rx_depacketizer_source_param_ihl = {slice_proxy46[3:0]};
assign main_ethcore_ip_rx_depacketizer_source_param_protocol = {slice_proxy47[7:0]};
assign main_ethcore_ip_rx_depacketizer_source_param_sender_ip = {slice_proxy51[7:0], slice_proxy50[15:8], slice_proxy49[23:16], slice_proxy48[31:24]};
assign main_ethcore_ip_rx_depacketizer_source_param_target_ip = {slice_proxy55[7:0], slice_proxy54[15:8], slice_proxy53[23:16], slice_proxy52[31:24]};
assign main_ethcore_ip_rx_depacketizer_source_param_total_length = {slice_proxy57[7:0], slice_proxy56[15:8]};
assign main_ethcore_ip_rx_depacketizer_source_param_ttl = {slice_proxy58[7:0]};
assign main_ethcore_ip_rx_depacketizer_source_param_version = {slice_proxy59[3:0]};
assign main_ethcore_ip_rx_depacketizer_source_payload_error = main_ethcore_ip_rx_depacketizer_sink_payload_error;
always @(*) begin
	main_ethcore_ip_rx_depacketizer_sink_ready <= 1'd0;
	clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd0;
	main_ethcore_ip_rx_depacketizer_count_liteethip_next_value0 <= 5'd0;
	main_ethcore_ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd0;
	main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 <= 1'd0;
	main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 <= 1'd0;
	main_ethcore_ip_rx_depacketizer_source_valid <= 1'd0;
	main_ethcore_ip_rx_depacketizer_sr_shift <= 1'd0;
	main_ethcore_ip_rx_depacketizer_sr_shift_leftover <= 1'd0;
	main_ethcore_ip_rx_depacketizer_source_last <= 1'd0;
	main_ethcore_ip_rx_depacketizer_source_payload_data <= 8'd0;
	clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_state;
	case (clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_state)
		1'd1: begin
			main_ethcore_ip_rx_depacketizer_sink_ready <= 1'd1;
			if (main_ethcore_ip_rx_depacketizer_sink_valid) begin
				main_ethcore_ip_rx_depacketizer_count_liteethip_next_value0 <= (main_ethcore_ip_rx_depacketizer_count + 1'd1);
				main_ethcore_ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd1;
				main_ethcore_ip_rx_depacketizer_sr_shift <= 1'd1;
				if ((main_ethcore_ip_rx_depacketizer_count == 5'd19)) begin
					if (1'd0) begin
						main_ethcore_ip_rx_depacketizer_count_liteethip_next_value0 <= (main_ethcore_ip_rx_depacketizer_count + 1'd1);
						main_ethcore_ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd1;
						clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			main_ethcore_ip_rx_depacketizer_source_valid <= (main_ethcore_ip_rx_depacketizer_sink_valid | main_ethcore_ip_rx_depacketizer_sink_d_last);
			main_ethcore_ip_rx_depacketizer_source_last <= (main_ethcore_ip_rx_depacketizer_sink_last | main_ethcore_ip_rx_depacketizer_sink_d_last);
			main_ethcore_ip_rx_depacketizer_sink_ready <= main_ethcore_ip_rx_depacketizer_source_ready;
			main_ethcore_ip_rx_depacketizer_source_payload_data <= main_ethcore_ip_rx_depacketizer_sink_d_payload_data[7:0];
			main_ethcore_ip_rx_depacketizer_source_payload_data[7] <= main_ethcore_ip_rx_depacketizer_sink_payload_data;
			if (main_ethcore_ip_rx_depacketizer_fsm_from_idle) begin
				main_ethcore_ip_rx_depacketizer_source_valid <= main_ethcore_ip_rx_depacketizer_sink_d_last;
				main_ethcore_ip_rx_depacketizer_sink_ready <= 1'd1;
				if (main_ethcore_ip_rx_depacketizer_sink_valid) begin
					main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 <= 1'd0;
					main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 <= 1'd1;
					main_ethcore_ip_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((main_ethcore_ip_rx_depacketizer_source_valid & main_ethcore_ip_rx_depacketizer_source_ready)) begin
				if (main_ethcore_ip_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_ip_rx_depacketizer_source_valid <= (main_ethcore_ip_rx_depacketizer_sink_valid | main_ethcore_ip_rx_depacketizer_sink_d_last);
			main_ethcore_ip_rx_depacketizer_source_last <= (main_ethcore_ip_rx_depacketizer_sink_last | main_ethcore_ip_rx_depacketizer_sink_d_last);
			main_ethcore_ip_rx_depacketizer_sink_ready <= main_ethcore_ip_rx_depacketizer_source_ready;
			main_ethcore_ip_rx_depacketizer_source_payload_data <= main_ethcore_ip_rx_depacketizer_sink_payload_data;
			if ((main_ethcore_ip_rx_depacketizer_source_valid & main_ethcore_ip_rx_depacketizer_source_ready)) begin
				if (main_ethcore_ip_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_ip_rx_depacketizer_sink_ready <= 1'd1;
			main_ethcore_ip_rx_depacketizer_count_liteethip_next_value0 <= 1'd1;
			main_ethcore_ip_rx_depacketizer_count_liteethip_next_value_ce0 <= 1'd1;
			if (main_ethcore_ip_rx_depacketizer_sink_valid) begin
				main_ethcore_ip_rx_depacketizer_sr_shift <= 1'd1;
				main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1 <= 1'd1;
				main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 2'd3;
					end
				end else begin
					clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign main_ethcore_ip_rx_liteethipv4checksum_s_next0 = (main_ethcore_ip_rx_liteethipv4checksum_r + main_ethcore_ip_rx_liteethipv4checksum_header[15:0]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next1 = (main_ethcore_ip_rx_liteethipv4checksum_r_next0 + main_ethcore_ip_rx_liteethipv4checksum_header[31:16]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next2 = (main_ethcore_ip_rx_liteethipv4checksum_r_next1 + main_ethcore_ip_rx_liteethipv4checksum_header[47:32]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next3 = (main_ethcore_ip_rx_liteethipv4checksum_r_next2 + main_ethcore_ip_rx_liteethipv4checksum_header[63:48]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next4 = (main_ethcore_ip_rx_liteethipv4checksum_r_next3 + main_ethcore_ip_rx_liteethipv4checksum_header[79:64]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next5 = (main_ethcore_ip_rx_liteethipv4checksum_r_next4 + main_ethcore_ip_rx_liteethipv4checksum_header[95:80]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next6 = (main_ethcore_ip_rx_liteethipv4checksum_r_next5 + main_ethcore_ip_rx_liteethipv4checksum_header[111:96]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next7 = (main_ethcore_ip_rx_liteethipv4checksum_r_next6 + main_ethcore_ip_rx_liteethipv4checksum_header[127:112]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next8 = (main_ethcore_ip_rx_liteethipv4checksum_r_next7 + main_ethcore_ip_rx_liteethipv4checksum_header[143:128]);
assign main_ethcore_ip_rx_liteethipv4checksum_s_next9 = (main_ethcore_ip_rx_liteethipv4checksum_r_next8 + main_ethcore_ip_rx_liteethipv4checksum_header[159:144]);
assign main_ethcore_ip_rx_liteethipv4checksum_value = (~{main_ethcore_ip_rx_liteethipv4checksum_r_next9[7:0], main_ethcore_ip_rx_liteethipv4checksum_r_next9[15:8]});
assign main_ethcore_ip_rx_liteethipv4checksum_counter_ce = (~main_ethcore_ip_rx_liteethipv4checksum_done);
assign main_ethcore_ip_rx_liteethipv4checksum_done = (main_ethcore_ip_rx_liteethipv4checksum_counter == 4'd11);
always @(*) begin
	main_ethcore_ip_rx_depacketizer_source_ready <= 1'd0;
	clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state <= 2'd0;
	main_ethcore_ip_rx_source_source_valid <= 1'd0;
	clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state <= clockdomainsrenamer_liteethip_liteethiprx_fsm_state;
	case (clockdomainsrenamer_liteethip_liteethiprx_fsm_state)
		1'd1: begin
			if (main_ethcore_ip_rx_liteethipv4checksum_done) begin
				if (main_ethcore_ip_rx_valid) begin
					clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state <= 2'd2;
				end else begin
					clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state <= 2'd3;
				end
			end
		end
		2'd2: begin
			main_ethcore_ip_rx_source_source_valid <= main_ethcore_ip_rx_depacketizer_source_valid;
			main_ethcore_ip_rx_depacketizer_source_ready <= main_ethcore_ip_rx_source_source_ready;
			if (((main_ethcore_ip_rx_source_source_valid & main_ethcore_ip_rx_source_source_last) & main_ethcore_ip_rx_source_source_ready)) begin
				clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state <= 1'd0;
			end
		end
		2'd3: begin
			main_ethcore_ip_rx_depacketizer_source_ready <= 1'd1;
			if (((main_ethcore_ip_rx_depacketizer_source_valid & main_ethcore_ip_rx_depacketizer_source_last) & main_ethcore_ip_rx_depacketizer_source_ready)) begin
				clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_ip_rx_depacketizer_source_ready <= 1'd1;
			if (main_ethcore_ip_rx_depacketizer_source_valid) begin
				main_ethcore_ip_rx_depacketizer_source_ready <= 1'd0;
				clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethip_sel0 <= 2'd0;
	case (main_ethcore_ip_crossbar_sink_param_protocol)
		1'd1: begin
			clockdomainsrenamer_liteethip_sel0 <= 1'd1;
		end
		5'd17: begin
			clockdomainsrenamer_liteethip_sel0 <= 2'd2;
		end
		default: begin
			clockdomainsrenamer_liteethip_sel0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethip_request <= 2'd0;
	clockdomainsrenamer_liteethip_request[0] <= clockdomainsrenamer_liteethip_status0_ongoing0;
	clockdomainsrenamer_liteethip_request[1] <= clockdomainsrenamer_liteethip_status1_ongoing0;
end
always @(*) begin
	main_ethcore_ip_crossbar_source_param_protocol <= 8'd0;
	main_ethcore_ip_crossbar_source_param_ip_address <= 32'd0;
	main_ethcore_icmp_sink_ready <= 1'd0;
	main_ethcore_ip_crossbar_source_valid <= 1'd0;
	main_ethcore_ip_crossbar_source_first <= 1'd0;
	main_ethcore_ip_crossbar_source_last <= 1'd0;
	main_ethcore_ip_port_sink_ready <= 1'd0;
	main_ethcore_ip_crossbar_source_payload_data <= 8'd0;
	main_ethcore_ip_crossbar_source_payload_error <= 1'd0;
	main_ethcore_ip_crossbar_source_param_length <= 16'd0;
	case (clockdomainsrenamer_liteethip_grant)
		1'd0: begin
			main_ethcore_ip_crossbar_source_valid <= main_ethcore_icmp_sink_valid;
			main_ethcore_icmp_sink_ready <= main_ethcore_ip_crossbar_source_ready;
			main_ethcore_ip_crossbar_source_first <= main_ethcore_icmp_sink_first;
			main_ethcore_ip_crossbar_source_last <= main_ethcore_icmp_sink_last;
			main_ethcore_ip_crossbar_source_payload_data <= main_ethcore_icmp_sink_payload_data;
			main_ethcore_ip_crossbar_source_payload_error <= main_ethcore_icmp_sink_payload_error;
			main_ethcore_ip_crossbar_source_param_length <= main_ethcore_icmp_sink_param_length;
			main_ethcore_ip_crossbar_source_param_protocol <= main_ethcore_icmp_sink_param_protocol;
			main_ethcore_ip_crossbar_source_param_ip_address <= main_ethcore_icmp_sink_param_ip_address;
		end
		1'd1: begin
			main_ethcore_ip_crossbar_source_valid <= main_ethcore_ip_port_sink_valid;
			main_ethcore_ip_port_sink_ready <= main_ethcore_ip_crossbar_source_ready;
			main_ethcore_ip_crossbar_source_first <= main_ethcore_ip_port_sink_first;
			main_ethcore_ip_crossbar_source_last <= main_ethcore_ip_port_sink_last;
			main_ethcore_ip_crossbar_source_payload_data <= main_ethcore_ip_port_sink_payload_data;
			main_ethcore_ip_crossbar_source_payload_error <= main_ethcore_ip_port_sink_payload_error;
			main_ethcore_ip_crossbar_source_param_length <= main_ethcore_ip_port_sink_param_length;
			main_ethcore_ip_crossbar_source_param_protocol <= main_ethcore_ip_port_sink_param_protocol;
			main_ethcore_ip_crossbar_source_param_ip_address <= main_ethcore_ip_port_sink_param_ip_address;
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethip_status0_last <= 1'd0;
	if (main_ethcore_icmp_sink_valid) begin
		clockdomainsrenamer_liteethip_status0_last <= (main_ethcore_icmp_sink_last & main_ethcore_icmp_sink_ready);
	end
end
assign clockdomainsrenamer_liteethip_status0_ongoing0 = ((main_ethcore_icmp_sink_valid | clockdomainsrenamer_liteethip_status0_ongoing1) & (~clockdomainsrenamer_liteethip_status0_last));
always @(*) begin
	clockdomainsrenamer_liteethip_status1_last <= 1'd0;
	if (main_ethcore_ip_port_sink_valid) begin
		clockdomainsrenamer_liteethip_status1_last <= (main_ethcore_ip_port_sink_last & main_ethcore_ip_port_sink_ready);
	end
end
assign clockdomainsrenamer_liteethip_status1_ongoing0 = ((main_ethcore_ip_port_sink_valid | clockdomainsrenamer_liteethip_status1_ongoing1) & (~clockdomainsrenamer_liteethip_status1_last));
always @(*) begin
	clockdomainsrenamer_liteethip_sel1 <= 2'd0;
	if (clockdomainsrenamer_liteethip_first) begin
		clockdomainsrenamer_liteethip_sel1 <= clockdomainsrenamer_liteethip_sel0;
	end else begin
		clockdomainsrenamer_liteethip_sel1 <= clockdomainsrenamer_liteethip_sel_ongoing;
	end
end
always @(*) begin
	main_ethcore_icmp_source_first <= 1'd0;
	main_ethcore_icmp_source_last <= 1'd0;
	main_ethcore_icmp_source_payload_data <= 8'd0;
	main_ethcore_icmp_source_payload_error <= 1'd0;
	main_ethcore_icmp_source_param_length <= 16'd0;
	main_ethcore_icmp_source_param_protocol <= 8'd0;
	main_ethcore_icmp_source_param_ip_address <= 32'd0;
	main_ethcore_ip_crossbar_sink_ready <= 1'd0;
	main_ethcore_ip_port_source_valid <= 1'd0;
	main_ethcore_ip_port_source_first <= 1'd0;
	main_ethcore_ip_port_source_last <= 1'd0;
	main_ethcore_ip_port_source_payload_data <= 8'd0;
	main_ethcore_ip_port_source_payload_error <= 1'd0;
	main_ethcore_ip_port_source_param_length <= 16'd0;
	main_ethcore_ip_port_source_param_protocol <= 8'd0;
	main_ethcore_ip_port_source_param_ip_address <= 32'd0;
	main_ethcore_icmp_source_valid <= 1'd0;
	case (clockdomainsrenamer_liteethip_sel1)
		1'd1: begin
			main_ethcore_icmp_source_valid <= main_ethcore_ip_crossbar_sink_valid;
			main_ethcore_ip_crossbar_sink_ready <= main_ethcore_icmp_source_ready;
			main_ethcore_icmp_source_first <= main_ethcore_ip_crossbar_sink_first;
			main_ethcore_icmp_source_last <= main_ethcore_ip_crossbar_sink_last;
			main_ethcore_icmp_source_payload_data <= main_ethcore_ip_crossbar_sink_payload_data;
			main_ethcore_icmp_source_payload_error <= main_ethcore_ip_crossbar_sink_payload_error;
			main_ethcore_icmp_source_param_length <= main_ethcore_ip_crossbar_sink_param_length;
			main_ethcore_icmp_source_param_protocol <= main_ethcore_ip_crossbar_sink_param_protocol;
			main_ethcore_icmp_source_param_ip_address <= main_ethcore_ip_crossbar_sink_param_ip_address;
		end
		2'd2: begin
			main_ethcore_ip_port_source_valid <= main_ethcore_ip_crossbar_sink_valid;
			main_ethcore_ip_crossbar_sink_ready <= main_ethcore_ip_port_source_ready;
			main_ethcore_ip_port_source_first <= main_ethcore_ip_crossbar_sink_first;
			main_ethcore_ip_port_source_last <= main_ethcore_ip_crossbar_sink_last;
			main_ethcore_ip_port_source_payload_data <= main_ethcore_ip_crossbar_sink_payload_data;
			main_ethcore_ip_port_source_payload_error <= main_ethcore_ip_crossbar_sink_payload_error;
			main_ethcore_ip_port_source_param_length <= main_ethcore_ip_crossbar_sink_param_length;
			main_ethcore_ip_port_source_param_protocol <= main_ethcore_ip_crossbar_sink_param_protocol;
			main_ethcore_ip_port_source_param_ip_address <= main_ethcore_ip_crossbar_sink_param_ip_address;
		end
		default: begin
			main_ethcore_ip_crossbar_sink_ready <= 1'd1;
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethip_last <= 1'd0;
	if (main_ethcore_ip_crossbar_sink_valid) begin
		clockdomainsrenamer_liteethip_last <= (main_ethcore_ip_crossbar_sink_last & main_ethcore_ip_crossbar_sink_ready);
	end
end
assign clockdomainsrenamer_liteethip_ongoing0 = ((main_ethcore_ip_crossbar_sink_valid | clockdomainsrenamer_liteethip_ongoing1) & (~clockdomainsrenamer_liteethip_last));
assign main_ethcore_icmp_echo_sink_sink_valid = main_ethcore_icmp_rx_source_source_valid;
assign main_ethcore_icmp_rx_source_source_ready = main_ethcore_icmp_echo_sink_sink_ready;
assign main_ethcore_icmp_echo_sink_sink_first = main_ethcore_icmp_rx_source_source_first;
assign main_ethcore_icmp_echo_sink_sink_last = main_ethcore_icmp_rx_source_source_last;
assign main_ethcore_icmp_echo_sink_sink_payload_data = main_ethcore_icmp_rx_source_source_payload_data;
assign main_ethcore_icmp_echo_sink_sink_payload_error = main_ethcore_icmp_rx_source_source_payload_error;
assign main_ethcore_icmp_echo_sink_sink_param_checksum = main_ethcore_icmp_rx_source_source_param_checksum;
assign main_ethcore_icmp_echo_sink_sink_param_code = main_ethcore_icmp_rx_source_source_param_code;
assign main_ethcore_icmp_echo_sink_sink_param_msgtype = main_ethcore_icmp_rx_source_source_param_msgtype;
assign main_ethcore_icmp_echo_sink_sink_param_quench = main_ethcore_icmp_rx_source_source_param_quench;
assign main_ethcore_icmp_echo_sink_sink_param_ip_address = main_ethcore_icmp_rx_source_source_param_ip_address;
assign main_ethcore_icmp_echo_sink_sink_param_length = main_ethcore_icmp_rx_source_source_param_length;
assign main_ethcore_icmp_tx_sink_sink_valid = main_ethcore_icmp_echo_source_source_valid;
assign main_ethcore_icmp_echo_source_source_ready = main_ethcore_icmp_tx_sink_sink_ready;
assign main_ethcore_icmp_tx_sink_sink_first = main_ethcore_icmp_echo_source_source_first;
assign main_ethcore_icmp_tx_sink_sink_last = main_ethcore_icmp_echo_source_source_last;
assign main_ethcore_icmp_tx_sink_sink_payload_data = main_ethcore_icmp_echo_source_source_payload_data;
assign main_ethcore_icmp_tx_sink_sink_payload_error = main_ethcore_icmp_echo_source_source_payload_error;
assign main_ethcore_icmp_tx_sink_sink_param_checksum = main_ethcore_icmp_echo_source_source_param_checksum;
assign main_ethcore_icmp_tx_sink_sink_param_code = main_ethcore_icmp_echo_source_source_param_code;
assign main_ethcore_icmp_tx_sink_sink_param_msgtype = main_ethcore_icmp_echo_source_source_param_msgtype;
assign main_ethcore_icmp_tx_sink_sink_param_quench = main_ethcore_icmp_echo_source_source_param_quench;
assign main_ethcore_icmp_tx_sink_sink_param_ip_address = main_ethcore_icmp_echo_source_source_param_ip_address;
assign main_ethcore_icmp_tx_sink_sink_param_length = main_ethcore_icmp_echo_source_source_param_length;
assign main_ethcore_icmp_sink_valid = main_ethcore_icmp_tx_source_source_valid;
assign main_ethcore_icmp_tx_source_source_ready = main_ethcore_icmp_sink_ready;
assign main_ethcore_icmp_sink_first = main_ethcore_icmp_tx_source_source_first;
assign main_ethcore_icmp_sink_last = main_ethcore_icmp_tx_source_source_last;
assign main_ethcore_icmp_sink_payload_data = main_ethcore_icmp_tx_source_source_payload_data;
assign main_ethcore_icmp_sink_payload_error = main_ethcore_icmp_tx_source_source_payload_error;
assign main_ethcore_icmp_sink_param_length = main_ethcore_icmp_tx_source_source_param_length;
assign main_ethcore_icmp_sink_param_protocol = main_ethcore_icmp_tx_source_source_param_protocol;
assign main_ethcore_icmp_sink_param_ip_address = main_ethcore_icmp_tx_source_source_param_ip_address;
assign main_ethcore_icmp_rx_sink_sink_valid = main_ethcore_icmp_source_valid;
assign main_ethcore_icmp_source_ready = main_ethcore_icmp_rx_sink_sink_ready;
assign main_ethcore_icmp_rx_sink_sink_first = main_ethcore_icmp_source_first;
assign main_ethcore_icmp_rx_sink_sink_last = main_ethcore_icmp_source_last;
assign main_ethcore_icmp_rx_sink_sink_payload_data = main_ethcore_icmp_source_payload_data;
assign main_ethcore_icmp_rx_sink_sink_payload_error = main_ethcore_icmp_source_payload_error;
assign main_ethcore_icmp_rx_sink_sink_param_length = main_ethcore_icmp_source_param_length;
assign main_ethcore_icmp_rx_sink_sink_param_protocol = main_ethcore_icmp_source_param_protocol;
assign main_ethcore_icmp_rx_sink_sink_param_ip_address = main_ethcore_icmp_source_param_ip_address;
assign main_ethcore_icmp_tx_packetizer_sink_valid = main_ethcore_icmp_tx_sink_sink_valid;
assign main_ethcore_icmp_tx_packetizer_sink_last = main_ethcore_icmp_tx_sink_sink_last;
assign main_ethcore_icmp_tx_sink_sink_ready = main_ethcore_icmp_tx_packetizer_sink_ready;
assign main_ethcore_icmp_tx_packetizer_sink_param_msgtype = main_ethcore_icmp_tx_sink_sink_param_msgtype;
assign main_ethcore_icmp_tx_packetizer_sink_param_code = main_ethcore_icmp_tx_sink_sink_param_code;
assign main_ethcore_icmp_tx_packetizer_sink_param_checksum = main_ethcore_icmp_tx_sink_sink_param_checksum;
assign main_ethcore_icmp_tx_packetizer_sink_param_quench = main_ethcore_icmp_tx_sink_sink_param_quench;
assign main_ethcore_icmp_tx_packetizer_sink_payload_data = main_ethcore_icmp_tx_sink_sink_payload_data;
always @(*) begin
	main_ethcore_icmp_tx_packetizer_header <= 64'd0;
	main_ethcore_icmp_tx_packetizer_header[31:16] <= {main_ethcore_icmp_tx_packetizer_sink_param_checksum[7:0], main_ethcore_icmp_tx_packetizer_sink_param_checksum[15:8]};
	main_ethcore_icmp_tx_packetizer_header[15:8] <= {main_ethcore_icmp_tx_packetizer_sink_param_code[7:0]};
	main_ethcore_icmp_tx_packetizer_header[7:0] <= {main_ethcore_icmp_tx_packetizer_sink_param_msgtype[7:0]};
	main_ethcore_icmp_tx_packetizer_header[63:32] <= {main_ethcore_icmp_tx_packetizer_sink_param_quench[7:0], main_ethcore_icmp_tx_packetizer_sink_param_quench[15:8], main_ethcore_icmp_tx_packetizer_sink_param_quench[23:16], main_ethcore_icmp_tx_packetizer_sink_param_quench[31:24]};
end
assign main_ethcore_icmp_tx_packetizer_source_payload_error = main_ethcore_icmp_tx_packetizer_sink_payload_error;
always @(*) begin
	main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd0;
	main_ethcore_icmp_tx_packetizer_sink_ready <= 1'd0;
	main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 <= 1'd0;
	main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 <= 1'd0;
	main_ethcore_icmp_tx_packetizer_sr_load <= 1'd0;
	main_ethcore_icmp_tx_packetizer_sr_shift <= 1'd0;
	clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 2'd0;
	main_ethcore_icmp_tx_packetizer_source_valid <= 1'd0;
	main_ethcore_icmp_tx_packetizer_source_last <= 1'd0;
	main_ethcore_icmp_tx_packetizer_source_payload_data <= 8'd0;
	main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value0 <= 3'd0;
	clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_state;
	case (clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_state)
		1'd1: begin
			main_ethcore_icmp_tx_packetizer_source_valid <= 1'd1;
			main_ethcore_icmp_tx_packetizer_source_last <= 1'd0;
			main_ethcore_icmp_tx_packetizer_source_payload_data <= main_ethcore_icmp_tx_packetizer_sr[63:8];
			if ((main_ethcore_icmp_tx_packetizer_source_valid & main_ethcore_icmp_tx_packetizer_source_ready)) begin
				main_ethcore_icmp_tx_packetizer_sr_shift <= 1'd1;
				if ((main_ethcore_icmp_tx_packetizer_count == 3'd7)) begin
					main_ethcore_icmp_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 2'd3;
						main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value0 <= (main_ethcore_icmp_tx_packetizer_count + 1'd1);
						main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd1;
					end else begin
						clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 2'd2;
					end
				end else begin
					main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value0 <= (main_ethcore_icmp_tx_packetizer_count + 1'd1);
					main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_ethcore_icmp_tx_packetizer_source_valid <= main_ethcore_icmp_tx_packetizer_sink_valid;
			main_ethcore_icmp_tx_packetizer_source_last <= main_ethcore_icmp_tx_packetizer_sink_last;
			main_ethcore_icmp_tx_packetizer_source_payload_data <= main_ethcore_icmp_tx_packetizer_sink_payload_data;
			if ((main_ethcore_icmp_tx_packetizer_source_valid & main_ethcore_icmp_tx_packetizer_source_ready)) begin
				main_ethcore_icmp_tx_packetizer_sink_ready <= 1'd1;
				if (main_ethcore_icmp_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_icmp_tx_packetizer_source_valid <= (main_ethcore_icmp_tx_packetizer_sink_valid | main_ethcore_icmp_tx_packetizer_sink_d_last);
			main_ethcore_icmp_tx_packetizer_source_last <= main_ethcore_icmp_tx_packetizer_sink_d_last;
			if (main_ethcore_icmp_tx_packetizer_fsm_from_idle) begin
				main_ethcore_icmp_tx_packetizer_source_payload_data[0] <= main_ethcore_icmp_tx_packetizer_sr[63:16];
			end else begin
				main_ethcore_icmp_tx_packetizer_source_payload_data[0] <= main_ethcore_icmp_tx_packetizer_sink_d_payload_data[7];
			end
			main_ethcore_icmp_tx_packetizer_source_payload_data[7:0] <= main_ethcore_icmp_tx_packetizer_sink_payload_data;
			if ((main_ethcore_icmp_tx_packetizer_source_valid & main_ethcore_icmp_tx_packetizer_source_ready)) begin
				main_ethcore_icmp_tx_packetizer_sink_ready <= (~main_ethcore_icmp_tx_packetizer_source_last);
				main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 <= 1'd0;
				main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 <= 1'd1;
				if (main_ethcore_icmp_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_icmp_tx_packetizer_sink_ready <= 1'd1;
			main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value0 <= 1'd1;
			main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value_ce0 <= 1'd1;
			if (main_ethcore_icmp_tx_packetizer_sink_valid) begin
				main_ethcore_icmp_tx_packetizer_sink_ready <= 1'd0;
				main_ethcore_icmp_tx_packetizer_source_valid <= 1'd1;
				main_ethcore_icmp_tx_packetizer_source_last <= 1'd0;
				main_ethcore_icmp_tx_packetizer_source_payload_data <= main_ethcore_icmp_tx_packetizer_header[7:0];
				if ((main_ethcore_icmp_tx_packetizer_source_valid & main_ethcore_icmp_tx_packetizer_source_ready)) begin
					main_ethcore_icmp_tx_packetizer_sr_load <= 1'd1;
					main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1 <= 1'd1;
					main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 2'd3;
						end else begin
							clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 2'd2;
						end
					end else begin
						clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethicmptx_fsm_next_state <= 1'd0;
	main_ethcore_icmp_tx_source_source_valid <= 1'd0;
	main_ethcore_icmp_tx_source_source_first <= 1'd0;
	main_ethcore_icmp_tx_source_source_last <= 1'd0;
	main_ethcore_icmp_tx_packetizer_source_ready <= 1'd0;
	main_ethcore_icmp_tx_source_source_payload_data <= 8'd0;
	main_ethcore_icmp_tx_source_source_payload_error <= 1'd0;
	main_ethcore_icmp_tx_source_source_param_length <= 16'd0;
	main_ethcore_icmp_tx_source_source_param_protocol <= 8'd0;
	main_ethcore_icmp_tx_source_source_param_ip_address <= 32'd0;
	clockdomainsrenamer_liteethicmptx_fsm_next_state <= clockdomainsrenamer_liteethicmptx_fsm_state;
	case (clockdomainsrenamer_liteethicmptx_fsm_state)
		1'd1: begin
			main_ethcore_icmp_tx_source_source_valid <= main_ethcore_icmp_tx_packetizer_source_valid;
			main_ethcore_icmp_tx_packetizer_source_ready <= main_ethcore_icmp_tx_source_source_ready;
			main_ethcore_icmp_tx_source_source_first <= main_ethcore_icmp_tx_packetizer_source_first;
			main_ethcore_icmp_tx_source_source_last <= main_ethcore_icmp_tx_packetizer_source_last;
			main_ethcore_icmp_tx_source_source_payload_data <= main_ethcore_icmp_tx_packetizer_source_payload_data;
			main_ethcore_icmp_tx_source_source_payload_error <= main_ethcore_icmp_tx_packetizer_source_payload_error;
			main_ethcore_icmp_tx_source_source_param_length <= main_ethcore_icmp_tx_packetizer_source_param_length;
			main_ethcore_icmp_tx_source_source_param_protocol <= main_ethcore_icmp_tx_packetizer_source_param_protocol;
			main_ethcore_icmp_tx_source_source_param_ip_address <= main_ethcore_icmp_tx_packetizer_source_param_ip_address;
			main_ethcore_icmp_tx_source_source_param_length <= (main_ethcore_icmp_tx_sink_sink_param_length + 4'd8);
			main_ethcore_icmp_tx_source_source_param_protocol <= 1'd1;
			main_ethcore_icmp_tx_source_source_param_ip_address <= main_ethcore_icmp_tx_sink_sink_param_ip_address;
			if (((main_ethcore_icmp_tx_source_source_valid & main_ethcore_icmp_tx_source_source_last) & main_ethcore_icmp_tx_source_source_ready)) begin
				clockdomainsrenamer_liteethicmptx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_icmp_tx_packetizer_source_ready <= 1'd1;
			if (main_ethcore_icmp_tx_packetizer_source_valid) begin
				main_ethcore_icmp_tx_packetizer_source_ready <= 1'd0;
				clockdomainsrenamer_liteethicmptx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_icmp_rx_depacketizer_sink_valid = main_ethcore_icmp_rx_sink_sink_valid;
assign main_ethcore_icmp_rx_sink_sink_ready = main_ethcore_icmp_rx_depacketizer_sink_ready;
assign main_ethcore_icmp_rx_depacketizer_sink_first = main_ethcore_icmp_rx_sink_sink_first;
assign main_ethcore_icmp_rx_depacketizer_sink_last = main_ethcore_icmp_rx_sink_sink_last;
assign main_ethcore_icmp_rx_depacketizer_sink_payload_data = main_ethcore_icmp_rx_sink_sink_payload_data;
assign main_ethcore_icmp_rx_depacketizer_sink_payload_error = main_ethcore_icmp_rx_sink_sink_payload_error;
assign main_ethcore_icmp_rx_depacketizer_sink_param_length = main_ethcore_icmp_rx_sink_sink_param_length;
assign main_ethcore_icmp_rx_depacketizer_sink_param_protocol = main_ethcore_icmp_rx_sink_sink_param_protocol;
assign main_ethcore_icmp_rx_depacketizer_sink_param_ip_address = main_ethcore_icmp_rx_sink_sink_param_ip_address;
assign main_ethcore_icmp_rx_source_source_last = main_ethcore_icmp_rx_depacketizer_source_last;
assign main_ethcore_icmp_rx_source_source_param_msgtype = main_ethcore_icmp_rx_depacketizer_source_param_msgtype;
assign main_ethcore_icmp_rx_source_source_param_code = main_ethcore_icmp_rx_depacketizer_source_param_code;
assign main_ethcore_icmp_rx_source_source_param_checksum = main_ethcore_icmp_rx_depacketizer_source_param_checksum;
assign main_ethcore_icmp_rx_source_source_param_quench = main_ethcore_icmp_rx_depacketizer_source_param_quench;
assign main_ethcore_icmp_rx_source_source_param_ip_address = main_ethcore_icmp_rx_sink_sink_param_ip_address;
assign main_ethcore_icmp_rx_source_source_param_length = (main_ethcore_icmp_rx_sink_sink_param_length - 4'd8);
assign main_ethcore_icmp_rx_source_source_payload_data = main_ethcore_icmp_rx_depacketizer_source_payload_data;
assign main_ethcore_icmp_rx_source_source_payload_error = main_ethcore_icmp_rx_depacketizer_source_payload_error;
assign main_ethcore_icmp_rx_depacketizer_header = main_ethcore_icmp_rx_depacketizer_sr;
assign main_ethcore_icmp_rx_depacketizer_source_param_checksum = {slice_proxy61[7:0], slice_proxy60[15:8]};
assign main_ethcore_icmp_rx_depacketizer_source_param_code = {slice_proxy62[7:0]};
assign main_ethcore_icmp_rx_depacketizer_source_param_msgtype = {slice_proxy63[7:0]};
assign main_ethcore_icmp_rx_depacketizer_source_param_quench = {slice_proxy67[7:0], slice_proxy66[15:8], slice_proxy65[23:16], slice_proxy64[31:24]};
assign main_ethcore_icmp_rx_depacketizer_source_payload_error = main_ethcore_icmp_rx_depacketizer_sink_payload_error;
always @(*) begin
	main_ethcore_icmp_rx_depacketizer_source_last <= 1'd0;
	main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 <= 1'd0;
	main_ethcore_icmp_rx_depacketizer_source_valid <= 1'd0;
	main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 <= 1'd0;
	main_ethcore_icmp_rx_depacketizer_source_payload_data <= 8'd0;
	main_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd0;
	main_ethcore_icmp_rx_depacketizer_sr_shift <= 1'd0;
	main_ethcore_icmp_rx_depacketizer_sr_shift_leftover <= 1'd0;
	clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd0;
	main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= 3'd0;
	main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd0;
	clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_state;
	case (clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_state)
		1'd1: begin
			main_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd1;
			if (main_ethcore_icmp_rx_depacketizer_sink_valid) begin
				main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= (main_ethcore_icmp_rx_depacketizer_count + 1'd1);
				main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd1;
				main_ethcore_icmp_rx_depacketizer_sr_shift <= 1'd1;
				if ((main_ethcore_icmp_rx_depacketizer_count == 3'd7)) begin
					if (1'd0) begin
						main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= (main_ethcore_icmp_rx_depacketizer_count + 1'd1);
						main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd1;
						clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			main_ethcore_icmp_rx_depacketizer_source_valid <= (main_ethcore_icmp_rx_depacketizer_sink_valid | main_ethcore_icmp_rx_depacketizer_sink_d_last);
			main_ethcore_icmp_rx_depacketizer_source_last <= (main_ethcore_icmp_rx_depacketizer_sink_last | main_ethcore_icmp_rx_depacketizer_sink_d_last);
			main_ethcore_icmp_rx_depacketizer_sink_ready <= main_ethcore_icmp_rx_depacketizer_source_ready;
			main_ethcore_icmp_rx_depacketizer_source_payload_data <= main_ethcore_icmp_rx_depacketizer_sink_d_payload_data[7:0];
			main_ethcore_icmp_rx_depacketizer_source_payload_data[7] <= main_ethcore_icmp_rx_depacketizer_sink_payload_data;
			if (main_ethcore_icmp_rx_depacketizer_fsm_from_idle) begin
				main_ethcore_icmp_rx_depacketizer_source_valid <= main_ethcore_icmp_rx_depacketizer_sink_d_last;
				main_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd1;
				if (main_ethcore_icmp_rx_depacketizer_sink_valid) begin
					main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 <= 1'd0;
					main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 <= 1'd1;
					main_ethcore_icmp_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((main_ethcore_icmp_rx_depacketizer_source_valid & main_ethcore_icmp_rx_depacketizer_source_ready)) begin
				if (main_ethcore_icmp_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_icmp_rx_depacketizer_source_valid <= (main_ethcore_icmp_rx_depacketizer_sink_valid | main_ethcore_icmp_rx_depacketizer_sink_d_last);
			main_ethcore_icmp_rx_depacketizer_source_last <= (main_ethcore_icmp_rx_depacketizer_sink_last | main_ethcore_icmp_rx_depacketizer_sink_d_last);
			main_ethcore_icmp_rx_depacketizer_sink_ready <= main_ethcore_icmp_rx_depacketizer_source_ready;
			main_ethcore_icmp_rx_depacketizer_source_payload_data <= main_ethcore_icmp_rx_depacketizer_sink_payload_data;
			if ((main_ethcore_icmp_rx_depacketizer_source_valid & main_ethcore_icmp_rx_depacketizer_source_ready)) begin
				if (main_ethcore_icmp_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_icmp_rx_depacketizer_sink_ready <= 1'd1;
			main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value0 <= 1'd1;
			main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0 <= 1'd1;
			if (main_ethcore_icmp_rx_depacketizer_sink_valid) begin
				main_ethcore_icmp_rx_depacketizer_sr_shift <= 1'd1;
				main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1 <= 1'd1;
				main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 2'd3;
					end
				end else begin
					clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_ethcore_icmp_rx_source_source_valid <= 1'd0;
	main_ethcore_icmp_rx_depacketizer_source_ready <= 1'd0;
	clockdomainsrenamer_liteethicmprx_fsm_next_state <= 2'd0;
	clockdomainsrenamer_liteethicmprx_fsm_next_state <= clockdomainsrenamer_liteethicmprx_fsm_state;
	case (clockdomainsrenamer_liteethicmprx_fsm_state)
		1'd1: begin
			if (main_ethcore_icmp_rx_valid) begin
				clockdomainsrenamer_liteethicmprx_fsm_next_state <= 2'd2;
			end else begin
				clockdomainsrenamer_liteethicmprx_fsm_next_state <= 2'd3;
			end
		end
		2'd2: begin
			main_ethcore_icmp_rx_source_source_valid <= main_ethcore_icmp_rx_depacketizer_source_valid;
			main_ethcore_icmp_rx_depacketizer_source_ready <= main_ethcore_icmp_rx_source_source_ready;
			if (((main_ethcore_icmp_rx_source_source_valid & main_ethcore_icmp_rx_source_source_last) & main_ethcore_icmp_rx_source_source_ready)) begin
				clockdomainsrenamer_liteethicmprx_fsm_next_state <= 1'd0;
			end
		end
		2'd3: begin
			main_ethcore_icmp_rx_depacketizer_source_ready <= 1'd1;
			if (((main_ethcore_icmp_rx_depacketizer_source_valid & main_ethcore_icmp_rx_depacketizer_source_last) & main_ethcore_icmp_rx_depacketizer_source_ready)) begin
				clockdomainsrenamer_liteethicmprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_icmp_rx_depacketizer_source_ready <= 1'd1;
			if (main_ethcore_icmp_rx_depacketizer_source_valid) begin
				main_ethcore_icmp_rx_depacketizer_source_ready <= 1'd0;
				clockdomainsrenamer_liteethicmprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_icmp_echo_buffer_sink_valid = main_ethcore_icmp_echo_sink_sink_valid;
assign main_ethcore_icmp_echo_sink_sink_ready = main_ethcore_icmp_echo_buffer_sink_ready;
assign main_ethcore_icmp_echo_buffer_sink_first = main_ethcore_icmp_echo_sink_sink_first;
assign main_ethcore_icmp_echo_buffer_sink_last = main_ethcore_icmp_echo_sink_sink_last;
assign main_ethcore_icmp_echo_buffer_sink_payload_data = main_ethcore_icmp_echo_sink_sink_payload_data;
assign main_ethcore_icmp_echo_buffer_sink_payload_error = main_ethcore_icmp_echo_sink_sink_payload_error;
assign main_ethcore_icmp_echo_buffer_sink_param_checksum = main_ethcore_icmp_echo_sink_sink_param_checksum;
assign main_ethcore_icmp_echo_buffer_sink_param_code = main_ethcore_icmp_echo_sink_sink_param_code;
assign main_ethcore_icmp_echo_buffer_sink_param_msgtype = main_ethcore_icmp_echo_sink_sink_param_msgtype;
assign main_ethcore_icmp_echo_buffer_sink_param_quench = main_ethcore_icmp_echo_sink_sink_param_quench;
assign main_ethcore_icmp_echo_buffer_sink_param_ip_address = main_ethcore_icmp_echo_sink_sink_param_ip_address;
assign main_ethcore_icmp_echo_buffer_sink_param_length = main_ethcore_icmp_echo_sink_sink_param_length;
assign main_ethcore_icmp_echo_source_source_valid = main_ethcore_icmp_echo_buffer_source_valid;
assign main_ethcore_icmp_echo_buffer_source_ready = main_ethcore_icmp_echo_source_source_ready;
assign main_ethcore_icmp_echo_source_source_first = main_ethcore_icmp_echo_buffer_source_first;
assign main_ethcore_icmp_echo_source_source_last = main_ethcore_icmp_echo_buffer_source_last;
assign main_ethcore_icmp_echo_source_source_payload_data = main_ethcore_icmp_echo_buffer_source_payload_data;
assign main_ethcore_icmp_echo_source_source_payload_error = main_ethcore_icmp_echo_buffer_source_payload_error;
assign main_ethcore_icmp_echo_source_source_param_code = main_ethcore_icmp_echo_buffer_source_param_code;
assign main_ethcore_icmp_echo_source_source_param_quench = main_ethcore_icmp_echo_buffer_source_param_quench;
assign main_ethcore_icmp_echo_source_source_param_ip_address = main_ethcore_icmp_echo_buffer_source_param_ip_address;
assign main_ethcore_icmp_echo_source_source_param_length = main_ethcore_icmp_echo_buffer_source_param_length;
always @(*) begin
	main_ethcore_icmp_echo_source_source_param_msgtype <= 8'd0;
	main_ethcore_icmp_echo_source_source_param_msgtype <= main_ethcore_icmp_echo_buffer_source_param_msgtype;
	main_ethcore_icmp_echo_source_source_param_msgtype <= 1'd0;
end
always @(*) begin
	main_ethcore_icmp_echo_source_source_param_checksum <= 16'd0;
	main_ethcore_icmp_echo_source_source_param_checksum <= main_ethcore_icmp_echo_buffer_source_param_checksum;
	main_ethcore_icmp_echo_source_source_param_checksum <= ((main_ethcore_icmp_echo_buffer_source_param_checksum + 12'd2048) + (main_ethcore_icmp_echo_buffer_source_param_checksum >= 16'd63488));
end
assign main_ethcore_icmp_echo_buffer_syncfifo_din = {main_ethcore_icmp_echo_buffer_fifo_in_last, main_ethcore_icmp_echo_buffer_fifo_in_first, main_ethcore_icmp_echo_buffer_fifo_in_param_length, main_ethcore_icmp_echo_buffer_fifo_in_param_ip_address, main_ethcore_icmp_echo_buffer_fifo_in_param_quench, main_ethcore_icmp_echo_buffer_fifo_in_param_msgtype, main_ethcore_icmp_echo_buffer_fifo_in_param_code, main_ethcore_icmp_echo_buffer_fifo_in_param_checksum, main_ethcore_icmp_echo_buffer_fifo_in_payload_error, main_ethcore_icmp_echo_buffer_fifo_in_payload_data};
assign {main_ethcore_icmp_echo_buffer_fifo_out_last, main_ethcore_icmp_echo_buffer_fifo_out_first, main_ethcore_icmp_echo_buffer_fifo_out_param_length, main_ethcore_icmp_echo_buffer_fifo_out_param_ip_address, main_ethcore_icmp_echo_buffer_fifo_out_param_quench, main_ethcore_icmp_echo_buffer_fifo_out_param_msgtype, main_ethcore_icmp_echo_buffer_fifo_out_param_code, main_ethcore_icmp_echo_buffer_fifo_out_param_checksum, main_ethcore_icmp_echo_buffer_fifo_out_payload_error, main_ethcore_icmp_echo_buffer_fifo_out_payload_data} = main_ethcore_icmp_echo_buffer_syncfifo_dout;
assign main_ethcore_icmp_echo_buffer_sink_ready = main_ethcore_icmp_echo_buffer_syncfifo_writable;
assign main_ethcore_icmp_echo_buffer_syncfifo_we = main_ethcore_icmp_echo_buffer_sink_valid;
assign main_ethcore_icmp_echo_buffer_fifo_in_first = main_ethcore_icmp_echo_buffer_sink_first;
assign main_ethcore_icmp_echo_buffer_fifo_in_last = main_ethcore_icmp_echo_buffer_sink_last;
assign main_ethcore_icmp_echo_buffer_fifo_in_payload_data = main_ethcore_icmp_echo_buffer_sink_payload_data;
assign main_ethcore_icmp_echo_buffer_fifo_in_payload_error = main_ethcore_icmp_echo_buffer_sink_payload_error;
assign main_ethcore_icmp_echo_buffer_fifo_in_param_checksum = main_ethcore_icmp_echo_buffer_sink_param_checksum;
assign main_ethcore_icmp_echo_buffer_fifo_in_param_code = main_ethcore_icmp_echo_buffer_sink_param_code;
assign main_ethcore_icmp_echo_buffer_fifo_in_param_msgtype = main_ethcore_icmp_echo_buffer_sink_param_msgtype;
assign main_ethcore_icmp_echo_buffer_fifo_in_param_quench = main_ethcore_icmp_echo_buffer_sink_param_quench;
assign main_ethcore_icmp_echo_buffer_fifo_in_param_ip_address = main_ethcore_icmp_echo_buffer_sink_param_ip_address;
assign main_ethcore_icmp_echo_buffer_fifo_in_param_length = main_ethcore_icmp_echo_buffer_sink_param_length;
assign main_ethcore_icmp_echo_buffer_source_valid = main_ethcore_icmp_echo_buffer_readable;
assign main_ethcore_icmp_echo_buffer_source_first = main_ethcore_icmp_echo_buffer_fifo_out_first;
assign main_ethcore_icmp_echo_buffer_source_last = main_ethcore_icmp_echo_buffer_fifo_out_last;
assign main_ethcore_icmp_echo_buffer_source_payload_data = main_ethcore_icmp_echo_buffer_fifo_out_payload_data;
assign main_ethcore_icmp_echo_buffer_source_payload_error = main_ethcore_icmp_echo_buffer_fifo_out_payload_error;
assign main_ethcore_icmp_echo_buffer_source_param_checksum = main_ethcore_icmp_echo_buffer_fifo_out_param_checksum;
assign main_ethcore_icmp_echo_buffer_source_param_code = main_ethcore_icmp_echo_buffer_fifo_out_param_code;
assign main_ethcore_icmp_echo_buffer_source_param_msgtype = main_ethcore_icmp_echo_buffer_fifo_out_param_msgtype;
assign main_ethcore_icmp_echo_buffer_source_param_quench = main_ethcore_icmp_echo_buffer_fifo_out_param_quench;
assign main_ethcore_icmp_echo_buffer_source_param_ip_address = main_ethcore_icmp_echo_buffer_fifo_out_param_ip_address;
assign main_ethcore_icmp_echo_buffer_source_param_length = main_ethcore_icmp_echo_buffer_fifo_out_param_length;
assign main_ethcore_icmp_echo_buffer_re = main_ethcore_icmp_echo_buffer_source_ready;
assign main_ethcore_icmp_echo_buffer_syncfifo_re = (main_ethcore_icmp_echo_buffer_syncfifo_readable & ((~main_ethcore_icmp_echo_buffer_readable) | main_ethcore_icmp_echo_buffer_re));
assign main_ethcore_icmp_echo_buffer_level1 = (main_ethcore_icmp_echo_buffer_level0 + main_ethcore_icmp_echo_buffer_readable);
always @(*) begin
	main_ethcore_icmp_echo_buffer_wrport_adr <= 7'd0;
	if (main_ethcore_icmp_echo_buffer_replace) begin
		main_ethcore_icmp_echo_buffer_wrport_adr <= (main_ethcore_icmp_echo_buffer_produce - 1'd1);
	end else begin
		main_ethcore_icmp_echo_buffer_wrport_adr <= main_ethcore_icmp_echo_buffer_produce;
	end
end
assign main_ethcore_icmp_echo_buffer_wrport_dat_w = main_ethcore_icmp_echo_buffer_syncfifo_din;
assign main_ethcore_icmp_echo_buffer_wrport_we = (main_ethcore_icmp_echo_buffer_syncfifo_we & (main_ethcore_icmp_echo_buffer_syncfifo_writable | main_ethcore_icmp_echo_buffer_replace));
assign main_ethcore_icmp_echo_buffer_do_read = (main_ethcore_icmp_echo_buffer_syncfifo_readable & main_ethcore_icmp_echo_buffer_syncfifo_re);
assign main_ethcore_icmp_echo_buffer_rdport_adr = main_ethcore_icmp_echo_buffer_consume;
assign main_ethcore_icmp_echo_buffer_syncfifo_dout = main_ethcore_icmp_echo_buffer_rdport_dat_r;
assign main_ethcore_icmp_echo_buffer_rdport_re = main_ethcore_icmp_echo_buffer_do_read;
assign main_ethcore_icmp_echo_buffer_syncfifo_writable = (main_ethcore_icmp_echo_buffer_level0 != 8'd128);
assign main_ethcore_icmp_echo_buffer_syncfifo_readable = (main_ethcore_icmp_echo_buffer_level0 != 1'd0);
assign main_ethcore_ip_port_sink_valid = main_ethcore_tx_source_source_valid;
assign main_ethcore_tx_source_source_ready = main_ethcore_ip_port_sink_ready;
assign main_ethcore_ip_port_sink_first = main_ethcore_tx_source_source_first;
assign main_ethcore_ip_port_sink_last = main_ethcore_tx_source_source_last;
assign main_ethcore_ip_port_sink_payload_data = main_ethcore_tx_source_source_payload_data;
assign main_ethcore_ip_port_sink_payload_error = main_ethcore_tx_source_source_payload_error;
assign main_ethcore_ip_port_sink_param_length = main_ethcore_tx_source_source_param_length;
assign main_ethcore_ip_port_sink_param_protocol = main_ethcore_tx_source_source_param_protocol;
assign main_ethcore_ip_port_sink_param_ip_address = main_ethcore_tx_source_source_param_ip_address;
assign main_ethcore_rx_sink_sink_valid = main_ethcore_ip_port_source_valid;
assign main_ethcore_ip_port_source_ready = main_ethcore_rx_sink_sink_ready;
assign main_ethcore_rx_sink_sink_first = main_ethcore_ip_port_source_first;
assign main_ethcore_rx_sink_sink_last = main_ethcore_ip_port_source_last;
assign main_ethcore_rx_sink_sink_payload_data = main_ethcore_ip_port_source_payload_data;
assign main_ethcore_rx_sink_sink_payload_error = main_ethcore_ip_port_source_payload_error;
assign main_ethcore_rx_sink_sink_param_length = main_ethcore_ip_port_source_param_length;
assign main_ethcore_rx_sink_sink_param_protocol = main_ethcore_ip_port_source_param_protocol;
assign main_ethcore_rx_sink_sink_param_ip_address = main_ethcore_ip_port_source_param_ip_address;
assign main_ethcore_tx_sink_sink_valid = main_ethcore_crossbar_source_valid;
assign main_ethcore_crossbar_source_ready = main_ethcore_tx_sink_sink_ready;
assign main_ethcore_tx_sink_sink_first = main_ethcore_crossbar_source_first;
assign main_ethcore_tx_sink_sink_last = main_ethcore_crossbar_source_last;
assign main_ethcore_tx_sink_sink_payload_data = main_ethcore_crossbar_source_payload_data;
assign main_ethcore_tx_sink_sink_payload_error = main_ethcore_crossbar_source_payload_error;
assign main_ethcore_tx_sink_sink_param_src_port = main_ethcore_crossbar_source_param_src_port;
assign main_ethcore_tx_sink_sink_param_dst_port = main_ethcore_crossbar_source_param_dst_port;
assign main_ethcore_tx_sink_sink_param_ip_address = main_ethcore_crossbar_source_param_ip_address;
assign main_ethcore_tx_sink_sink_param_length = main_ethcore_crossbar_source_param_length;
assign main_ethcore_crossbar_sink_valid = main_ethcore_rx_source_source_valid;
assign main_ethcore_rx_source_source_ready = main_ethcore_crossbar_sink_ready;
assign main_ethcore_crossbar_sink_first = main_ethcore_rx_source_source_first;
assign main_ethcore_crossbar_sink_last = main_ethcore_rx_source_source_last;
assign main_ethcore_crossbar_sink_payload_data = main_ethcore_rx_source_source_payload_data;
assign main_ethcore_crossbar_sink_payload_error = main_ethcore_rx_source_source_payload_error;
assign main_ethcore_crossbar_sink_param_src_port = main_ethcore_rx_source_source_param_src_port;
assign main_ethcore_crossbar_sink_param_dst_port = main_ethcore_rx_source_source_param_dst_port;
assign main_ethcore_crossbar_sink_param_ip_address = main_ethcore_rx_source_source_param_ip_address;
assign main_ethcore_crossbar_sink_param_length = main_ethcore_rx_source_source_param_length;
assign main_ethcore_tx_packetizer_sink_valid = main_ethcore_tx_sink_sink_valid;
assign main_ethcore_tx_packetizer_sink_last = main_ethcore_tx_sink_sink_last;
assign main_ethcore_tx_sink_sink_ready = main_ethcore_tx_packetizer_sink_ready;
assign main_ethcore_tx_packetizer_sink_param_src_port = main_ethcore_tx_sink_sink_param_src_port;
assign main_ethcore_tx_packetizer_sink_param_dst_port = main_ethcore_tx_sink_sink_param_dst_port;
assign main_ethcore_tx_packetizer_sink_param_length = (main_ethcore_tx_sink_sink_param_length + 4'd8);
assign main_ethcore_tx_packetizer_sink_param_checksum = 1'd0;
assign main_ethcore_tx_packetizer_sink_payload_data = main_ethcore_tx_sink_sink_payload_data;
always @(*) begin
	main_ethcore_tx_packetizer_header <= 64'd0;
	main_ethcore_tx_packetizer_header[63:48] <= {main_ethcore_tx_packetizer_sink_param_checksum[7:0], main_ethcore_tx_packetizer_sink_param_checksum[15:8]};
	main_ethcore_tx_packetizer_header[31:16] <= {main_ethcore_tx_packetizer_sink_param_dst_port[7:0], main_ethcore_tx_packetizer_sink_param_dst_port[15:8]};
	main_ethcore_tx_packetizer_header[47:32] <= {main_ethcore_tx_packetizer_sink_param_length[7:0], main_ethcore_tx_packetizer_sink_param_length[15:8]};
	main_ethcore_tx_packetizer_header[15:0] <= {main_ethcore_tx_packetizer_sink_param_src_port[7:0], main_ethcore_tx_packetizer_sink_param_src_port[15:8]};
end
assign main_ethcore_tx_packetizer_source_payload_error = main_ethcore_tx_packetizer_sink_payload_error;
always @(*) begin
	main_ethcore_tx_packetizer_sr_shift <= 1'd0;
	main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value1 <= 1'd0;
	main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 <= 1'd0;
	main_ethcore_tx_packetizer_source_valid <= 1'd0;
	main_ethcore_tx_packetizer_source_last <= 1'd0;
	main_ethcore_tx_packetizer_source_payload_data <= 8'd0;
	main_ethcore_tx_packetizer_sink_ready <= 1'd0;
	clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd0;
	main_ethcore_tx_packetizer_count_liteethudptx_next_value0 <= 3'd0;
	main_ethcore_tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd0;
	main_ethcore_tx_packetizer_sr_load <= 1'd0;
	clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_state;
	case (clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_state)
		1'd1: begin
			main_ethcore_tx_packetizer_source_valid <= 1'd1;
			main_ethcore_tx_packetizer_source_last <= 1'd0;
			main_ethcore_tx_packetizer_source_payload_data <= main_ethcore_tx_packetizer_sr[63:8];
			if ((main_ethcore_tx_packetizer_source_valid & main_ethcore_tx_packetizer_source_ready)) begin
				main_ethcore_tx_packetizer_sr_shift <= 1'd1;
				if ((main_ethcore_tx_packetizer_count == 3'd7)) begin
					main_ethcore_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd3;
						main_ethcore_tx_packetizer_count_liteethudptx_next_value0 <= (main_ethcore_tx_packetizer_count + 1'd1);
						main_ethcore_tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd1;
					end else begin
						clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd2;
					end
				end else begin
					main_ethcore_tx_packetizer_count_liteethudptx_next_value0 <= (main_ethcore_tx_packetizer_count + 1'd1);
					main_ethcore_tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_ethcore_tx_packetizer_source_valid <= main_ethcore_tx_packetizer_sink_valid;
			main_ethcore_tx_packetizer_source_last <= main_ethcore_tx_packetizer_sink_last;
			main_ethcore_tx_packetizer_source_payload_data <= main_ethcore_tx_packetizer_sink_payload_data;
			if ((main_ethcore_tx_packetizer_source_valid & main_ethcore_tx_packetizer_source_ready)) begin
				main_ethcore_tx_packetizer_sink_ready <= 1'd1;
				if (main_ethcore_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_tx_packetizer_source_valid <= (main_ethcore_tx_packetizer_sink_valid | main_ethcore_tx_packetizer_sink_d_last);
			main_ethcore_tx_packetizer_source_last <= main_ethcore_tx_packetizer_sink_d_last;
			if (main_ethcore_tx_packetizer_fsm_from_idle) begin
				main_ethcore_tx_packetizer_source_payload_data[0] <= main_ethcore_tx_packetizer_sr[63:16];
			end else begin
				main_ethcore_tx_packetizer_source_payload_data[0] <= main_ethcore_tx_packetizer_sink_d_payload_data[7];
			end
			main_ethcore_tx_packetizer_source_payload_data[7:0] <= main_ethcore_tx_packetizer_sink_payload_data;
			if ((main_ethcore_tx_packetizer_source_valid & main_ethcore_tx_packetizer_source_ready)) begin
				main_ethcore_tx_packetizer_sink_ready <= (~main_ethcore_tx_packetizer_source_last);
				main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value1 <= 1'd0;
				main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 <= 1'd1;
				if (main_ethcore_tx_packetizer_source_last) begin
					clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_tx_packetizer_sink_ready <= 1'd1;
			main_ethcore_tx_packetizer_count_liteethudptx_next_value0 <= 1'd1;
			main_ethcore_tx_packetizer_count_liteethudptx_next_value_ce0 <= 1'd1;
			if (main_ethcore_tx_packetizer_sink_valid) begin
				main_ethcore_tx_packetizer_sink_ready <= 1'd0;
				main_ethcore_tx_packetizer_source_valid <= 1'd1;
				main_ethcore_tx_packetizer_source_last <= 1'd0;
				main_ethcore_tx_packetizer_source_payload_data <= main_ethcore_tx_packetizer_header[7:0];
				if ((main_ethcore_tx_packetizer_source_valid & main_ethcore_tx_packetizer_source_ready)) begin
					main_ethcore_tx_packetizer_sr_load <= 1'd1;
					main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value1 <= 1'd1;
					main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd3;
						end else begin
							clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 2'd2;
						end
					end else begin
						clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_ethcore_tx_source_source_valid <= 1'd0;
	main_ethcore_tx_source_source_first <= 1'd0;
	clockdomainsrenamer_liteethudp_liteethudptx_fsm_next_state <= 1'd0;
	main_ethcore_tx_source_source_last <= 1'd0;
	main_ethcore_tx_packetizer_source_ready <= 1'd0;
	main_ethcore_tx_source_source_payload_data <= 8'd0;
	main_ethcore_tx_source_source_payload_error <= 1'd0;
	main_ethcore_tx_source_source_param_length <= 16'd0;
	main_ethcore_tx_source_source_param_protocol <= 8'd0;
	main_ethcore_tx_source_source_param_ip_address <= 32'd0;
	clockdomainsrenamer_liteethudp_liteethudptx_fsm_next_state <= clockdomainsrenamer_liteethudp_liteethudptx_fsm_state;
	case (clockdomainsrenamer_liteethudp_liteethudptx_fsm_state)
		1'd1: begin
			main_ethcore_tx_source_source_valid <= main_ethcore_tx_packetizer_source_valid;
			main_ethcore_tx_packetizer_source_ready <= main_ethcore_tx_source_source_ready;
			main_ethcore_tx_source_source_first <= main_ethcore_tx_packetizer_source_first;
			main_ethcore_tx_source_source_last <= main_ethcore_tx_packetizer_source_last;
			main_ethcore_tx_source_source_payload_data <= main_ethcore_tx_packetizer_source_payload_data;
			main_ethcore_tx_source_source_payload_error <= main_ethcore_tx_packetizer_source_payload_error;
			main_ethcore_tx_source_source_param_length <= main_ethcore_tx_packetizer_source_param_length;
			main_ethcore_tx_source_source_param_protocol <= main_ethcore_tx_packetizer_source_param_protocol;
			main_ethcore_tx_source_source_param_ip_address <= main_ethcore_tx_packetizer_source_param_ip_address;
			main_ethcore_tx_source_source_param_length <= main_ethcore_tx_packetizer_sink_param_length;
			main_ethcore_tx_source_source_param_protocol <= 5'd17;
			main_ethcore_tx_source_source_param_ip_address <= main_ethcore_tx_sink_sink_param_ip_address;
			if (((main_ethcore_tx_source_source_valid & main_ethcore_tx_source_source_last) & main_ethcore_tx_source_source_ready)) begin
				clockdomainsrenamer_liteethudp_liteethudptx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_tx_packetizer_source_ready <= 1'd1;
			if (main_ethcore_tx_packetizer_source_valid) begin
				main_ethcore_tx_packetizer_source_ready <= 1'd0;
				clockdomainsrenamer_liteethudp_liteethudptx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_ethcore_rx_depacketizer_sink_valid = main_ethcore_rx_sink_sink_valid;
assign main_ethcore_rx_sink_sink_ready = main_ethcore_rx_depacketizer_sink_ready;
assign main_ethcore_rx_depacketizer_sink_first = main_ethcore_rx_sink_sink_first;
assign main_ethcore_rx_depacketizer_sink_last = main_ethcore_rx_sink_sink_last;
assign main_ethcore_rx_depacketizer_sink_payload_data = main_ethcore_rx_sink_sink_payload_data;
assign main_ethcore_rx_depacketizer_sink_payload_error = main_ethcore_rx_sink_sink_payload_error;
assign main_ethcore_rx_depacketizer_sink_param_length = main_ethcore_rx_sink_sink_param_length;
assign main_ethcore_rx_depacketizer_sink_param_protocol = main_ethcore_rx_sink_sink_param_protocol;
assign main_ethcore_rx_depacketizer_sink_param_ip_address = main_ethcore_rx_sink_sink_param_ip_address;
assign main_ethcore_rx_source_source_last = main_ethcore_rx_depacketizer_source_last;
assign main_ethcore_rx_source_source_param_src_port = main_ethcore_rx_depacketizer_source_param_src_port;
assign main_ethcore_rx_source_source_param_dst_port = main_ethcore_rx_depacketizer_source_param_dst_port;
assign main_ethcore_rx_source_source_param_ip_address = main_ethcore_rx_sink_sink_param_ip_address;
assign main_ethcore_rx_source_source_param_length = (main_ethcore_rx_depacketizer_source_param_length - 4'd8);
assign main_ethcore_rx_source_source_payload_data = main_ethcore_rx_depacketizer_source_payload_data;
assign main_ethcore_rx_source_source_payload_error = main_ethcore_rx_depacketizer_source_payload_error;
assign main_ethcore_rx_depacketizer_header = main_ethcore_rx_depacketizer_sr;
assign main_ethcore_rx_depacketizer_source_param_checksum = {slice_proxy69[7:0], slice_proxy68[15:8]};
assign main_ethcore_rx_depacketizer_source_param_dst_port = {slice_proxy71[7:0], slice_proxy70[15:8]};
assign main_ethcore_rx_depacketizer_source_param_length = {slice_proxy73[7:0], slice_proxy72[15:8]};
assign main_ethcore_rx_depacketizer_source_param_src_port = {slice_proxy75[7:0], slice_proxy74[15:8]};
assign main_ethcore_rx_depacketizer_source_payload_error = main_ethcore_rx_depacketizer_sink_payload_error;
always @(*) begin
	main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 <= 1'd0;
	main_ethcore_rx_depacketizer_sr_shift <= 1'd0;
	main_ethcore_rx_depacketizer_sr_shift_leftover <= 1'd0;
	main_ethcore_rx_depacketizer_source_valid <= 1'd0;
	main_ethcore_rx_depacketizer_source_last <= 1'd0;
	main_ethcore_rx_depacketizer_source_payload_data <= 8'd0;
	clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd0;
	main_ethcore_rx_depacketizer_count_liteethudprx_next_value0 <= 3'd0;
	main_ethcore_rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd0;
	main_ethcore_rx_depacketizer_sink_ready <= 1'd0;
	main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 <= 1'd0;
	clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_state;
	case (clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_state)
		1'd1: begin
			main_ethcore_rx_depacketizer_sink_ready <= 1'd1;
			if (main_ethcore_rx_depacketizer_sink_valid) begin
				main_ethcore_rx_depacketizer_count_liteethudprx_next_value0 <= (main_ethcore_rx_depacketizer_count + 1'd1);
				main_ethcore_rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd1;
				main_ethcore_rx_depacketizer_sr_shift <= 1'd1;
				if ((main_ethcore_rx_depacketizer_count == 3'd7)) begin
					if (1'd0) begin
						main_ethcore_rx_depacketizer_count_liteethudprx_next_value0 <= (main_ethcore_rx_depacketizer_count + 1'd1);
						main_ethcore_rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd1;
						clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			main_ethcore_rx_depacketizer_source_valid <= (main_ethcore_rx_depacketizer_sink_valid | main_ethcore_rx_depacketizer_sink_d_last);
			main_ethcore_rx_depacketizer_source_last <= (main_ethcore_rx_depacketizer_sink_last | main_ethcore_rx_depacketizer_sink_d_last);
			main_ethcore_rx_depacketizer_sink_ready <= main_ethcore_rx_depacketizer_source_ready;
			main_ethcore_rx_depacketizer_source_payload_data <= main_ethcore_rx_depacketizer_sink_d_payload_data[7:0];
			main_ethcore_rx_depacketizer_source_payload_data[7] <= main_ethcore_rx_depacketizer_sink_payload_data;
			if (main_ethcore_rx_depacketizer_fsm_from_idle) begin
				main_ethcore_rx_depacketizer_source_valid <= main_ethcore_rx_depacketizer_sink_d_last;
				main_ethcore_rx_depacketizer_sink_ready <= 1'd1;
				if (main_ethcore_rx_depacketizer_sink_valid) begin
					main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 <= 1'd0;
					main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 <= 1'd1;
					main_ethcore_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((main_ethcore_rx_depacketizer_source_valid & main_ethcore_rx_depacketizer_source_ready)) begin
				if (main_ethcore_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_ethcore_rx_depacketizer_source_valid <= (main_ethcore_rx_depacketizer_sink_valid | main_ethcore_rx_depacketizer_sink_d_last);
			main_ethcore_rx_depacketizer_source_last <= (main_ethcore_rx_depacketizer_sink_last | main_ethcore_rx_depacketizer_sink_d_last);
			main_ethcore_rx_depacketizer_sink_ready <= main_ethcore_rx_depacketizer_source_ready;
			main_ethcore_rx_depacketizer_source_payload_data <= main_ethcore_rx_depacketizer_sink_payload_data;
			if ((main_ethcore_rx_depacketizer_source_valid & main_ethcore_rx_depacketizer_source_ready)) begin
				if (main_ethcore_rx_depacketizer_source_last) begin
					clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_ethcore_rx_depacketizer_sink_ready <= 1'd1;
			main_ethcore_rx_depacketizer_count_liteethudprx_next_value0 <= 1'd1;
			main_ethcore_rx_depacketizer_count_liteethudprx_next_value_ce0 <= 1'd1;
			if (main_ethcore_rx_depacketizer_sink_valid) begin
				main_ethcore_rx_depacketizer_sr_shift <= 1'd1;
				main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value1 <= 1'd1;
				main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd2;
					end else begin
						clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 2'd3;
					end
				end else begin
					clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state <= 2'd0;
	main_ethcore_rx_source_source_valid <= 1'd0;
	main_ethcore_rx_depacketizer_source_ready <= 1'd0;
	clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state <= clockdomainsrenamer_liteethudp_liteethudprx_fsm_state;
	case (clockdomainsrenamer_liteethudp_liteethudprx_fsm_state)
		1'd1: begin
			if (main_ethcore_rx_valid) begin
				clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state <= 2'd2;
			end else begin
				clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state <= 2'd3;
			end
		end
		2'd2: begin
			main_ethcore_rx_source_source_valid <= main_ethcore_rx_depacketizer_source_valid;
			main_ethcore_rx_depacketizer_source_ready <= main_ethcore_rx_source_source_ready;
			if (((main_ethcore_rx_source_source_valid & main_ethcore_rx_source_source_last) & main_ethcore_rx_source_source_ready)) begin
				clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state <= 1'd0;
			end
		end
		2'd3: begin
			main_ethcore_rx_depacketizer_source_ready <= 1'd1;
			if (((main_ethcore_rx_depacketizer_source_valid & main_ethcore_rx_depacketizer_source_last) & main_ethcore_rx_depacketizer_source_ready)) begin
				clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_ethcore_rx_depacketizer_source_ready <= 1'd1;
			if (main_ethcore_rx_depacketizer_source_valid) begin
				main_ethcore_rx_depacketizer_source_ready <= 1'd0;
				clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_etherbone_tx_cdc_sink_valid = main_etherbone_user_port_sink_valid;
assign main_etherbone_user_port_sink_ready = main_etherbone_tx_cdc_sink_ready;
assign main_etherbone_tx_cdc_sink_first = main_etherbone_user_port_sink_first;
assign main_etherbone_tx_cdc_sink_last = main_etherbone_user_port_sink_last;
assign main_etherbone_tx_cdc_sink_payload_data = main_etherbone_user_port_sink_payload_data;
assign main_etherbone_tx_cdc_sink_payload_error = main_etherbone_user_port_sink_payload_error;
assign main_etherbone_tx_cdc_sink_param_src_port = main_etherbone_user_port_sink_param_src_port;
assign main_etherbone_tx_cdc_sink_param_dst_port = main_etherbone_user_port_sink_param_dst_port;
assign main_etherbone_tx_cdc_sink_param_ip_address = main_etherbone_user_port_sink_param_ip_address;
assign main_etherbone_tx_cdc_sink_param_length = main_etherbone_user_port_sink_param_length;
assign main_etherbone_tx_converter_sink_valid = main_etherbone_tx_cdc_source_valid;
assign main_etherbone_tx_cdc_source_ready = main_etherbone_tx_converter_sink_ready;
assign main_etherbone_tx_converter_sink_first = main_etherbone_tx_cdc_source_first;
assign main_etherbone_tx_converter_sink_last = main_etherbone_tx_cdc_source_last;
assign main_etherbone_tx_converter_sink_payload_data = main_etherbone_tx_cdc_source_payload_data;
assign main_etherbone_tx_converter_sink_payload_error = main_etherbone_tx_cdc_source_payload_error;
assign main_etherbone_tx_converter_sink_param_src_port = main_etherbone_tx_cdc_source_param_src_port;
assign main_etherbone_tx_converter_sink_param_dst_port = main_etherbone_tx_cdc_source_param_dst_port;
assign main_etherbone_tx_converter_sink_param_ip_address = main_etherbone_tx_cdc_source_param_ip_address;
assign main_etherbone_tx_converter_sink_param_length = main_etherbone_tx_cdc_source_param_length;
assign main_etherbone_internal_port_sink_valid = main_etherbone_tx_converter_source_valid;
assign main_etherbone_tx_converter_source_ready = main_etherbone_internal_port_sink_ready;
assign main_etherbone_internal_port_sink_first = main_etherbone_tx_converter_source_first;
assign main_etherbone_internal_port_sink_last = main_etherbone_tx_converter_source_last;
assign main_etherbone_internal_port_sink_payload_data = main_etherbone_tx_converter_source_payload_data;
assign main_etherbone_internal_port_sink_payload_error = main_etherbone_tx_converter_source_payload_error;
assign main_etherbone_internal_port_sink_param_src_port = main_etherbone_tx_converter_source_param_src_port;
assign main_etherbone_internal_port_sink_param_dst_port = main_etherbone_tx_converter_source_param_dst_port;
assign main_etherbone_internal_port_sink_param_ip_address = main_etherbone_tx_converter_source_param_ip_address;
assign main_etherbone_internal_port_sink_param_length = main_etherbone_tx_converter_source_param_length;
assign main_etherbone_rx_converter_sink_valid = main_etherbone_internal_port_source_valid;
assign main_etherbone_internal_port_source_ready = main_etherbone_rx_converter_sink_ready;
assign main_etherbone_rx_converter_sink_first = main_etherbone_internal_port_source_first;
assign main_etherbone_rx_converter_sink_last = main_etherbone_internal_port_source_last;
assign main_etherbone_rx_converter_sink_payload_data = main_etherbone_internal_port_source_payload_data;
assign main_etherbone_rx_converter_sink_payload_error = main_etherbone_internal_port_source_payload_error;
assign main_etherbone_rx_converter_sink_param_src_port = main_etherbone_internal_port_source_param_src_port;
assign main_etherbone_rx_converter_sink_param_dst_port = main_etherbone_internal_port_source_param_dst_port;
assign main_etherbone_rx_converter_sink_param_ip_address = main_etherbone_internal_port_source_param_ip_address;
assign main_etherbone_rx_converter_sink_param_length = main_etherbone_internal_port_source_param_length;
assign main_etherbone_rx_cdc_sink_valid = main_etherbone_rx_converter_source_valid;
assign main_etherbone_rx_converter_source_ready = main_etherbone_rx_cdc_sink_ready;
assign main_etherbone_rx_cdc_sink_first = main_etherbone_rx_converter_source_first;
assign main_etherbone_rx_cdc_sink_last = main_etherbone_rx_converter_source_last;
assign main_etherbone_rx_cdc_sink_payload_data = main_etherbone_rx_converter_source_payload_data;
assign main_etherbone_rx_cdc_sink_payload_error = main_etherbone_rx_converter_source_payload_error;
assign main_etherbone_rx_cdc_sink_param_src_port = main_etherbone_rx_converter_source_param_src_port;
assign main_etherbone_rx_cdc_sink_param_dst_port = main_etherbone_rx_converter_source_param_dst_port;
assign main_etherbone_rx_cdc_sink_param_ip_address = main_etherbone_rx_converter_source_param_ip_address;
assign main_etherbone_rx_cdc_sink_param_length = main_etherbone_rx_converter_source_param_length;
assign main_etherbone_user_port_source_valid = main_etherbone_rx_cdc_source_valid;
assign main_etherbone_rx_cdc_source_ready = main_etherbone_user_port_source_ready;
assign main_etherbone_user_port_source_first = main_etherbone_rx_cdc_source_first;
assign main_etherbone_user_port_source_last = main_etherbone_rx_cdc_source_last;
assign main_etherbone_user_port_source_payload_data = main_etherbone_rx_cdc_source_payload_data;
assign main_etherbone_user_port_source_payload_error = main_etherbone_rx_cdc_source_payload_error;
assign main_etherbone_user_port_source_param_src_port = main_etherbone_rx_cdc_source_param_src_port;
assign main_etherbone_user_port_source_param_dst_port = main_etherbone_rx_cdc_source_param_dst_port;
assign main_etherbone_user_port_source_param_ip_address = main_etherbone_rx_cdc_source_param_ip_address;
assign main_etherbone_user_port_source_param_length = main_etherbone_rx_cdc_source_param_length;
always @(*) begin
	clockdomainsrenamer_liteethudp_sel <= 1'd0;
	case (main_ethcore_crossbar_sink_param_dst_port)
		11'd1234: begin
			clockdomainsrenamer_liteethudp_sel <= 1'd1;
		end
		default: begin
			clockdomainsrenamer_liteethudp_sel <= 1'd0;
		end
	endcase
end
assign main_etherbone_tx_cdc_asyncfifo_din = {main_etherbone_tx_cdc_fifo_in_last, main_etherbone_tx_cdc_fifo_in_first, main_etherbone_tx_cdc_fifo_in_param_length, main_etherbone_tx_cdc_fifo_in_param_ip_address, main_etherbone_tx_cdc_fifo_in_param_dst_port, main_etherbone_tx_cdc_fifo_in_param_src_port, main_etherbone_tx_cdc_fifo_in_payload_error, main_etherbone_tx_cdc_fifo_in_payload_data};
assign {main_etherbone_tx_cdc_fifo_out_last, main_etherbone_tx_cdc_fifo_out_first, main_etherbone_tx_cdc_fifo_out_param_length, main_etherbone_tx_cdc_fifo_out_param_ip_address, main_etherbone_tx_cdc_fifo_out_param_dst_port, main_etherbone_tx_cdc_fifo_out_param_src_port, main_etherbone_tx_cdc_fifo_out_payload_error, main_etherbone_tx_cdc_fifo_out_payload_data} = main_etherbone_tx_cdc_asyncfifo_dout;
assign main_etherbone_tx_cdc_sink_ready = main_etherbone_tx_cdc_asyncfifo_writable;
assign main_etherbone_tx_cdc_asyncfifo_we = main_etherbone_tx_cdc_sink_valid;
assign main_etherbone_tx_cdc_fifo_in_first = main_etherbone_tx_cdc_sink_first;
assign main_etherbone_tx_cdc_fifo_in_last = main_etherbone_tx_cdc_sink_last;
assign main_etherbone_tx_cdc_fifo_in_payload_data = main_etherbone_tx_cdc_sink_payload_data;
assign main_etherbone_tx_cdc_fifo_in_payload_error = main_etherbone_tx_cdc_sink_payload_error;
assign main_etherbone_tx_cdc_fifo_in_param_src_port = main_etherbone_tx_cdc_sink_param_src_port;
assign main_etherbone_tx_cdc_fifo_in_param_dst_port = main_etherbone_tx_cdc_sink_param_dst_port;
assign main_etherbone_tx_cdc_fifo_in_param_ip_address = main_etherbone_tx_cdc_sink_param_ip_address;
assign main_etherbone_tx_cdc_fifo_in_param_length = main_etherbone_tx_cdc_sink_param_length;
assign main_etherbone_tx_cdc_source_valid = main_etherbone_tx_cdc_asyncfifo_readable;
assign main_etherbone_tx_cdc_source_first = main_etherbone_tx_cdc_fifo_out_first;
assign main_etherbone_tx_cdc_source_last = main_etherbone_tx_cdc_fifo_out_last;
assign main_etherbone_tx_cdc_source_payload_data = main_etherbone_tx_cdc_fifo_out_payload_data;
assign main_etherbone_tx_cdc_source_payload_error = main_etherbone_tx_cdc_fifo_out_payload_error;
assign main_etherbone_tx_cdc_source_param_src_port = main_etherbone_tx_cdc_fifo_out_param_src_port;
assign main_etherbone_tx_cdc_source_param_dst_port = main_etherbone_tx_cdc_fifo_out_param_dst_port;
assign main_etherbone_tx_cdc_source_param_ip_address = main_etherbone_tx_cdc_fifo_out_param_ip_address;
assign main_etherbone_tx_cdc_source_param_length = main_etherbone_tx_cdc_fifo_out_param_length;
assign main_etherbone_tx_cdc_asyncfifo_re = main_etherbone_tx_cdc_source_ready;
assign main_etherbone_tx_cdc_graycounter0_ce = (main_etherbone_tx_cdc_asyncfifo_writable & main_etherbone_tx_cdc_asyncfifo_we);
assign main_etherbone_tx_cdc_graycounter1_ce = (main_etherbone_tx_cdc_asyncfifo_readable & main_etherbone_tx_cdc_asyncfifo_re);
assign main_etherbone_tx_cdc_asyncfifo_writable = (((main_etherbone_tx_cdc_graycounter0_q[2] == main_etherbone_tx_cdc_consume_wdomain[2]) | (main_etherbone_tx_cdc_graycounter0_q[1] == main_etherbone_tx_cdc_consume_wdomain[1])) | (main_etherbone_tx_cdc_graycounter0_q[0] != main_etherbone_tx_cdc_consume_wdomain[0]));
assign main_etherbone_tx_cdc_asyncfifo_readable = (main_etherbone_tx_cdc_graycounter1_q != main_etherbone_tx_cdc_produce_rdomain);
assign main_etherbone_tx_cdc_wrport_adr = main_etherbone_tx_cdc_graycounter0_q_binary[1:0];
assign main_etherbone_tx_cdc_wrport_dat_w = main_etherbone_tx_cdc_asyncfifo_din;
assign main_etherbone_tx_cdc_wrport_we = main_etherbone_tx_cdc_graycounter0_ce;
assign main_etherbone_tx_cdc_rdport_adr = main_etherbone_tx_cdc_graycounter1_q_next_binary[1:0];
assign main_etherbone_tx_cdc_asyncfifo_dout = main_etherbone_tx_cdc_rdport_dat_r;
always @(*) begin
	main_etherbone_tx_cdc_graycounter0_q_next_binary <= 3'd0;
	if (main_etherbone_tx_cdc_graycounter0_ce) begin
		main_etherbone_tx_cdc_graycounter0_q_next_binary <= (main_etherbone_tx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		main_etherbone_tx_cdc_graycounter0_q_next_binary <= main_etherbone_tx_cdc_graycounter0_q_binary;
	end
end
assign main_etherbone_tx_cdc_graycounter0_q_next = (main_etherbone_tx_cdc_graycounter0_q_next_binary ^ main_etherbone_tx_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	main_etherbone_tx_cdc_graycounter1_q_next_binary <= 3'd0;
	if (main_etherbone_tx_cdc_graycounter1_ce) begin
		main_etherbone_tx_cdc_graycounter1_q_next_binary <= (main_etherbone_tx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		main_etherbone_tx_cdc_graycounter1_q_next_binary <= main_etherbone_tx_cdc_graycounter1_q_binary;
	end
end
assign main_etherbone_tx_cdc_graycounter1_q_next = (main_etherbone_tx_cdc_graycounter1_q_next_binary ^ main_etherbone_tx_cdc_graycounter1_q_next_binary[2:1]);
assign main_etherbone_tx_converter_converter_sink_valid = main_etherbone_tx_converter_sink_valid;
assign main_etherbone_tx_converter_converter_sink_first = main_etherbone_tx_converter_sink_first;
assign main_etherbone_tx_converter_converter_sink_last = main_etherbone_tx_converter_sink_last;
assign main_etherbone_tx_converter_sink_ready = main_etherbone_tx_converter_converter_sink_ready;
always @(*) begin
	main_etherbone_tx_converter_converter_sink_payload_data <= 36'd0;
	main_etherbone_tx_converter_converter_sink_payload_data[7:0] <= main_etherbone_tx_converter_sink_payload_data[7:0];
	main_etherbone_tx_converter_converter_sink_payload_data[8] <= main_etherbone_tx_converter_sink_payload_error[0];
	main_etherbone_tx_converter_converter_sink_payload_data[16:9] <= main_etherbone_tx_converter_sink_payload_data[15:8];
	main_etherbone_tx_converter_converter_sink_payload_data[17] <= main_etherbone_tx_converter_sink_payload_error[1];
	main_etherbone_tx_converter_converter_sink_payload_data[25:18] <= main_etherbone_tx_converter_sink_payload_data[23:16];
	main_etherbone_tx_converter_converter_sink_payload_data[26] <= main_etherbone_tx_converter_sink_payload_error[2];
	main_etherbone_tx_converter_converter_sink_payload_data[34:27] <= main_etherbone_tx_converter_sink_payload_data[31:24];
	main_etherbone_tx_converter_converter_sink_payload_data[35] <= main_etherbone_tx_converter_sink_payload_error[3];
end
assign main_etherbone_tx_converter_source_valid = main_etherbone_tx_converter_source_source_valid;
assign main_etherbone_tx_converter_source_first = main_etherbone_tx_converter_source_source_first;
assign main_etherbone_tx_converter_source_last = main_etherbone_tx_converter_source_source_last;
assign main_etherbone_tx_converter_source_source_ready = main_etherbone_tx_converter_source_ready;
assign {main_etherbone_tx_converter_source_payload_error, main_etherbone_tx_converter_source_payload_data} = main_etherbone_tx_converter_source_source_payload_data;
assign main_etherbone_tx_converter_source_param_src_port = main_etherbone_tx_converter_sink_param_src_port;
assign main_etherbone_tx_converter_source_param_dst_port = main_etherbone_tx_converter_sink_param_dst_port;
assign main_etherbone_tx_converter_source_param_ip_address = main_etherbone_tx_converter_sink_param_ip_address;
assign main_etherbone_tx_converter_source_param_length = main_etherbone_tx_converter_sink_param_length;
assign main_etherbone_tx_converter_source_source_valid = main_etherbone_tx_converter_converter_source_valid;
assign main_etherbone_tx_converter_converter_source_ready = main_etherbone_tx_converter_source_source_ready;
assign main_etherbone_tx_converter_source_source_first = main_etherbone_tx_converter_converter_source_first;
assign main_etherbone_tx_converter_source_source_last = main_etherbone_tx_converter_converter_source_last;
assign main_etherbone_tx_converter_source_source_payload_data = main_etherbone_tx_converter_converter_source_payload_data;
assign main_etherbone_tx_converter_converter_first = (main_etherbone_tx_converter_converter_mux == 1'd0);
assign main_etherbone_tx_converter_converter_last = (main_etherbone_tx_converter_converter_mux == 2'd3);
assign main_etherbone_tx_converter_converter_source_valid = main_etherbone_tx_converter_converter_sink_valid;
assign main_etherbone_tx_converter_converter_source_first = (main_etherbone_tx_converter_converter_sink_first & main_etherbone_tx_converter_converter_first);
assign main_etherbone_tx_converter_converter_source_last = (main_etherbone_tx_converter_converter_sink_last & main_etherbone_tx_converter_converter_last);
assign main_etherbone_tx_converter_converter_sink_ready = (main_etherbone_tx_converter_converter_last & main_etherbone_tx_converter_converter_source_ready);
always @(*) begin
	main_etherbone_tx_converter_converter_source_payload_data <= 9'd0;
	case (main_etherbone_tx_converter_converter_mux)
		1'd0: begin
			main_etherbone_tx_converter_converter_source_payload_data <= main_etherbone_tx_converter_converter_sink_payload_data[8:0];
		end
		1'd1: begin
			main_etherbone_tx_converter_converter_source_payload_data <= main_etherbone_tx_converter_converter_sink_payload_data[17:9];
		end
		2'd2: begin
			main_etherbone_tx_converter_converter_source_payload_data <= main_etherbone_tx_converter_converter_sink_payload_data[26:18];
		end
		default: begin
			main_etherbone_tx_converter_converter_source_payload_data <= main_etherbone_tx_converter_converter_sink_payload_data[35:27];
		end
	endcase
end
assign main_etherbone_tx_converter_converter_source_payload_valid_token_count = main_etherbone_tx_converter_converter_last;
assign main_etherbone_rx_converter_converter_sink_valid = main_etherbone_rx_converter_sink_valid;
assign main_etherbone_rx_converter_converter_sink_first = main_etherbone_rx_converter_sink_first;
assign main_etherbone_rx_converter_converter_sink_last = main_etherbone_rx_converter_sink_last;
assign main_etherbone_rx_converter_sink_ready = main_etherbone_rx_converter_converter_sink_ready;
assign main_etherbone_rx_converter_converter_sink_payload_data = {main_etherbone_rx_converter_sink_payload_error, main_etherbone_rx_converter_sink_payload_data};
assign main_etherbone_rx_converter_source_valid = main_etherbone_rx_converter_source_source_valid;
assign main_etherbone_rx_converter_source_first = main_etherbone_rx_converter_source_source_first;
assign main_etherbone_rx_converter_source_last = main_etherbone_rx_converter_source_source_last;
assign main_etherbone_rx_converter_source_source_ready = main_etherbone_rx_converter_source_ready;
always @(*) begin
	main_etherbone_rx_converter_source_payload_data <= 32'd0;
	main_etherbone_rx_converter_source_payload_data[7:0] <= main_etherbone_rx_converter_source_source_payload_data[7:0];
	main_etherbone_rx_converter_source_payload_data[15:8] <= main_etherbone_rx_converter_source_source_payload_data[16:9];
	main_etherbone_rx_converter_source_payload_data[23:16] <= main_etherbone_rx_converter_source_source_payload_data[25:18];
	main_etherbone_rx_converter_source_payload_data[31:24] <= main_etherbone_rx_converter_source_source_payload_data[34:27];
end
always @(*) begin
	main_etherbone_rx_converter_source_payload_error <= 4'd0;
	main_etherbone_rx_converter_source_payload_error[0] <= main_etherbone_rx_converter_source_source_payload_data[8];
	main_etherbone_rx_converter_source_payload_error[1] <= main_etherbone_rx_converter_source_source_payload_data[17];
	main_etherbone_rx_converter_source_payload_error[2] <= main_etherbone_rx_converter_source_source_payload_data[26];
	main_etherbone_rx_converter_source_payload_error[3] <= main_etherbone_rx_converter_source_source_payload_data[35];
end
assign main_etherbone_rx_converter_source_source_valid = main_etherbone_rx_converter_converter_source_valid;
assign main_etherbone_rx_converter_converter_source_ready = main_etherbone_rx_converter_source_source_ready;
assign main_etherbone_rx_converter_source_source_first = main_etherbone_rx_converter_converter_source_first;
assign main_etherbone_rx_converter_source_source_last = main_etherbone_rx_converter_converter_source_last;
assign main_etherbone_rx_converter_source_source_payload_data = main_etherbone_rx_converter_converter_source_payload_data;
assign main_etherbone_rx_converter_converter_sink_ready = ((~main_etherbone_rx_converter_converter_strobe_all) | main_etherbone_rx_converter_converter_source_ready);
assign main_etherbone_rx_converter_converter_source_valid = main_etherbone_rx_converter_converter_strobe_all;
assign main_etherbone_rx_converter_converter_load_part = (main_etherbone_rx_converter_converter_sink_valid & main_etherbone_rx_converter_converter_sink_ready);
assign main_etherbone_rx_cdc_asyncfifo_din = {main_etherbone_rx_cdc_fifo_in_last, main_etherbone_rx_cdc_fifo_in_first, main_etherbone_rx_cdc_fifo_in_param_length, main_etherbone_rx_cdc_fifo_in_param_ip_address, main_etherbone_rx_cdc_fifo_in_param_dst_port, main_etherbone_rx_cdc_fifo_in_param_src_port, main_etherbone_rx_cdc_fifo_in_payload_error, main_etherbone_rx_cdc_fifo_in_payload_data};
assign {main_etherbone_rx_cdc_fifo_out_last, main_etherbone_rx_cdc_fifo_out_first, main_etherbone_rx_cdc_fifo_out_param_length, main_etherbone_rx_cdc_fifo_out_param_ip_address, main_etherbone_rx_cdc_fifo_out_param_dst_port, main_etherbone_rx_cdc_fifo_out_param_src_port, main_etherbone_rx_cdc_fifo_out_payload_error, main_etherbone_rx_cdc_fifo_out_payload_data} = main_etherbone_rx_cdc_asyncfifo_dout;
assign main_etherbone_rx_cdc_sink_ready = main_etherbone_rx_cdc_asyncfifo_writable;
assign main_etherbone_rx_cdc_asyncfifo_we = main_etherbone_rx_cdc_sink_valid;
assign main_etherbone_rx_cdc_fifo_in_first = main_etherbone_rx_cdc_sink_first;
assign main_etherbone_rx_cdc_fifo_in_last = main_etherbone_rx_cdc_sink_last;
assign main_etherbone_rx_cdc_fifo_in_payload_data = main_etherbone_rx_cdc_sink_payload_data;
assign main_etherbone_rx_cdc_fifo_in_payload_error = main_etherbone_rx_cdc_sink_payload_error;
assign main_etherbone_rx_cdc_fifo_in_param_src_port = main_etherbone_rx_cdc_sink_param_src_port;
assign main_etherbone_rx_cdc_fifo_in_param_dst_port = main_etherbone_rx_cdc_sink_param_dst_port;
assign main_etherbone_rx_cdc_fifo_in_param_ip_address = main_etherbone_rx_cdc_sink_param_ip_address;
assign main_etherbone_rx_cdc_fifo_in_param_length = main_etherbone_rx_cdc_sink_param_length;
assign main_etherbone_rx_cdc_source_valid = main_etherbone_rx_cdc_asyncfifo_readable;
assign main_etherbone_rx_cdc_source_first = main_etherbone_rx_cdc_fifo_out_first;
assign main_etherbone_rx_cdc_source_last = main_etherbone_rx_cdc_fifo_out_last;
assign main_etherbone_rx_cdc_source_payload_data = main_etherbone_rx_cdc_fifo_out_payload_data;
assign main_etherbone_rx_cdc_source_payload_error = main_etherbone_rx_cdc_fifo_out_payload_error;
assign main_etherbone_rx_cdc_source_param_src_port = main_etherbone_rx_cdc_fifo_out_param_src_port;
assign main_etherbone_rx_cdc_source_param_dst_port = main_etherbone_rx_cdc_fifo_out_param_dst_port;
assign main_etherbone_rx_cdc_source_param_ip_address = main_etherbone_rx_cdc_fifo_out_param_ip_address;
assign main_etherbone_rx_cdc_source_param_length = main_etherbone_rx_cdc_fifo_out_param_length;
assign main_etherbone_rx_cdc_asyncfifo_re = main_etherbone_rx_cdc_source_ready;
assign main_etherbone_rx_cdc_graycounter0_ce = (main_etherbone_rx_cdc_asyncfifo_writable & main_etherbone_rx_cdc_asyncfifo_we);
assign main_etherbone_rx_cdc_graycounter1_ce = (main_etherbone_rx_cdc_asyncfifo_readable & main_etherbone_rx_cdc_asyncfifo_re);
assign main_etherbone_rx_cdc_asyncfifo_writable = (((main_etherbone_rx_cdc_graycounter0_q[2] == main_etherbone_rx_cdc_consume_wdomain[2]) | (main_etherbone_rx_cdc_graycounter0_q[1] == main_etherbone_rx_cdc_consume_wdomain[1])) | (main_etherbone_rx_cdc_graycounter0_q[0] != main_etherbone_rx_cdc_consume_wdomain[0]));
assign main_etherbone_rx_cdc_asyncfifo_readable = (main_etherbone_rx_cdc_graycounter1_q != main_etherbone_rx_cdc_produce_rdomain);
assign main_etherbone_rx_cdc_wrport_adr = main_etherbone_rx_cdc_graycounter0_q_binary[1:0];
assign main_etherbone_rx_cdc_wrport_dat_w = main_etherbone_rx_cdc_asyncfifo_din;
assign main_etherbone_rx_cdc_wrport_we = main_etherbone_rx_cdc_graycounter0_ce;
assign main_etherbone_rx_cdc_rdport_adr = main_etherbone_rx_cdc_graycounter1_q_next_binary[1:0];
assign main_etherbone_rx_cdc_asyncfifo_dout = main_etherbone_rx_cdc_rdport_dat_r;
always @(*) begin
	main_etherbone_rx_cdc_graycounter0_q_next_binary <= 3'd0;
	if (main_etherbone_rx_cdc_graycounter0_ce) begin
		main_etherbone_rx_cdc_graycounter0_q_next_binary <= (main_etherbone_rx_cdc_graycounter0_q_binary + 1'd1);
	end else begin
		main_etherbone_rx_cdc_graycounter0_q_next_binary <= main_etherbone_rx_cdc_graycounter0_q_binary;
	end
end
assign main_etherbone_rx_cdc_graycounter0_q_next = (main_etherbone_rx_cdc_graycounter0_q_next_binary ^ main_etherbone_rx_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
	main_etherbone_rx_cdc_graycounter1_q_next_binary <= 3'd0;
	if (main_etherbone_rx_cdc_graycounter1_ce) begin
		main_etherbone_rx_cdc_graycounter1_q_next_binary <= (main_etherbone_rx_cdc_graycounter1_q_binary + 1'd1);
	end else begin
		main_etherbone_rx_cdc_graycounter1_q_next_binary <= main_etherbone_rx_cdc_graycounter1_q_binary;
	end
end
assign main_etherbone_rx_cdc_graycounter1_q_next = (main_etherbone_rx_cdc_graycounter1_q_next_binary ^ main_etherbone_rx_cdc_graycounter1_q_next_binary[2:1]);
assign main_ethcore_crossbar_source_valid = main_etherbone_internal_port_sink_valid;
assign main_etherbone_internal_port_sink_ready = main_ethcore_crossbar_source_ready;
assign main_ethcore_crossbar_source_first = main_etherbone_internal_port_sink_first;
assign main_ethcore_crossbar_source_last = main_etherbone_internal_port_sink_last;
assign main_ethcore_crossbar_source_payload_data = main_etherbone_internal_port_sink_payload_data;
assign main_ethcore_crossbar_source_payload_error = main_etherbone_internal_port_sink_payload_error;
assign main_ethcore_crossbar_source_param_src_port = main_etherbone_internal_port_sink_param_src_port;
assign main_ethcore_crossbar_source_param_dst_port = main_etherbone_internal_port_sink_param_dst_port;
assign main_ethcore_crossbar_source_param_ip_address = main_etherbone_internal_port_sink_param_ip_address;
assign main_ethcore_crossbar_source_param_length = main_etherbone_internal_port_sink_param_length;
assign main_etherbone_internal_port_source_valid = main_ethcore_crossbar_sink_valid;
assign main_ethcore_crossbar_sink_ready = main_etherbone_internal_port_source_ready;
assign main_etherbone_internal_port_source_first = main_ethcore_crossbar_sink_first;
assign main_etherbone_internal_port_source_last = main_ethcore_crossbar_sink_last;
assign main_etherbone_internal_port_source_payload_data = main_ethcore_crossbar_sink_payload_data;
assign main_etherbone_internal_port_source_payload_error = main_ethcore_crossbar_sink_payload_error;
assign main_etherbone_internal_port_source_param_src_port = main_ethcore_crossbar_sink_param_src_port;
assign main_etherbone_internal_port_source_param_dst_port = main_ethcore_crossbar_sink_param_dst_port;
assign main_etherbone_internal_port_source_param_ip_address = main_ethcore_crossbar_sink_param_ip_address;
assign main_etherbone_internal_port_source_param_length = main_ethcore_crossbar_sink_param_length;
assign main_etherbone_dispatcher_sel0 = (~main_etherbone_rx_source_source_param_pf);
assign main_etherbone_liteethetherbonewishbonemaster_sink_valid = main_etherbone_record_receiver_source_source_valid;
assign main_etherbone_record_receiver_source_source_ready = main_etherbone_liteethetherbonewishbonemaster_sink_ready;
assign main_etherbone_liteethetherbonewishbonemaster_sink_first = main_etherbone_record_receiver_source_source_first;
assign main_etherbone_liteethetherbonewishbonemaster_sink_last = main_etherbone_record_receiver_source_source_last;
assign main_etherbone_liteethetherbonewishbonemaster_sink_payload_addr = main_etherbone_record_receiver_source_source_payload_addr;
assign main_etherbone_liteethetherbonewishbonemaster_sink_payload_data = main_etherbone_record_receiver_source_source_payload_data;
assign main_etherbone_liteethetherbonewishbonemaster_sink_param_we = main_etherbone_record_receiver_source_source_param_we;
assign main_etherbone_liteethetherbonewishbonemaster_sink_param_count = main_etherbone_record_receiver_source_source_param_count;
assign main_etherbone_liteethetherbonewishbonemaster_sink_param_base_addr = main_etherbone_record_receiver_source_source_param_base_addr;
assign main_etherbone_liteethetherbonewishbonemaster_sink_param_be = main_etherbone_record_receiver_source_source_param_be;
assign main_etherbone_record_sender_sink_sink_valid = main_etherbone_liteethetherbonewishbonemaster_source_valid;
assign main_etherbone_liteethetherbonewishbonemaster_source_ready = main_etherbone_record_sender_sink_sink_ready;
assign main_etherbone_record_sender_sink_sink_first = main_etherbone_liteethetherbonewishbonemaster_source_first;
assign main_etherbone_record_sender_sink_sink_last = main_etherbone_liteethetherbonewishbonemaster_source_last;
assign main_etherbone_record_sender_sink_sink_payload_addr = main_etherbone_liteethetherbonewishbonemaster_source_payload_addr;
assign main_etherbone_record_sender_sink_sink_payload_data = main_etherbone_liteethetherbonewishbonemaster_source_payload_data;
assign main_etherbone_record_sender_sink_sink_param_we = main_etherbone_liteethetherbonewishbonemaster_source_param_we;
assign main_etherbone_record_sender_sink_sink_param_count = main_etherbone_liteethetherbonewishbonemaster_source_param_count;
assign main_etherbone_record_sender_sink_sink_param_base_addr = main_etherbone_liteethetherbonewishbonemaster_source_param_base_addr;
assign main_etherbone_record_sender_sink_sink_param_be = main_etherbone_liteethetherbonewishbonemaster_source_param_be;
assign main_etherbone_user_port_sink_valid = main_etherbone_tx_source_source_valid;
assign main_etherbone_tx_source_source_ready = main_etherbone_user_port_sink_ready;
assign main_etherbone_user_port_sink_first = main_etherbone_tx_source_source_first;
assign main_etherbone_user_port_sink_last = main_etherbone_tx_source_source_last;
assign main_etherbone_user_port_sink_payload_data = main_etherbone_tx_source_source_payload_data;
assign main_etherbone_user_port_sink_payload_error = main_etherbone_tx_source_source_payload_error;
assign main_etherbone_user_port_sink_param_src_port = main_etherbone_tx_source_source_param_src_port;
assign main_etherbone_user_port_sink_param_dst_port = main_etherbone_tx_source_source_param_dst_port;
assign main_etherbone_user_port_sink_param_ip_address = main_etherbone_tx_source_source_param_ip_address;
assign main_etherbone_user_port_sink_param_length = main_etherbone_tx_source_source_param_length;
assign main_etherbone_rx_sink_sink_valid = main_etherbone_user_port_source_valid;
assign main_etherbone_user_port_source_ready = main_etherbone_rx_sink_sink_ready;
assign main_etherbone_rx_sink_sink_first = main_etherbone_user_port_source_first;
assign main_etherbone_rx_sink_sink_last = main_etherbone_user_port_source_last;
assign main_etherbone_rx_sink_sink_payload_data = main_etherbone_user_port_source_payload_data;
assign main_etherbone_rx_sink_sink_payload_error = main_etherbone_user_port_source_payload_error;
assign main_etherbone_rx_sink_sink_param_src_port = main_etherbone_user_port_source_param_src_port;
assign main_etherbone_rx_sink_sink_param_dst_port = main_etherbone_user_port_source_param_dst_port;
assign main_etherbone_rx_sink_sink_param_ip_address = main_etherbone_user_port_source_param_ip_address;
assign main_etherbone_rx_sink_sink_param_length = main_etherbone_user_port_source_param_length;
assign main_etherbone_tx_packetizer_sink_valid = main_etherbone_tx_sink_sink_valid;
assign main_etherbone_tx_packetizer_sink_last = main_etherbone_tx_sink_sink_last;
assign main_etherbone_tx_sink_sink_ready = main_etherbone_tx_packetizer_sink_ready;
assign main_etherbone_tx_packetizer_sink_param_magic = 15'd20079;
assign main_etherbone_tx_packetizer_sink_param_port_size = 3'd4;
assign main_etherbone_tx_packetizer_sink_param_addr_size = 3'd4;
assign main_etherbone_tx_packetizer_sink_param_pf = main_etherbone_tx_sink_sink_param_pf;
assign main_etherbone_tx_packetizer_sink_param_pr = main_etherbone_tx_sink_sink_param_pr;
assign main_etherbone_tx_packetizer_sink_param_nr = main_etherbone_tx_sink_sink_param_nr;
assign main_etherbone_tx_packetizer_sink_param_version = 1'd1;
assign main_etherbone_tx_packetizer_sink_payload_data = main_etherbone_tx_sink_sink_payload_data;
always @(*) begin
	main_etherbone_tx_packetizer_header <= 64'd0;
	main_etherbone_tx_packetizer_header[31:28] <= {main_etherbone_tx_packetizer_sink_param_addr_size[3:0]};
	main_etherbone_tx_packetizer_header[15:0] <= {main_etherbone_tx_packetizer_sink_param_magic[7:0], main_etherbone_tx_packetizer_sink_param_magic[15:8]};
	main_etherbone_tx_packetizer_header[18] <= {main_etherbone_tx_packetizer_sink_param_nr};
	main_etherbone_tx_packetizer_header[16] <= {main_etherbone_tx_packetizer_sink_param_pf};
	main_etherbone_tx_packetizer_header[27:24] <= {main_etherbone_tx_packetizer_sink_param_port_size[3:0]};
	main_etherbone_tx_packetizer_header[17] <= {main_etherbone_tx_packetizer_sink_param_pr};
	main_etherbone_tx_packetizer_header[23:20] <= {main_etherbone_tx_packetizer_sink_param_version[3:0]};
end
assign main_etherbone_tx_packetizer_source_payload_error = main_etherbone_tx_packetizer_sink_payload_error;
always @(*) begin
	main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value_ce0 <= 1'd0;
	main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value1 <= 1'd0;
	main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value_ce1 <= 1'd0;
	main_etherbone_tx_packetizer_sr_load <= 1'd0;
	main_etherbone_tx_packetizer_sr_shift <= 1'd0;
	main_etherbone_tx_packetizer_sink_ready <= 1'd0;
	main_etherbone_tx_packetizer_source_payload_data <= 32'd0;
	main_etherbone_tx_packetizer_source_valid <= 1'd0;
	liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 2'd0;
	main_etherbone_tx_packetizer_source_last <= 1'd0;
	main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value0 <= 1'd0;
	liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= liteethetherbonepackettx_liteethetherbonepacketpacketizer_state;
	case (liteethetherbonepackettx_liteethetherbonepacketpacketizer_state)
		1'd1: begin
			main_etherbone_tx_packetizer_source_valid <= 1'd1;
			main_etherbone_tx_packetizer_source_last <= 1'd0;
			main_etherbone_tx_packetizer_source_payload_data <= main_etherbone_tx_packetizer_sr[63:32];
			if ((main_etherbone_tx_packetizer_source_valid & main_etherbone_tx_packetizer_source_ready)) begin
				main_etherbone_tx_packetizer_sr_shift <= 1'd1;
				if ((main_etherbone_tx_packetizer_count == 1'd1)) begin
					main_etherbone_tx_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 2'd3;
						main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value0 <= (main_etherbone_tx_packetizer_count + 1'd1);
						main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value_ce0 <= 1'd1;
					end else begin
						liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 2'd2;
					end
				end else begin
					main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value0 <= (main_etherbone_tx_packetizer_count + 1'd1);
					main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_etherbone_tx_packetizer_source_valid <= main_etherbone_tx_packetizer_sink_valid;
			main_etherbone_tx_packetizer_source_last <= main_etherbone_tx_packetizer_sink_last;
			main_etherbone_tx_packetizer_source_payload_data <= main_etherbone_tx_packetizer_sink_payload_data;
			if ((main_etherbone_tx_packetizer_source_valid & main_etherbone_tx_packetizer_source_ready)) begin
				main_etherbone_tx_packetizer_sink_ready <= 1'd1;
				if (main_etherbone_tx_packetizer_source_last) begin
					liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_etherbone_tx_packetizer_source_valid <= (main_etherbone_tx_packetizer_sink_valid | main_etherbone_tx_packetizer_sink_d_last);
			main_etherbone_tx_packetizer_source_last <= main_etherbone_tx_packetizer_sink_d_last;
			if (main_etherbone_tx_packetizer_fsm_from_idle) begin
				main_etherbone_tx_packetizer_source_payload_data[0] <= main_etherbone_tx_packetizer_sr[63];
			end else begin
				main_etherbone_tx_packetizer_source_payload_data[0] <= main_etherbone_tx_packetizer_sink_d_payload_data[31];
			end
			main_etherbone_tx_packetizer_source_payload_data[31:0] <= main_etherbone_tx_packetizer_sink_payload_data;
			if ((main_etherbone_tx_packetizer_source_valid & main_etherbone_tx_packetizer_source_ready)) begin
				main_etherbone_tx_packetizer_sink_ready <= (~main_etherbone_tx_packetizer_source_last);
				main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value1 <= 1'd0;
				main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value_ce1 <= 1'd1;
				if (main_etherbone_tx_packetizer_source_last) begin
					liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_etherbone_tx_packetizer_sink_ready <= 1'd1;
			main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value0 <= 1'd1;
			main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value_ce0 <= 1'd1;
			if (main_etherbone_tx_packetizer_sink_valid) begin
				main_etherbone_tx_packetizer_sink_ready <= 1'd0;
				main_etherbone_tx_packetizer_source_valid <= 1'd1;
				main_etherbone_tx_packetizer_source_last <= 1'd0;
				main_etherbone_tx_packetizer_source_payload_data <= main_etherbone_tx_packetizer_header[31:0];
				if ((main_etherbone_tx_packetizer_source_valid & main_etherbone_tx_packetizer_source_ready)) begin
					main_etherbone_tx_packetizer_sr_load <= 1'd1;
					main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value1 <= 1'd1;
					main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value_ce1 <= 1'd1;
					if (1'd0) begin
						if (1'd0) begin
							liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 2'd3;
						end else begin
							liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 2'd2;
						end
					end else begin
						liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_etherbone_tx_source_source_valid <= 1'd0;
	liteethetherbonepackettx_fsm_next_state <= 1'd0;
	main_etherbone_tx_source_source_first <= 1'd0;
	main_etherbone_tx_source_source_last <= 1'd0;
	main_etherbone_tx_source_source_payload_data <= 32'd0;
	main_etherbone_tx_source_source_payload_error <= 4'd0;
	main_etherbone_tx_source_source_param_ip_address <= 32'd0;
	main_etherbone_tx_source_source_param_src_port <= 16'd0;
	main_etherbone_tx_source_source_param_dst_port <= 16'd0;
	main_etherbone_tx_packetizer_source_ready <= 1'd0;
	main_etherbone_tx_source_source_param_length <= 16'd0;
	liteethetherbonepackettx_fsm_next_state <= liteethetherbonepackettx_fsm_state;
	case (liteethetherbonepackettx_fsm_state)
		1'd1: begin
			main_etherbone_tx_source_source_valid <= main_etherbone_tx_packetizer_source_valid;
			main_etherbone_tx_packetizer_source_ready <= main_etherbone_tx_source_source_ready;
			main_etherbone_tx_source_source_first <= main_etherbone_tx_packetizer_source_first;
			main_etherbone_tx_source_source_last <= main_etherbone_tx_packetizer_source_last;
			main_etherbone_tx_source_source_payload_data <= main_etherbone_tx_packetizer_source_payload_data;
			main_etherbone_tx_source_source_payload_error <= main_etherbone_tx_packetizer_source_payload_error;
			main_etherbone_tx_source_source_param_src_port <= main_etherbone_tx_packetizer_source_param_src_port;
			main_etherbone_tx_source_source_param_dst_port <= main_etherbone_tx_packetizer_source_param_dst_port;
			main_etherbone_tx_source_source_param_ip_address <= main_etherbone_tx_packetizer_source_param_ip_address;
			main_etherbone_tx_source_source_param_length <= main_etherbone_tx_packetizer_source_param_length;
			main_etherbone_tx_source_source_param_src_port <= 11'd1234;
			main_etherbone_tx_source_source_param_dst_port <= 11'd1234;
			main_etherbone_tx_source_source_param_ip_address <= main_etherbone_tx_sink_sink_param_ip_address;
			main_etherbone_tx_source_source_param_length <= (main_etherbone_tx_sink_sink_param_length + 4'd8);
			if (((main_etherbone_tx_source_source_valid & main_etherbone_tx_source_source_last) & main_etherbone_tx_source_source_ready)) begin
				liteethetherbonepackettx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_etherbone_tx_packetizer_source_ready <= 1'd1;
			if (main_etherbone_tx_packetizer_source_valid) begin
				main_etherbone_tx_packetizer_source_ready <= 1'd0;
				liteethetherbonepackettx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_etherbone_rx_depacketizer_sink_valid = main_etherbone_rx_sink_sink_valid;
assign main_etherbone_rx_sink_sink_ready = main_etherbone_rx_depacketizer_sink_ready;
assign main_etherbone_rx_depacketizer_sink_first = main_etherbone_rx_sink_sink_first;
assign main_etherbone_rx_depacketizer_sink_last = main_etherbone_rx_sink_sink_last;
assign main_etherbone_rx_depacketizer_sink_payload_data = main_etherbone_rx_sink_sink_payload_data;
assign main_etherbone_rx_depacketizer_sink_payload_error = main_etherbone_rx_sink_sink_payload_error;
assign main_etherbone_rx_depacketizer_sink_param_src_port = main_etherbone_rx_sink_sink_param_src_port;
assign main_etherbone_rx_depacketizer_sink_param_dst_port = main_etherbone_rx_sink_sink_param_dst_port;
assign main_etherbone_rx_depacketizer_sink_param_ip_address = main_etherbone_rx_sink_sink_param_ip_address;
assign main_etherbone_rx_depacketizer_sink_param_length = main_etherbone_rx_sink_sink_param_length;
assign main_etherbone_rx_source_source_last = main_etherbone_rx_depacketizer_source_last;
assign main_etherbone_rx_source_source_param_pf = main_etherbone_rx_depacketizer_source_param_pf;
assign main_etherbone_rx_source_source_param_pr = main_etherbone_rx_depacketizer_source_param_pr;
assign main_etherbone_rx_source_source_param_nr = main_etherbone_rx_depacketizer_source_param_nr;
assign main_etherbone_rx_source_source_payload_data = main_etherbone_rx_depacketizer_source_payload_data;
assign main_etherbone_rx_source_source_param_src_port = main_etherbone_rx_sink_sink_param_src_port;
assign main_etherbone_rx_source_source_param_dst_port = main_etherbone_rx_sink_sink_param_dst_port;
assign main_etherbone_rx_source_source_param_ip_address = main_etherbone_rx_sink_sink_param_ip_address;
assign main_etherbone_rx_source_source_param_length = (main_etherbone_rx_sink_sink_param_length - 4'd8);
assign main_etherbone_rx_depacketizer_header = main_etherbone_rx_depacketizer_sr;
assign main_etherbone_rx_depacketizer_source_param_addr_size = {slice_proxy76[3:0]};
assign main_etherbone_rx_depacketizer_source_param_magic = {slice_proxy78[7:0], slice_proxy77[15:8]};
assign main_etherbone_rx_depacketizer_source_param_nr = {slice_proxy79};
assign main_etherbone_rx_depacketizer_source_param_pf = {slice_proxy80};
assign main_etherbone_rx_depacketizer_source_param_port_size = {slice_proxy81[3:0]};
assign main_etherbone_rx_depacketizer_source_param_pr = {slice_proxy82};
assign main_etherbone_rx_depacketizer_source_param_version = {slice_proxy83[3:0]};
assign main_etherbone_rx_depacketizer_source_payload_error = main_etherbone_rx_depacketizer_sink_payload_error;
always @(*) begin
	main_etherbone_rx_depacketizer_sr_shift_leftover <= 1'd0;
	main_etherbone_rx_depacketizer_source_payload_data <= 32'd0;
	main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value1 <= 1'd0;
	main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value_ce1 <= 1'd0;
	main_etherbone_rx_depacketizer_sink_ready <= 1'd0;
	main_etherbone_rx_depacketizer_sr_shift <= 1'd0;
	main_etherbone_rx_depacketizer_source_valid <= 1'd0;
	liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 2'd0;
	main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value0 <= 1'd0;
	main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value_ce0 <= 1'd0;
	main_etherbone_rx_depacketizer_source_last <= 1'd0;
	liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_state;
	case (liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_state)
		1'd1: begin
			main_etherbone_rx_depacketizer_sink_ready <= 1'd1;
			if (main_etherbone_rx_depacketizer_sink_valid) begin
				main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value0 <= (main_etherbone_rx_depacketizer_count + 1'd1);
				main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value_ce0 <= 1'd1;
				main_etherbone_rx_depacketizer_sr_shift <= 1'd1;
				if ((main_etherbone_rx_depacketizer_count == 1'd1)) begin
					if (1'd0) begin
						main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value0 <= (main_etherbone_rx_depacketizer_count + 1'd1);
						main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value_ce0 <= 1'd1;
						liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 2'd2;
					end else begin
						liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			main_etherbone_rx_depacketizer_source_valid <= (main_etherbone_rx_depacketizer_sink_valid | main_etherbone_rx_depacketizer_sink_d_last);
			main_etherbone_rx_depacketizer_source_last <= (main_etherbone_rx_depacketizer_sink_last | main_etherbone_rx_depacketizer_sink_d_last);
			main_etherbone_rx_depacketizer_sink_ready <= main_etherbone_rx_depacketizer_source_ready;
			main_etherbone_rx_depacketizer_source_payload_data <= main_etherbone_rx_depacketizer_sink_d_payload_data[31:0];
			main_etherbone_rx_depacketizer_source_payload_data[31] <= main_etherbone_rx_depacketizer_sink_payload_data;
			if (main_etherbone_rx_depacketizer_fsm_from_idle) begin
				main_etherbone_rx_depacketizer_source_valid <= main_etherbone_rx_depacketizer_sink_d_last;
				main_etherbone_rx_depacketizer_sink_ready <= 1'd1;
				if (main_etherbone_rx_depacketizer_sink_valid) begin
					main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value1 <= 1'd0;
					main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value_ce1 <= 1'd1;
					main_etherbone_rx_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((main_etherbone_rx_depacketizer_source_valid & main_etherbone_rx_depacketizer_source_ready)) begin
				if (main_etherbone_rx_depacketizer_source_last) begin
					liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_etherbone_rx_depacketizer_source_valid <= (main_etherbone_rx_depacketizer_sink_valid | main_etherbone_rx_depacketizer_sink_d_last);
			main_etherbone_rx_depacketizer_source_last <= (main_etherbone_rx_depacketizer_sink_last | main_etherbone_rx_depacketizer_sink_d_last);
			main_etherbone_rx_depacketizer_sink_ready <= main_etherbone_rx_depacketizer_source_ready;
			main_etherbone_rx_depacketizer_source_payload_data <= main_etherbone_rx_depacketizer_sink_payload_data;
			if ((main_etherbone_rx_depacketizer_source_valid & main_etherbone_rx_depacketizer_source_ready)) begin
				if (main_etherbone_rx_depacketizer_source_last) begin
					liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_etherbone_rx_depacketizer_sink_ready <= 1'd1;
			main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value0 <= 1'd1;
			main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value_ce0 <= 1'd1;
			if (main_etherbone_rx_depacketizer_sink_valid) begin
				main_etherbone_rx_depacketizer_sr_shift <= 1'd1;
				main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value1 <= 1'd1;
				main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value_ce1 <= 1'd1;
				if (1'd0) begin
					if (1'd0) begin
						liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 2'd2;
					end else begin
						liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 2'd3;
					end
				end else begin
					liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	main_etherbone_rx_depacketizer_source_ready <= 1'd0;
	liteethetherbonepacketrx_fsm_next_state <= 2'd0;
	main_etherbone_rx_source_source_valid <= 1'd0;
	liteethetherbonepacketrx_fsm_next_state <= liteethetherbonepacketrx_fsm_state;
	case (liteethetherbonepacketrx_fsm_state)
		1'd1: begin
			if (main_etherbone_rx_valid) begin
				liteethetherbonepacketrx_fsm_next_state <= 2'd2;
			end else begin
				liteethetherbonepacketrx_fsm_next_state <= 2'd3;
			end
		end
		2'd2: begin
			main_etherbone_rx_source_source_valid <= main_etherbone_rx_depacketizer_source_valid;
			main_etherbone_rx_depacketizer_source_ready <= main_etherbone_rx_source_source_ready;
			if (((main_etherbone_rx_source_source_valid & main_etherbone_rx_source_source_last) & main_etherbone_rx_source_source_ready)) begin
				liteethetherbonepacketrx_fsm_next_state <= 1'd0;
			end
		end
		2'd3: begin
			main_etherbone_rx_depacketizer_source_ready <= 1'd1;
			if (((main_etherbone_rx_depacketizer_source_valid & main_etherbone_rx_depacketizer_source_last) & main_etherbone_rx_depacketizer_source_ready)) begin
				liteethetherbonepacketrx_fsm_next_state <= 1'd0;
			end
		end
		default: begin
			main_etherbone_rx_depacketizer_source_ready <= 1'd1;
			if (main_etherbone_rx_depacketizer_source_valid) begin
				main_etherbone_rx_depacketizer_source_ready <= 1'd0;
				liteethetherbonepacketrx_fsm_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_etherbone_probe_source_valid <= 1'd0;
	main_etherbone_probe_source_first <= 1'd0;
	main_etherbone_probe_source_last <= 1'd0;
	main_etherbone_probe_source_payload_data <= 32'd0;
	main_etherbone_probe_source_payload_error <= 4'd0;
	main_etherbone_probe_source_param_addr_size <= 4'd0;
	main_etherbone_probe_source_param_nr <= 1'd0;
	main_etherbone_probe_source_param_pf <= 1'd0;
	main_etherbone_probe_source_param_port_size <= 4'd0;
	main_etherbone_probe_source_param_pr <= 1'd0;
	liteethetherboneprobe_next_state <= 1'd0;
	main_etherbone_probe_source_param_src_port <= 16'd0;
	main_etherbone_probe_source_param_dst_port <= 16'd0;
	main_etherbone_probe_source_param_ip_address <= 32'd0;
	main_etherbone_probe_source_param_length <= 16'd0;
	main_etherbone_probe_sink_ready <= 1'd0;
	liteethetherboneprobe_next_state <= liteethetherboneprobe_state;
	case (liteethetherboneprobe_state)
		1'd1: begin
			main_etherbone_probe_source_valid <= main_etherbone_probe_sink_valid;
			main_etherbone_probe_sink_ready <= main_etherbone_probe_source_ready;
			main_etherbone_probe_source_first <= main_etherbone_probe_sink_first;
			main_etherbone_probe_source_last <= main_etherbone_probe_sink_last;
			main_etherbone_probe_source_payload_data <= main_etherbone_probe_sink_payload_data;
			main_etherbone_probe_source_payload_error <= main_etherbone_probe_sink_payload_error;
			main_etherbone_probe_source_param_addr_size <= main_etherbone_probe_sink_param_addr_size;
			main_etherbone_probe_source_param_nr <= main_etherbone_probe_sink_param_nr;
			main_etherbone_probe_source_param_pf <= main_etherbone_probe_sink_param_pf;
			main_etherbone_probe_source_param_port_size <= main_etherbone_probe_sink_param_port_size;
			main_etherbone_probe_source_param_pr <= main_etherbone_probe_sink_param_pr;
			main_etherbone_probe_source_param_src_port <= main_etherbone_probe_sink_param_src_port;
			main_etherbone_probe_source_param_dst_port <= main_etherbone_probe_sink_param_dst_port;
			main_etherbone_probe_source_param_ip_address <= main_etherbone_probe_sink_param_ip_address;
			main_etherbone_probe_source_param_length <= main_etherbone_probe_sink_param_length;
			main_etherbone_probe_source_param_pf <= 1'd0;
			main_etherbone_probe_source_param_pr <= 1'd1;
			if (((main_etherbone_probe_source_valid & main_etherbone_probe_source_last) & main_etherbone_probe_source_ready)) begin
				liteethetherboneprobe_next_state <= 1'd0;
			end
		end
		default: begin
			main_etherbone_probe_sink_ready <= 1'd1;
			if (main_etherbone_probe_sink_valid) begin
				main_etherbone_probe_sink_ready <= 1'd0;
				liteethetherboneprobe_next_state <= 1'd1;
			end
		end
	endcase
end
assign main_etherbone_record_depacketizer_sink_valid = main_etherbone_record_sink_sink_valid;
assign main_etherbone_record_sink_sink_ready = main_etherbone_record_depacketizer_sink_ready;
assign main_etherbone_record_depacketizer_sink_first = main_etherbone_record_sink_sink_first;
assign main_etherbone_record_depacketizer_sink_last = main_etherbone_record_sink_sink_last;
assign main_etherbone_record_depacketizer_sink_payload_data = main_etherbone_record_sink_sink_payload_data;
assign main_etherbone_record_depacketizer_sink_payload_error = main_etherbone_record_sink_sink_payload_error;
assign main_etherbone_record_depacketizer_sink_param_addr_size = main_etherbone_record_sink_sink_param_addr_size;
assign main_etherbone_record_depacketizer_sink_param_nr = main_etherbone_record_sink_sink_param_nr;
assign main_etherbone_record_depacketizer_sink_param_pf = main_etherbone_record_sink_sink_param_pf;
assign main_etherbone_record_depacketizer_sink_param_port_size = main_etherbone_record_sink_sink_param_port_size;
assign main_etherbone_record_depacketizer_sink_param_pr = main_etherbone_record_sink_sink_param_pr;
assign main_etherbone_record_depacketizer_sink_param_src_port = main_etherbone_record_sink_sink_param_src_port;
assign main_etherbone_record_depacketizer_sink_param_dst_port = main_etherbone_record_sink_sink_param_dst_port;
assign main_etherbone_record_depacketizer_sink_param_ip_address = main_etherbone_record_sink_sink_param_ip_address;
assign main_etherbone_record_depacketizer_sink_param_length = main_etherbone_record_sink_sink_param_length;
assign main_etherbone_record_receiver_sink_sink_valid = main_etherbone_record_depacketizer_source_valid;
assign main_etherbone_record_depacketizer_source_ready = main_etherbone_record_receiver_sink_sink_ready;
assign main_etherbone_record_receiver_sink_sink_first = main_etherbone_record_depacketizer_source_first;
assign main_etherbone_record_receiver_sink_sink_last = main_etherbone_record_depacketizer_source_last;
assign main_etherbone_record_receiver_sink_sink_payload_error = main_etherbone_record_depacketizer_source_payload_error;
assign main_etherbone_record_receiver_sink_sink_param_bca = main_etherbone_record_depacketizer_source_param_bca;
assign main_etherbone_record_receiver_sink_sink_param_byte_enable = main_etherbone_record_depacketizer_source_param_byte_enable;
assign main_etherbone_record_receiver_sink_sink_param_cyc = main_etherbone_record_depacketizer_source_param_cyc;
assign main_etherbone_record_receiver_sink_sink_param_rca = main_etherbone_record_depacketizer_source_param_rca;
assign main_etherbone_record_receiver_sink_sink_param_rcount = main_etherbone_record_depacketizer_source_param_rcount;
assign main_etherbone_record_receiver_sink_sink_param_rff = main_etherbone_record_depacketizer_source_param_rff;
assign main_etherbone_record_receiver_sink_sink_param_wca = main_etherbone_record_depacketizer_source_param_wca;
assign main_etherbone_record_receiver_sink_sink_param_wcount = main_etherbone_record_depacketizer_source_param_wcount;
assign main_etherbone_record_receiver_sink_sink_param_wff = main_etherbone_record_depacketizer_source_param_wff;
always @(*) begin
	main_etherbone_record_receiver_sink_sink_payload_data <= 32'd0;
	main_etherbone_record_receiver_sink_sink_payload_data <= main_etherbone_record_depacketizer_source_payload_data;
	main_etherbone_record_receiver_sink_sink_payload_data <= {main_etherbone_record_depacketizer_source_payload_data[7:0], main_etherbone_record_depacketizer_source_payload_data[15:8], main_etherbone_record_depacketizer_source_payload_data[23:16], main_etherbone_record_depacketizer_source_payload_data[31:24]};
end
assign main_etherbone_record_packetizer_sink_valid = main_etherbone_record_sender_source_source_valid;
assign main_etherbone_record_sender_source_source_ready = main_etherbone_record_packetizer_sink_ready;
assign main_etherbone_record_packetizer_sink_first = main_etherbone_record_sender_source_source_first;
assign main_etherbone_record_packetizer_sink_last = main_etherbone_record_sender_source_source_last;
assign main_etherbone_record_packetizer_sink_payload_error = main_etherbone_record_sender_source_source_payload_error;
assign main_etherbone_record_packetizer_sink_param_bca = main_etherbone_record_sender_source_source_param_bca;
assign main_etherbone_record_packetizer_sink_param_byte_enable = main_etherbone_record_sender_source_source_param_byte_enable;
assign main_etherbone_record_packetizer_sink_param_cyc = main_etherbone_record_sender_source_source_param_cyc;
assign main_etherbone_record_packetizer_sink_param_rca = main_etherbone_record_sender_source_source_param_rca;
assign main_etherbone_record_packetizer_sink_param_rcount = main_etherbone_record_sender_source_source_param_rcount;
assign main_etherbone_record_packetizer_sink_param_rff = main_etherbone_record_sender_source_source_param_rff;
assign main_etherbone_record_packetizer_sink_param_wca = main_etherbone_record_sender_source_source_param_wca;
assign main_etherbone_record_packetizer_sink_param_wcount = main_etherbone_record_sender_source_source_param_wcount;
assign main_etherbone_record_packetizer_sink_param_wff = main_etherbone_record_sender_source_source_param_wff;
assign main_etherbone_record_source_source_valid = main_etherbone_record_packetizer_source_valid;
assign main_etherbone_record_packetizer_source_ready = main_etherbone_record_source_source_ready;
assign main_etherbone_record_source_source_first = main_etherbone_record_packetizer_source_first;
assign main_etherbone_record_source_source_last = main_etherbone_record_packetizer_source_last;
assign main_etherbone_record_source_source_payload_data = main_etherbone_record_packetizer_source_payload_data;
assign main_etherbone_record_source_source_payload_error = main_etherbone_record_packetizer_source_payload_error;
assign main_etherbone_record_source_source_param_addr_size = main_etherbone_record_packetizer_source_param_addr_size;
assign main_etherbone_record_source_source_param_nr = main_etherbone_record_packetizer_source_param_nr;
assign main_etherbone_record_source_source_param_pf = main_etherbone_record_packetizer_source_param_pf;
assign main_etherbone_record_source_source_param_port_size = main_etherbone_record_packetizer_source_param_port_size;
assign main_etherbone_record_source_source_param_pr = main_etherbone_record_packetizer_source_param_pr;
assign main_etherbone_record_source_source_param_src_port = main_etherbone_record_packetizer_source_param_src_port;
assign main_etherbone_record_source_source_param_dst_port = main_etherbone_record_packetizer_source_param_dst_port;
always @(*) begin
	main_etherbone_record_source_source_param_length <= 16'd0;
	main_etherbone_record_source_source_param_length <= main_etherbone_record_packetizer_source_param_length;
	main_etherbone_record_source_source_param_length <= ((((3'd4 + ((main_etherbone_record_sender_source_source_param_wcount != 1'd0) * 3'd4)) + (main_etherbone_record_sender_source_source_param_wcount * 3'd4)) + ((main_etherbone_record_sender_source_source_param_rcount != 1'd0) * 3'd4)) + (main_etherbone_record_sender_source_source_param_rcount * 3'd4));
end
always @(*) begin
	main_etherbone_record_source_source_param_ip_address <= 32'd0;
	main_etherbone_record_source_source_param_ip_address <= main_etherbone_record_packetizer_source_param_ip_address;
	main_etherbone_record_source_source_param_ip_address <= main_etherbone_record_last_ip_address;
end
always @(*) begin
	main_etherbone_record_packetizer_sink_payload_data <= 32'd0;
	main_etherbone_record_packetizer_sink_payload_data <= main_etherbone_record_sender_source_source_payload_data;
	main_etherbone_record_packetizer_sink_payload_data <= {main_etherbone_record_sender_source_source_payload_data[7:0], main_etherbone_record_sender_source_source_payload_data[15:8], main_etherbone_record_sender_source_source_payload_data[23:16], main_etherbone_record_sender_source_source_payload_data[31:24]};
end
assign main_etherbone_record_depacketizer_header = main_etherbone_record_depacketizer_sr;
assign main_etherbone_record_depacketizer_source_param_bca = {slice_proxy84};
assign main_etherbone_record_depacketizer_source_param_byte_enable = {slice_proxy85[7:0]};
assign main_etherbone_record_depacketizer_source_param_cyc = {slice_proxy86};
assign main_etherbone_record_depacketizer_source_param_rca = {slice_proxy87};
assign main_etherbone_record_depacketizer_source_param_rcount = {slice_proxy88[7:0]};
assign main_etherbone_record_depacketizer_source_param_rff = {slice_proxy89};
assign main_etherbone_record_depacketizer_source_param_wca = {slice_proxy90};
assign main_etherbone_record_depacketizer_source_param_wcount = {slice_proxy91[7:0]};
assign main_etherbone_record_depacketizer_source_param_wff = {slice_proxy92};
assign main_etherbone_record_depacketizer_source_payload_error = main_etherbone_record_depacketizer_sink_payload_error;
always @(*) begin
	main_etherbone_record_depacketizer_source_valid <= 1'd0;
	main_etherbone_record_depacketizer_sr_shift <= 1'd0;
	main_etherbone_record_depacketizer_sink_ready <= 1'd0;
	liteethetherbonerecorddepacketizer_next_state <= 2'd0;
	main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value0 <= 1'd0;
	main_etherbone_record_depacketizer_source_last <= 1'd0;
	main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value_ce0 <= 1'd0;
	main_etherbone_record_depacketizer_source_payload_data <= 32'd0;
	main_etherbone_record_depacketizer_sr_shift_leftover <= 1'd0;
	main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value1 <= 1'd0;
	main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value_ce1 <= 1'd0;
	liteethetherbonerecorddepacketizer_next_state <= liteethetherbonerecorddepacketizer_state;
	case (liteethetherbonerecorddepacketizer_state)
		1'd1: begin
			main_etherbone_record_depacketizer_sink_ready <= 1'd1;
			if (main_etherbone_record_depacketizer_sink_valid) begin
				main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value0 <= (main_etherbone_record_depacketizer_count + 1'd1);
				main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value_ce0 <= 1'd1;
				main_etherbone_record_depacketizer_sr_shift <= 1'd1;
				if ((main_etherbone_record_depacketizer_count == 1'd0)) begin
					if (1'd0) begin
						main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value0 <= (main_etherbone_record_depacketizer_count + 1'd1);
						main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value_ce0 <= 1'd1;
						liteethetherbonerecorddepacketizer_next_state <= 2'd2;
					end else begin
						liteethetherbonerecorddepacketizer_next_state <= 2'd3;
					end
				end
			end
		end
		2'd2: begin
			main_etherbone_record_depacketizer_source_valid <= (main_etherbone_record_depacketizer_sink_valid | main_etherbone_record_depacketizer_sink_d_last);
			main_etherbone_record_depacketizer_source_last <= (main_etherbone_record_depacketizer_sink_last | main_etherbone_record_depacketizer_sink_d_last);
			main_etherbone_record_depacketizer_sink_ready <= main_etherbone_record_depacketizer_source_ready;
			main_etherbone_record_depacketizer_source_payload_data <= main_etherbone_record_depacketizer_sink_d_payload_data[31:0];
			main_etherbone_record_depacketizer_source_payload_data[31] <= main_etherbone_record_depacketizer_sink_payload_data;
			if (main_etherbone_record_depacketizer_fsm_from_idle) begin
				main_etherbone_record_depacketizer_source_valid <= main_etherbone_record_depacketizer_sink_d_last;
				main_etherbone_record_depacketizer_sink_ready <= 1'd1;
				if (main_etherbone_record_depacketizer_sink_valid) begin
					main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value1 <= 1'd0;
					main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value_ce1 <= 1'd1;
					main_etherbone_record_depacketizer_sr_shift_leftover <= 1'd1;
				end
			end
			if ((main_etherbone_record_depacketizer_source_valid & main_etherbone_record_depacketizer_source_ready)) begin
				if (main_etherbone_record_depacketizer_source_last) begin
					liteethetherbonerecorddepacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_etherbone_record_depacketizer_source_valid <= (main_etherbone_record_depacketizer_sink_valid | main_etherbone_record_depacketizer_sink_d_last);
			main_etherbone_record_depacketizer_source_last <= (main_etherbone_record_depacketizer_sink_last | main_etherbone_record_depacketizer_sink_d_last);
			main_etherbone_record_depacketizer_sink_ready <= main_etherbone_record_depacketizer_source_ready;
			main_etherbone_record_depacketizer_source_payload_data <= main_etherbone_record_depacketizer_sink_payload_data;
			if ((main_etherbone_record_depacketizer_source_valid & main_etherbone_record_depacketizer_source_ready)) begin
				if (main_etherbone_record_depacketizer_source_last) begin
					liteethetherbonerecorddepacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_etherbone_record_depacketizer_sink_ready <= 1'd1;
			main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value0 <= 1'd1;
			main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value_ce0 <= 1'd1;
			if (main_etherbone_record_depacketizer_sink_valid) begin
				main_etherbone_record_depacketizer_sr_shift <= 1'd1;
				main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value1 <= 1'd1;
				main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value_ce1 <= 1'd1;
				if (1'd1) begin
					if (1'd0) begin
						liteethetherbonerecorddepacketizer_next_state <= 2'd2;
					end else begin
						liteethetherbonerecorddepacketizer_next_state <= 2'd3;
					end
				end else begin
					liteethetherbonerecorddepacketizer_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign main_etherbone_record_receiver_fifo_sink_valid = main_etherbone_record_receiver_sink_sink_valid;
assign main_etherbone_record_receiver_sink_sink_ready = main_etherbone_record_receiver_fifo_sink_ready;
assign main_etherbone_record_receiver_fifo_sink_first = main_etherbone_record_receiver_sink_sink_first;
assign main_etherbone_record_receiver_fifo_sink_last = main_etherbone_record_receiver_sink_sink_last;
assign main_etherbone_record_receiver_fifo_sink_payload_data = main_etherbone_record_receiver_sink_sink_payload_data;
assign main_etherbone_record_receiver_fifo_sink_payload_error = main_etherbone_record_receiver_sink_sink_payload_error;
assign main_etherbone_record_receiver_fifo_sink_param_bca = main_etherbone_record_receiver_sink_sink_param_bca;
assign main_etherbone_record_receiver_fifo_sink_param_byte_enable = main_etherbone_record_receiver_sink_sink_param_byte_enable;
assign main_etherbone_record_receiver_fifo_sink_param_cyc = main_etherbone_record_receiver_sink_sink_param_cyc;
assign main_etherbone_record_receiver_fifo_sink_param_rca = main_etherbone_record_receiver_sink_sink_param_rca;
assign main_etherbone_record_receiver_fifo_sink_param_rcount = main_etherbone_record_receiver_sink_sink_param_rcount;
assign main_etherbone_record_receiver_fifo_sink_param_rff = main_etherbone_record_receiver_sink_sink_param_rff;
assign main_etherbone_record_receiver_fifo_sink_param_wca = main_etherbone_record_receiver_sink_sink_param_wca;
assign main_etherbone_record_receiver_fifo_sink_param_wcount = main_etherbone_record_receiver_sink_sink_param_wcount;
assign main_etherbone_record_receiver_fifo_sink_param_wff = main_etherbone_record_receiver_sink_sink_param_wff;
assign main_etherbone_record_receiver_fifo_syncfifo_din = {main_etherbone_record_receiver_fifo_fifo_in_last, main_etherbone_record_receiver_fifo_fifo_in_first, main_etherbone_record_receiver_fifo_fifo_in_param_wff, main_etherbone_record_receiver_fifo_fifo_in_param_wcount, main_etherbone_record_receiver_fifo_fifo_in_param_wca, main_etherbone_record_receiver_fifo_fifo_in_param_rff, main_etherbone_record_receiver_fifo_fifo_in_param_rcount, main_etherbone_record_receiver_fifo_fifo_in_param_rca, main_etherbone_record_receiver_fifo_fifo_in_param_cyc, main_etherbone_record_receiver_fifo_fifo_in_param_byte_enable, main_etherbone_record_receiver_fifo_fifo_in_param_bca, main_etherbone_record_receiver_fifo_fifo_in_payload_error, main_etherbone_record_receiver_fifo_fifo_in_payload_data};
assign {main_etherbone_record_receiver_fifo_fifo_out_last, main_etherbone_record_receiver_fifo_fifo_out_first, main_etherbone_record_receiver_fifo_fifo_out_param_wff, main_etherbone_record_receiver_fifo_fifo_out_param_wcount, main_etherbone_record_receiver_fifo_fifo_out_param_wca, main_etherbone_record_receiver_fifo_fifo_out_param_rff, main_etherbone_record_receiver_fifo_fifo_out_param_rcount, main_etherbone_record_receiver_fifo_fifo_out_param_rca, main_etherbone_record_receiver_fifo_fifo_out_param_cyc, main_etherbone_record_receiver_fifo_fifo_out_param_byte_enable, main_etherbone_record_receiver_fifo_fifo_out_param_bca, main_etherbone_record_receiver_fifo_fifo_out_payload_error, main_etherbone_record_receiver_fifo_fifo_out_payload_data} = main_etherbone_record_receiver_fifo_syncfifo_dout;
assign main_etherbone_record_receiver_fifo_sink_ready = main_etherbone_record_receiver_fifo_syncfifo_writable;
assign main_etherbone_record_receiver_fifo_syncfifo_we = main_etherbone_record_receiver_fifo_sink_valid;
assign main_etherbone_record_receiver_fifo_fifo_in_first = main_etherbone_record_receiver_fifo_sink_first;
assign main_etherbone_record_receiver_fifo_fifo_in_last = main_etherbone_record_receiver_fifo_sink_last;
assign main_etherbone_record_receiver_fifo_fifo_in_payload_data = main_etherbone_record_receiver_fifo_sink_payload_data;
assign main_etherbone_record_receiver_fifo_fifo_in_payload_error = main_etherbone_record_receiver_fifo_sink_payload_error;
assign main_etherbone_record_receiver_fifo_fifo_in_param_bca = main_etherbone_record_receiver_fifo_sink_param_bca;
assign main_etherbone_record_receiver_fifo_fifo_in_param_byte_enable = main_etherbone_record_receiver_fifo_sink_param_byte_enable;
assign main_etherbone_record_receiver_fifo_fifo_in_param_cyc = main_etherbone_record_receiver_fifo_sink_param_cyc;
assign main_etherbone_record_receiver_fifo_fifo_in_param_rca = main_etherbone_record_receiver_fifo_sink_param_rca;
assign main_etherbone_record_receiver_fifo_fifo_in_param_rcount = main_etherbone_record_receiver_fifo_sink_param_rcount;
assign main_etherbone_record_receiver_fifo_fifo_in_param_rff = main_etherbone_record_receiver_fifo_sink_param_rff;
assign main_etherbone_record_receiver_fifo_fifo_in_param_wca = main_etherbone_record_receiver_fifo_sink_param_wca;
assign main_etherbone_record_receiver_fifo_fifo_in_param_wcount = main_etherbone_record_receiver_fifo_sink_param_wcount;
assign main_etherbone_record_receiver_fifo_fifo_in_param_wff = main_etherbone_record_receiver_fifo_sink_param_wff;
assign main_etherbone_record_receiver_fifo_source_valid = main_etherbone_record_receiver_fifo_readable;
assign main_etherbone_record_receiver_fifo_source_first = main_etherbone_record_receiver_fifo_fifo_out_first;
assign main_etherbone_record_receiver_fifo_source_last = main_etherbone_record_receiver_fifo_fifo_out_last;
assign main_etherbone_record_receiver_fifo_source_payload_data = main_etherbone_record_receiver_fifo_fifo_out_payload_data;
assign main_etherbone_record_receiver_fifo_source_payload_error = main_etherbone_record_receiver_fifo_fifo_out_payload_error;
assign main_etherbone_record_receiver_fifo_source_param_bca = main_etherbone_record_receiver_fifo_fifo_out_param_bca;
assign main_etherbone_record_receiver_fifo_source_param_byte_enable = main_etherbone_record_receiver_fifo_fifo_out_param_byte_enable;
assign main_etherbone_record_receiver_fifo_source_param_cyc = main_etherbone_record_receiver_fifo_fifo_out_param_cyc;
assign main_etherbone_record_receiver_fifo_source_param_rca = main_etherbone_record_receiver_fifo_fifo_out_param_rca;
assign main_etherbone_record_receiver_fifo_source_param_rcount = main_etherbone_record_receiver_fifo_fifo_out_param_rcount;
assign main_etherbone_record_receiver_fifo_source_param_rff = main_etherbone_record_receiver_fifo_fifo_out_param_rff;
assign main_etherbone_record_receiver_fifo_source_param_wca = main_etherbone_record_receiver_fifo_fifo_out_param_wca;
assign main_etherbone_record_receiver_fifo_source_param_wcount = main_etherbone_record_receiver_fifo_fifo_out_param_wcount;
assign main_etherbone_record_receiver_fifo_source_param_wff = main_etherbone_record_receiver_fifo_fifo_out_param_wff;
assign main_etherbone_record_receiver_fifo_re = main_etherbone_record_receiver_fifo_source_ready;
assign main_etherbone_record_receiver_fifo_syncfifo_re = (main_etherbone_record_receiver_fifo_syncfifo_readable & ((~main_etherbone_record_receiver_fifo_readable) | main_etherbone_record_receiver_fifo_re));
assign main_etherbone_record_receiver_fifo_level1 = (main_etherbone_record_receiver_fifo_level0 + main_etherbone_record_receiver_fifo_readable);
always @(*) begin
	main_etherbone_record_receiver_fifo_wrport_adr <= 2'd0;
	if (main_etherbone_record_receiver_fifo_replace) begin
		main_etherbone_record_receiver_fifo_wrport_adr <= (main_etherbone_record_receiver_fifo_produce - 1'd1);
	end else begin
		main_etherbone_record_receiver_fifo_wrport_adr <= main_etherbone_record_receiver_fifo_produce;
	end
end
assign main_etherbone_record_receiver_fifo_wrport_dat_w = main_etherbone_record_receiver_fifo_syncfifo_din;
assign main_etherbone_record_receiver_fifo_wrport_we = (main_etherbone_record_receiver_fifo_syncfifo_we & (main_etherbone_record_receiver_fifo_syncfifo_writable | main_etherbone_record_receiver_fifo_replace));
assign main_etherbone_record_receiver_fifo_do_read = (main_etherbone_record_receiver_fifo_syncfifo_readable & main_etherbone_record_receiver_fifo_syncfifo_re);
assign main_etherbone_record_receiver_fifo_rdport_adr = main_etherbone_record_receiver_fifo_consume;
assign main_etherbone_record_receiver_fifo_syncfifo_dout = main_etherbone_record_receiver_fifo_rdport_dat_r;
assign main_etherbone_record_receiver_fifo_rdport_re = main_etherbone_record_receiver_fifo_do_read;
assign main_etherbone_record_receiver_fifo_syncfifo_writable = (main_etherbone_record_receiver_fifo_level0 != 3'd4);
assign main_etherbone_record_receiver_fifo_syncfifo_readable = (main_etherbone_record_receiver_fifo_level0 != 1'd0);
always @(*) begin
	main_etherbone_record_receiver_source_source_last <= 1'd0;
	main_etherbone_record_receiver_source_source_payload_addr <= 32'd0;
	main_etherbone_record_receiver_source_source_payload_data <= 32'd0;
	main_etherbone_record_receiver_source_source_param_we <= 1'd0;
	main_etherbone_record_receiver_source_source_param_count <= 8'd0;
	main_etherbone_record_receiver_source_source_param_base_addr <= 32'd0;
	main_etherbone_record_receiver_source_source_param_be <= 4'd0;
	main_etherbone_record_receiver_fifo_source_ready <= 1'd0;
	liteethetherbonerecordreceiver_next_state <= 2'd0;
	main_etherbone_record_receiver_base_addr_update <= 1'd0;
	main_etherbone_record_receiver_source_source_valid <= 1'd0;
	main_etherbone_record_receiver_counter_reset <= 1'd0;
	main_etherbone_record_receiver_counter_ce <= 1'd0;
	liteethetherbonerecordreceiver_next_state <= liteethetherbonerecordreceiver_state;
	case (liteethetherbonerecordreceiver_state)
		1'd1: begin
			main_etherbone_record_receiver_source_source_valid <= main_etherbone_record_receiver_fifo_source_valid;
			main_etherbone_record_receiver_source_source_last <= (main_etherbone_record_receiver_counter == (main_etherbone_record_receiver_fifo_source_param_wcount - 1'd1));
			main_etherbone_record_receiver_source_source_param_count <= main_etherbone_record_receiver_fifo_source_param_wcount;
			main_etherbone_record_receiver_source_source_param_be <= main_etherbone_record_receiver_fifo_source_param_byte_enable;
			main_etherbone_record_receiver_source_source_payload_addr <= (main_etherbone_record_receiver_base_addr[31:2] + main_etherbone_record_receiver_counter);
			main_etherbone_record_receiver_source_source_param_we <= 1'd1;
			main_etherbone_record_receiver_source_source_payload_data <= main_etherbone_record_receiver_fifo_source_payload_data;
			main_etherbone_record_receiver_fifo_source_ready <= main_etherbone_record_receiver_source_source_ready;
			if ((main_etherbone_record_receiver_source_source_valid & main_etherbone_record_receiver_source_source_ready)) begin
				main_etherbone_record_receiver_counter_ce <= 1'd1;
				if (main_etherbone_record_receiver_source_source_last) begin
					if (main_etherbone_record_receiver_fifo_source_param_rcount) begin
						liteethetherbonerecordreceiver_next_state <= 2'd2;
					end else begin
						liteethetherbonerecordreceiver_next_state <= 1'd0;
					end
				end
			end
		end
		2'd2: begin
			main_etherbone_record_receiver_counter_reset <= 1'd1;
			if (main_etherbone_record_receiver_fifo_source_valid) begin
				main_etherbone_record_receiver_base_addr_update <= 1'd1;
				liteethetherbonerecordreceiver_next_state <= 2'd3;
			end
		end
		2'd3: begin
			main_etherbone_record_receiver_source_source_valid <= main_etherbone_record_receiver_fifo_source_valid;
			main_etherbone_record_receiver_source_source_last <= (main_etherbone_record_receiver_counter == (main_etherbone_record_receiver_fifo_source_param_rcount - 1'd1));
			main_etherbone_record_receiver_source_source_param_count <= main_etherbone_record_receiver_fifo_source_param_rcount;
			main_etherbone_record_receiver_source_source_param_base_addr <= main_etherbone_record_receiver_base_addr;
			main_etherbone_record_receiver_source_source_payload_addr <= main_etherbone_record_receiver_fifo_source_payload_data[31:2];
			main_etherbone_record_receiver_fifo_source_ready <= main_etherbone_record_receiver_source_source_ready;
			if ((main_etherbone_record_receiver_source_source_valid & main_etherbone_record_receiver_source_source_ready)) begin
				main_etherbone_record_receiver_counter_ce <= 1'd1;
				if (main_etherbone_record_receiver_source_source_last) begin
					liteethetherbonerecordreceiver_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_etherbone_record_receiver_fifo_source_ready <= 1'd1;
			main_etherbone_record_receiver_counter_reset <= 1'd1;
			if (main_etherbone_record_receiver_fifo_source_valid) begin
				main_etherbone_record_receiver_base_addr_update <= 1'd1;
				if (main_etherbone_record_receiver_fifo_source_param_wcount) begin
					liteethetherbonerecordreceiver_next_state <= 1'd1;
				end else begin
					if (main_etherbone_record_receiver_fifo_source_param_rcount) begin
						liteethetherbonerecordreceiver_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
assign main_etherbone_record_sender_fifo_sink_valid = main_etherbone_record_sender_sink_sink_valid;
assign main_etherbone_record_sender_sink_sink_ready = main_etherbone_record_sender_fifo_sink_ready;
assign main_etherbone_record_sender_fifo_sink_first = main_etherbone_record_sender_sink_sink_first;
assign main_etherbone_record_sender_fifo_sink_last = main_etherbone_record_sender_sink_sink_last;
assign main_etherbone_record_sender_fifo_sink_payload_addr = main_etherbone_record_sender_sink_sink_payload_addr;
assign main_etherbone_record_sender_fifo_sink_payload_data = main_etherbone_record_sender_sink_sink_payload_data;
assign main_etherbone_record_sender_fifo_sink_param_we = main_etherbone_record_sender_sink_sink_param_we;
assign main_etherbone_record_sender_fifo_sink_param_count = main_etherbone_record_sender_sink_sink_param_count;
assign main_etherbone_record_sender_fifo_sink_param_base_addr = main_etherbone_record_sender_sink_sink_param_base_addr;
assign main_etherbone_record_sender_fifo_sink_param_be = main_etherbone_record_sender_sink_sink_param_be;
assign main_etherbone_record_sender_fifo_syncfifo_din = {main_etherbone_record_sender_fifo_fifo_in_last, main_etherbone_record_sender_fifo_fifo_in_first, main_etherbone_record_sender_fifo_fifo_in_param_be, main_etherbone_record_sender_fifo_fifo_in_param_base_addr, main_etherbone_record_sender_fifo_fifo_in_param_count, main_etherbone_record_sender_fifo_fifo_in_param_we, main_etherbone_record_sender_fifo_fifo_in_payload_data, main_etherbone_record_sender_fifo_fifo_in_payload_addr};
assign {main_etherbone_record_sender_fifo_fifo_out_last, main_etherbone_record_sender_fifo_fifo_out_first, main_etherbone_record_sender_fifo_fifo_out_param_be, main_etherbone_record_sender_fifo_fifo_out_param_base_addr, main_etherbone_record_sender_fifo_fifo_out_param_count, main_etherbone_record_sender_fifo_fifo_out_param_we, main_etherbone_record_sender_fifo_fifo_out_payload_data, main_etherbone_record_sender_fifo_fifo_out_payload_addr} = main_etherbone_record_sender_fifo_syncfifo_dout;
assign main_etherbone_record_sender_fifo_sink_ready = main_etherbone_record_sender_fifo_syncfifo_writable;
assign main_etherbone_record_sender_fifo_syncfifo_we = main_etherbone_record_sender_fifo_sink_valid;
assign main_etherbone_record_sender_fifo_fifo_in_first = main_etherbone_record_sender_fifo_sink_first;
assign main_etherbone_record_sender_fifo_fifo_in_last = main_etherbone_record_sender_fifo_sink_last;
assign main_etherbone_record_sender_fifo_fifo_in_payload_addr = main_etherbone_record_sender_fifo_sink_payload_addr;
assign main_etherbone_record_sender_fifo_fifo_in_payload_data = main_etherbone_record_sender_fifo_sink_payload_data;
assign main_etherbone_record_sender_fifo_fifo_in_param_we = main_etherbone_record_sender_fifo_sink_param_we;
assign main_etherbone_record_sender_fifo_fifo_in_param_count = main_etherbone_record_sender_fifo_sink_param_count;
assign main_etherbone_record_sender_fifo_fifo_in_param_base_addr = main_etherbone_record_sender_fifo_sink_param_base_addr;
assign main_etherbone_record_sender_fifo_fifo_in_param_be = main_etherbone_record_sender_fifo_sink_param_be;
assign main_etherbone_record_sender_fifo_source_valid = main_etherbone_record_sender_fifo_readable;
assign main_etherbone_record_sender_fifo_source_first = main_etherbone_record_sender_fifo_fifo_out_first;
assign main_etherbone_record_sender_fifo_source_last = main_etherbone_record_sender_fifo_fifo_out_last;
assign main_etherbone_record_sender_fifo_source_payload_addr = main_etherbone_record_sender_fifo_fifo_out_payload_addr;
assign main_etherbone_record_sender_fifo_source_payload_data = main_etherbone_record_sender_fifo_fifo_out_payload_data;
assign main_etherbone_record_sender_fifo_source_param_we = main_etherbone_record_sender_fifo_fifo_out_param_we;
assign main_etherbone_record_sender_fifo_source_param_count = main_etherbone_record_sender_fifo_fifo_out_param_count;
assign main_etherbone_record_sender_fifo_source_param_base_addr = main_etherbone_record_sender_fifo_fifo_out_param_base_addr;
assign main_etherbone_record_sender_fifo_source_param_be = main_etherbone_record_sender_fifo_fifo_out_param_be;
assign main_etherbone_record_sender_fifo_re = main_etherbone_record_sender_fifo_source_ready;
assign main_etherbone_record_sender_fifo_syncfifo_re = (main_etherbone_record_sender_fifo_syncfifo_readable & ((~main_etherbone_record_sender_fifo_readable) | main_etherbone_record_sender_fifo_re));
assign main_etherbone_record_sender_fifo_level1 = (main_etherbone_record_sender_fifo_level0 + main_etherbone_record_sender_fifo_readable);
always @(*) begin
	main_etherbone_record_sender_fifo_wrport_adr <= 2'd0;
	if (main_etherbone_record_sender_fifo_replace) begin
		main_etherbone_record_sender_fifo_wrport_adr <= (main_etherbone_record_sender_fifo_produce - 1'd1);
	end else begin
		main_etherbone_record_sender_fifo_wrport_adr <= main_etherbone_record_sender_fifo_produce;
	end
end
assign main_etherbone_record_sender_fifo_wrport_dat_w = main_etherbone_record_sender_fifo_syncfifo_din;
assign main_etherbone_record_sender_fifo_wrport_we = (main_etherbone_record_sender_fifo_syncfifo_we & (main_etherbone_record_sender_fifo_syncfifo_writable | main_etherbone_record_sender_fifo_replace));
assign main_etherbone_record_sender_fifo_do_read = (main_etherbone_record_sender_fifo_syncfifo_readable & main_etherbone_record_sender_fifo_syncfifo_re);
assign main_etherbone_record_sender_fifo_rdport_adr = main_etherbone_record_sender_fifo_consume;
assign main_etherbone_record_sender_fifo_syncfifo_dout = main_etherbone_record_sender_fifo_rdport_dat_r;
assign main_etherbone_record_sender_fifo_rdport_re = main_etherbone_record_sender_fifo_do_read;
assign main_etherbone_record_sender_fifo_syncfifo_writable = (main_etherbone_record_sender_fifo_level0 != 3'd4);
assign main_etherbone_record_sender_fifo_syncfifo_readable = (main_etherbone_record_sender_fifo_level0 != 1'd0);
always @(*) begin
	main_etherbone_record_sender_data_sel <= 1'd0;
	main_etherbone_record_sender_source_source_valid <= 1'd0;
	main_etherbone_record_sender_fifo_source_ready <= 1'd0;
	main_etherbone_record_sender_source_source_last <= 1'd0;
	liteethetherbonerecordsender_next_state <= 2'd0;
	liteethetherbonerecordsender_next_state <= liteethetherbonerecordsender_state;
	case (liteethetherbonerecordsender_state)
		1'd1: begin
			main_etherbone_record_sender_source_source_valid <= 1'd1;
			main_etherbone_record_sender_source_source_last <= 1'd0;
			if (main_etherbone_record_sender_source_source_ready) begin
				main_etherbone_record_sender_data_sel <= 1'd1;
				liteethetherbonerecordsender_next_state <= 2'd2;
			end
		end
		2'd2: begin
			main_etherbone_record_sender_source_source_valid <= 1'd1;
			main_etherbone_record_sender_source_source_last <= main_etherbone_record_sender_fifo_source_last;
			main_etherbone_record_sender_data_sel <= 1'd1;
			if ((main_etherbone_record_sender_source_source_valid & main_etherbone_record_sender_source_source_ready)) begin
				main_etherbone_record_sender_fifo_source_ready <= 1'd1;
				if (main_etherbone_record_sender_source_source_last) begin
					liteethetherbonerecordsender_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_etherbone_record_sender_fifo_source_ready <= 1'd1;
			if (main_etherbone_record_sender_fifo_source_valid) begin
				main_etherbone_record_sender_fifo_source_ready <= 1'd0;
				liteethetherbonerecordsender_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	main_etherbone_record_packetizer_header <= 32'd0;
	main_etherbone_record_packetizer_header[0] <= {main_etherbone_record_packetizer_sink_param_bca};
	main_etherbone_record_packetizer_header[15:8] <= {main_etherbone_record_packetizer_sink_param_byte_enable[7:0]};
	main_etherbone_record_packetizer_header[4] <= {main_etherbone_record_packetizer_sink_param_cyc};
	main_etherbone_record_packetizer_header[1] <= {main_etherbone_record_packetizer_sink_param_rca};
	main_etherbone_record_packetizer_header[31:24] <= {main_etherbone_record_packetizer_sink_param_rcount[7:0]};
	main_etherbone_record_packetizer_header[2] <= {main_etherbone_record_packetizer_sink_param_rff};
	main_etherbone_record_packetizer_header[5] <= {main_etherbone_record_packetizer_sink_param_wca};
	main_etherbone_record_packetizer_header[23:16] <= {main_etherbone_record_packetizer_sink_param_wcount[7:0]};
	main_etherbone_record_packetizer_header[6] <= {main_etherbone_record_packetizer_sink_param_wff};
end
assign main_etherbone_record_packetizer_source_payload_error = main_etherbone_record_packetizer_sink_payload_error;
always @(*) begin
	main_etherbone_record_packetizer_source_last <= 1'd0;
	main_etherbone_record_packetizer_source_payload_data <= 32'd0;
	main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value1 <= 1'd0;
	main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value_ce1 <= 1'd0;
	main_etherbone_record_packetizer_sr_shift <= 1'd0;
	liteethetherbonerecordpacketizer_next_state <= 2'd0;
	main_etherbone_record_packetizer_source_valid <= 1'd0;
	main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value0 <= 1'd0;
	main_etherbone_record_packetizer_sr_load <= 1'd0;
	main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value_ce0 <= 1'd0;
	main_etherbone_record_packetizer_sink_ready <= 1'd0;
	liteethetherbonerecordpacketizer_next_state <= liteethetherbonerecordpacketizer_state;
	case (liteethetherbonerecordpacketizer_state)
		1'd1: begin
			main_etherbone_record_packetizer_source_valid <= 1'd1;
			main_etherbone_record_packetizer_source_last <= 1'd0;
			main_etherbone_record_packetizer_source_payload_data <= main_etherbone_record_packetizer_sr[31];
			if ((main_etherbone_record_packetizer_source_valid & main_etherbone_record_packetizer_source_ready)) begin
				main_etherbone_record_packetizer_sr_shift <= 1'd1;
				if ((main_etherbone_record_packetizer_count == 1'd0)) begin
					main_etherbone_record_packetizer_sr_shift <= 1'd0;
					if (1'd0) begin
						liteethetherbonerecordpacketizer_next_state <= 2'd3;
						main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value0 <= (main_etherbone_record_packetizer_count + 1'd1);
						main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value_ce0 <= 1'd1;
					end else begin
						liteethetherbonerecordpacketizer_next_state <= 2'd2;
					end
				end else begin
					main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value0 <= (main_etherbone_record_packetizer_count + 1'd1);
					main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			main_etherbone_record_packetizer_source_valid <= main_etherbone_record_packetizer_sink_valid;
			main_etherbone_record_packetizer_source_last <= main_etherbone_record_packetizer_sink_last;
			main_etherbone_record_packetizer_source_payload_data <= main_etherbone_record_packetizer_sink_payload_data;
			if ((main_etherbone_record_packetizer_source_valid & main_etherbone_record_packetizer_source_ready)) begin
				main_etherbone_record_packetizer_sink_ready <= 1'd1;
				if (main_etherbone_record_packetizer_source_last) begin
					liteethetherbonerecordpacketizer_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			main_etherbone_record_packetizer_source_valid <= (main_etherbone_record_packetizer_sink_valid | main_etherbone_record_packetizer_sink_d_last);
			main_etherbone_record_packetizer_source_last <= main_etherbone_record_packetizer_sink_d_last;
			if (main_etherbone_record_packetizer_fsm_from_idle) begin
				main_etherbone_record_packetizer_source_payload_data[0] <= main_etherbone_record_packetizer_sr[31];
			end else begin
				main_etherbone_record_packetizer_source_payload_data[0] <= main_etherbone_record_packetizer_sink_d_payload_data[31];
			end
			main_etherbone_record_packetizer_source_payload_data[31:0] <= main_etherbone_record_packetizer_sink_payload_data;
			if ((main_etherbone_record_packetizer_source_valid & main_etherbone_record_packetizer_source_ready)) begin
				main_etherbone_record_packetizer_sink_ready <= (~main_etherbone_record_packetizer_source_last);
				main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value1 <= 1'd0;
				main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value_ce1 <= 1'd1;
				if (main_etherbone_record_packetizer_source_last) begin
					liteethetherbonerecordpacketizer_next_state <= 1'd0;
				end
			end
		end
		default: begin
			main_etherbone_record_packetizer_sink_ready <= 1'd1;
			main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value0 <= 1'd1;
			main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value_ce0 <= 1'd1;
			if (main_etherbone_record_packetizer_sink_valid) begin
				main_etherbone_record_packetizer_sink_ready <= 1'd0;
				main_etherbone_record_packetizer_source_valid <= 1'd1;
				main_etherbone_record_packetizer_source_last <= 1'd0;
				main_etherbone_record_packetizer_source_payload_data <= main_etherbone_record_packetizer_header[31:0];
				if ((main_etherbone_record_packetizer_source_valid & main_etherbone_record_packetizer_source_ready)) begin
					main_etherbone_record_packetizer_sr_load <= 1'd1;
					main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value1 <= 1'd1;
					main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value_ce1 <= 1'd1;
					if (1'd1) begin
						if (1'd0) begin
							liteethetherbonerecordpacketizer_next_state <= 2'd3;
						end else begin
							liteethetherbonerecordpacketizer_next_state <= 2'd2;
						end
					end else begin
						liteethetherbonerecordpacketizer_next_state <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_etherbone_dispatcher_sel1 <= 1'd0;
	if (main_etherbone_dispatcher_first) begin
		main_etherbone_dispatcher_sel1 <= main_etherbone_dispatcher_sel0;
	end else begin
		main_etherbone_dispatcher_sel1 <= main_etherbone_dispatcher_sel_ongoing;
	end
end
always @(*) begin
	main_etherbone_record_sink_sink_param_dst_port <= 16'd0;
	main_etherbone_probe_sink_param_ip_address <= 32'd0;
	main_etherbone_record_sink_sink_param_ip_address <= 32'd0;
	main_etherbone_probe_sink_param_length <= 16'd0;
	main_etherbone_record_sink_sink_param_length <= 16'd0;
	main_etherbone_rx_source_source_ready <= 1'd0;
	main_etherbone_record_sink_sink_param_pf <= 1'd0;
	main_etherbone_record_sink_sink_param_port_size <= 4'd0;
	main_etherbone_probe_sink_valid <= 1'd0;
	main_etherbone_record_sink_sink_valid <= 1'd0;
	main_etherbone_record_sink_sink_param_pr <= 1'd0;
	main_etherbone_probe_sink_first <= 1'd0;
	main_etherbone_probe_sink_last <= 1'd0;
	main_etherbone_record_sink_sink_first <= 1'd0;
	main_etherbone_probe_sink_payload_data <= 32'd0;
	main_etherbone_record_sink_sink_last <= 1'd0;
	main_etherbone_probe_sink_payload_error <= 4'd0;
	main_etherbone_record_sink_sink_payload_data <= 32'd0;
	main_etherbone_probe_sink_param_addr_size <= 4'd0;
	main_etherbone_record_sink_sink_payload_error <= 4'd0;
	main_etherbone_probe_sink_param_nr <= 1'd0;
	main_etherbone_record_sink_sink_param_addr_size <= 4'd0;
	main_etherbone_probe_sink_param_pf <= 1'd0;
	main_etherbone_record_sink_sink_param_nr <= 1'd0;
	main_etherbone_probe_sink_param_port_size <= 4'd0;
	main_etherbone_record_sink_sink_param_src_port <= 16'd0;
	main_etherbone_probe_sink_param_pr <= 1'd0;
	main_etherbone_probe_sink_param_src_port <= 16'd0;
	main_etherbone_probe_sink_param_dst_port <= 16'd0;
	case (main_etherbone_dispatcher_sel1)
		1'd0: begin
			main_etherbone_probe_sink_valid <= main_etherbone_rx_source_source_valid;
			main_etherbone_rx_source_source_ready <= main_etherbone_probe_sink_ready;
			main_etherbone_probe_sink_first <= main_etherbone_rx_source_source_first;
			main_etherbone_probe_sink_last <= main_etherbone_rx_source_source_last;
			main_etherbone_probe_sink_payload_data <= main_etherbone_rx_source_source_payload_data;
			main_etherbone_probe_sink_payload_error <= main_etherbone_rx_source_source_payload_error;
			main_etherbone_probe_sink_param_addr_size <= main_etherbone_rx_source_source_param_addr_size;
			main_etherbone_probe_sink_param_nr <= main_etherbone_rx_source_source_param_nr;
			main_etherbone_probe_sink_param_pf <= main_etherbone_rx_source_source_param_pf;
			main_etherbone_probe_sink_param_port_size <= main_etherbone_rx_source_source_param_port_size;
			main_etherbone_probe_sink_param_pr <= main_etherbone_rx_source_source_param_pr;
			main_etherbone_probe_sink_param_src_port <= main_etherbone_rx_source_source_param_src_port;
			main_etherbone_probe_sink_param_dst_port <= main_etherbone_rx_source_source_param_dst_port;
			main_etherbone_probe_sink_param_ip_address <= main_etherbone_rx_source_source_param_ip_address;
			main_etherbone_probe_sink_param_length <= main_etherbone_rx_source_source_param_length;
		end
		1'd1: begin
			main_etherbone_record_sink_sink_valid <= main_etherbone_rx_source_source_valid;
			main_etherbone_rx_source_source_ready <= main_etherbone_record_sink_sink_ready;
			main_etherbone_record_sink_sink_first <= main_etherbone_rx_source_source_first;
			main_etherbone_record_sink_sink_last <= main_etherbone_rx_source_source_last;
			main_etherbone_record_sink_sink_payload_data <= main_etherbone_rx_source_source_payload_data;
			main_etherbone_record_sink_sink_payload_error <= main_etherbone_rx_source_source_payload_error;
			main_etherbone_record_sink_sink_param_addr_size <= main_etherbone_rx_source_source_param_addr_size;
			main_etherbone_record_sink_sink_param_nr <= main_etherbone_rx_source_source_param_nr;
			main_etherbone_record_sink_sink_param_pf <= main_etherbone_rx_source_source_param_pf;
			main_etherbone_record_sink_sink_param_port_size <= main_etherbone_rx_source_source_param_port_size;
			main_etherbone_record_sink_sink_param_pr <= main_etherbone_rx_source_source_param_pr;
			main_etherbone_record_sink_sink_param_src_port <= main_etherbone_rx_source_source_param_src_port;
			main_etherbone_record_sink_sink_param_dst_port <= main_etherbone_rx_source_source_param_dst_port;
			main_etherbone_record_sink_sink_param_ip_address <= main_etherbone_rx_source_source_param_ip_address;
			main_etherbone_record_sink_sink_param_length <= main_etherbone_rx_source_source_param_length;
		end
		default: begin
			main_etherbone_rx_source_source_ready <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_etherbone_dispatcher_last <= 1'd0;
	if (main_etherbone_rx_source_source_valid) begin
		main_etherbone_dispatcher_last <= (main_etherbone_rx_source_source_last & main_etherbone_rx_source_source_ready);
	end
end
assign main_etherbone_dispatcher_ongoing0 = ((main_etherbone_rx_source_source_valid | main_etherbone_dispatcher_ongoing1) & (~main_etherbone_dispatcher_last));
always @(*) begin
	main_etherbone_request <= 2'd0;
	main_etherbone_request[0] <= main_etherbone_status0_ongoing0;
	main_etherbone_request[1] <= main_etherbone_status1_ongoing0;
end
always @(*) begin
	main_etherbone_tx_sink_sink_param_src_port <= 16'd0;
	main_etherbone_tx_sink_sink_param_dst_port <= 16'd0;
	main_etherbone_tx_sink_sink_param_ip_address <= 32'd0;
	main_etherbone_probe_source_ready <= 1'd0;
	main_etherbone_tx_sink_sink_param_length <= 16'd0;
	main_etherbone_record_source_source_ready <= 1'd0;
	main_etherbone_tx_sink_sink_valid <= 1'd0;
	main_etherbone_tx_sink_sink_first <= 1'd0;
	main_etherbone_tx_sink_sink_last <= 1'd0;
	main_etherbone_tx_sink_sink_payload_data <= 32'd0;
	main_etherbone_tx_sink_sink_payload_error <= 4'd0;
	main_etherbone_tx_sink_sink_param_addr_size <= 4'd0;
	main_etherbone_tx_sink_sink_param_nr <= 1'd0;
	main_etherbone_tx_sink_sink_param_pf <= 1'd0;
	main_etherbone_tx_sink_sink_param_port_size <= 4'd0;
	main_etherbone_tx_sink_sink_param_pr <= 1'd0;
	case (main_etherbone_grant)
		1'd0: begin
			main_etherbone_tx_sink_sink_valid <= main_etherbone_probe_source_valid;
			main_etherbone_probe_source_ready <= main_etherbone_tx_sink_sink_ready;
			main_etherbone_tx_sink_sink_first <= main_etherbone_probe_source_first;
			main_etherbone_tx_sink_sink_last <= main_etherbone_probe_source_last;
			main_etherbone_tx_sink_sink_payload_data <= main_etherbone_probe_source_payload_data;
			main_etherbone_tx_sink_sink_payload_error <= main_etherbone_probe_source_payload_error;
			main_etherbone_tx_sink_sink_param_addr_size <= main_etherbone_probe_source_param_addr_size;
			main_etherbone_tx_sink_sink_param_nr <= main_etherbone_probe_source_param_nr;
			main_etherbone_tx_sink_sink_param_pf <= main_etherbone_probe_source_param_pf;
			main_etherbone_tx_sink_sink_param_port_size <= main_etherbone_probe_source_param_port_size;
			main_etherbone_tx_sink_sink_param_pr <= main_etherbone_probe_source_param_pr;
			main_etherbone_tx_sink_sink_param_src_port <= main_etherbone_probe_source_param_src_port;
			main_etherbone_tx_sink_sink_param_dst_port <= main_etherbone_probe_source_param_dst_port;
			main_etherbone_tx_sink_sink_param_ip_address <= main_etherbone_probe_source_param_ip_address;
			main_etherbone_tx_sink_sink_param_length <= main_etherbone_probe_source_param_length;
		end
		1'd1: begin
			main_etherbone_tx_sink_sink_valid <= main_etherbone_record_source_source_valid;
			main_etherbone_record_source_source_ready <= main_etherbone_tx_sink_sink_ready;
			main_etherbone_tx_sink_sink_first <= main_etherbone_record_source_source_first;
			main_etherbone_tx_sink_sink_last <= main_etherbone_record_source_source_last;
			main_etherbone_tx_sink_sink_payload_data <= main_etherbone_record_source_source_payload_data;
			main_etherbone_tx_sink_sink_payload_error <= main_etherbone_record_source_source_payload_error;
			main_etherbone_tx_sink_sink_param_addr_size <= main_etherbone_record_source_source_param_addr_size;
			main_etherbone_tx_sink_sink_param_nr <= main_etherbone_record_source_source_param_nr;
			main_etherbone_tx_sink_sink_param_pf <= main_etherbone_record_source_source_param_pf;
			main_etherbone_tx_sink_sink_param_port_size <= main_etherbone_record_source_source_param_port_size;
			main_etherbone_tx_sink_sink_param_pr <= main_etherbone_record_source_source_param_pr;
			main_etherbone_tx_sink_sink_param_src_port <= main_etherbone_record_source_source_param_src_port;
			main_etherbone_tx_sink_sink_param_dst_port <= main_etherbone_record_source_source_param_dst_port;
			main_etherbone_tx_sink_sink_param_ip_address <= main_etherbone_record_source_source_param_ip_address;
			main_etherbone_tx_sink_sink_param_length <= main_etherbone_record_source_source_param_length;
		end
	endcase
end
always @(*) begin
	main_etherbone_status0_last <= 1'd0;
	if (main_etherbone_probe_source_valid) begin
		main_etherbone_status0_last <= (main_etherbone_probe_source_last & main_etherbone_probe_source_ready);
	end
end
assign main_etherbone_status0_ongoing0 = ((main_etherbone_probe_source_valid | main_etherbone_status0_ongoing1) & (~main_etherbone_status0_last));
always @(*) begin
	main_etherbone_status1_last <= 1'd0;
	if (main_etherbone_record_source_source_valid) begin
		main_etherbone_status1_last <= (main_etherbone_record_source_source_last & main_etherbone_record_source_source_ready);
	end
end
assign main_etherbone_status1_ongoing0 = ((main_etherbone_record_source_source_valid | main_etherbone_status1_ongoing1) & (~main_etherbone_status1_last));
always @(*) begin
	main_etherbone_liteethetherbonewishbonemaster_data_update <= 1'd0;
	main_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd0;
	liteethetherbonewishbonemaster_next_state <= 2'd0;
	main_etherbone_liteethetherbonewishbonemaster_bus_adr <= 30'd0;
	main_etherbone_liteethetherbonewishbonemaster_bus_dat_w <= 32'd0;
	main_etherbone_liteethetherbonewishbonemaster_bus_sel <= 4'd0;
	main_etherbone_liteethetherbonewishbonemaster_bus_cyc <= 1'd0;
	main_etherbone_liteethetherbonewishbonemaster_bus_stb <= 1'd0;
	main_etherbone_liteethetherbonewishbonemaster_source_valid <= 1'd0;
	main_etherbone_liteethetherbonewishbonemaster_bus_we <= 1'd0;
	main_etherbone_liteethetherbonewishbonemaster_source_last <= 1'd0;
	liteethetherbonewishbonemaster_next_state <= liteethetherbonewishbonemaster_state;
	case (liteethetherbonewishbonemaster_state)
		1'd1: begin
			main_etherbone_liteethetherbonewishbonemaster_bus_adr <= main_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
			main_etherbone_liteethetherbonewishbonemaster_bus_dat_w <= main_etherbone_liteethetherbonewishbonemaster_sink_payload_data;
			main_etherbone_liteethetherbonewishbonemaster_bus_sel <= main_etherbone_liteethetherbonewishbonemaster_sink_param_be;
			main_etherbone_liteethetherbonewishbonemaster_bus_stb <= main_etherbone_liteethetherbonewishbonemaster_sink_valid;
			main_etherbone_liteethetherbonewishbonemaster_bus_we <= 1'd1;
			main_etherbone_liteethetherbonewishbonemaster_bus_cyc <= 1'd1;
			if ((main_etherbone_liteethetherbonewishbonemaster_bus_stb & main_etherbone_liteethetherbonewishbonemaster_bus_ack)) begin
				main_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd1;
				if (main_etherbone_liteethetherbonewishbonemaster_sink_last) begin
					liteethetherbonewishbonemaster_next_state <= 1'd0;
				end
			end
		end
		2'd2: begin
			main_etherbone_liteethetherbonewishbonemaster_bus_adr <= main_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
			main_etherbone_liteethetherbonewishbonemaster_bus_sel <= main_etherbone_liteethetherbonewishbonemaster_sink_param_be;
			main_etherbone_liteethetherbonewishbonemaster_bus_stb <= main_etherbone_liteethetherbonewishbonemaster_sink_valid;
			main_etherbone_liteethetherbonewishbonemaster_bus_cyc <= 1'd1;
			if ((main_etherbone_liteethetherbonewishbonemaster_bus_stb & main_etherbone_liteethetherbonewishbonemaster_bus_ack)) begin
				main_etherbone_liteethetherbonewishbonemaster_data_update <= 1'd1;
				liteethetherbonewishbonemaster_next_state <= 2'd3;
			end
		end
		2'd3: begin
			main_etherbone_liteethetherbonewishbonemaster_source_valid <= main_etherbone_liteethetherbonewishbonemaster_sink_valid;
			main_etherbone_liteethetherbonewishbonemaster_source_last <= main_etherbone_liteethetherbonewishbonemaster_sink_last;
			if ((main_etherbone_liteethetherbonewishbonemaster_source_valid & main_etherbone_liteethetherbonewishbonemaster_source_ready)) begin
				main_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd1;
				if (main_etherbone_liteethetherbonewishbonemaster_source_last) begin
					liteethetherbonewishbonemaster_next_state <= 1'd0;
				end else begin
					liteethetherbonewishbonemaster_next_state <= 2'd2;
				end
			end
		end
		default: begin
			main_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd1;
			if (main_etherbone_liteethetherbonewishbonemaster_sink_valid) begin
				main_etherbone_liteethetherbonewishbonemaster_sink_ready <= 1'd0;
				if (main_etherbone_liteethetherbonewishbonemaster_sink_param_we) begin
					liteethetherbonewishbonemaster_next_state <= 1'd1;
				end else begin
					liteethetherbonewishbonemaster_next_state <= 2'd2;
				end
			end
		end
	endcase
end
assign spiflash_cs_n = spiflash_pads_cs_n;
assign spiflash_mosi = spiflash_pads_mosi;
assign spiflash_pads_miso = spiflash_miso;
assign spiflash_start0 = spiflash_start1;
assign spiflash_length0 = spiflash_length1;
assign spiflash_mosi1 = spiflash_mosi_storage;
assign spiflash_done1 = spiflash_done0;
assign spiflash_miso_status = spiflash_miso1;
assign spiflash_cs = spiflash_cs_storage;
assign spiflash_loopback = spiflash_loopback_storage;
assign spiflash_clk_rise = (spiflash_clk_divider1 == (spiflash_clk_divider0[15:1] - 1'd1));
assign spiflash_clk_fall = (spiflash_clk_divider1 == (spiflash_clk_divider0 - 1'd1));
always @(*) begin
	spiflash_count_next_value <= 6'd0;
	spiflash_count_next_value_ce <= 1'd0;
	spiflash_clk_enable <= 1'd0;
	spiflash_cs_enable <= 1'd0;
	spiflash_mosi_latch <= 1'd0;
	spiflash_done0 <= 1'd0;
	spiflash_miso_latch <= 1'd0;
	spiflash_irq <= 1'd0;
	ecp5spiflash_next_state <= 2'd0;
	ecp5spiflash_next_state <= ecp5spiflash_state;
	case (ecp5spiflash_state)
		1'd1: begin
			spiflash_count_next_value <= 1'd0;
			spiflash_count_next_value_ce <= 1'd1;
			if (spiflash_clk_fall) begin
				spiflash_cs_enable <= 1'd1;
				ecp5spiflash_next_state <= 2'd2;
			end
		end
		2'd2: begin
			spiflash_clk_enable <= 1'd1;
			spiflash_cs_enable <= 1'd1;
			if (spiflash_clk_fall) begin
				spiflash_count_next_value <= (spiflash_count + 1'd1);
				spiflash_count_next_value_ce <= 1'd1;
				if ((spiflash_count == (spiflash_length0 - 1'd1))) begin
					ecp5spiflash_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			spiflash_cs_enable <= 1'd1;
			if (spiflash_clk_rise) begin
				spiflash_miso_latch <= 1'd1;
				spiflash_irq <= 1'd1;
				ecp5spiflash_next_state <= 1'd0;
			end
		end
		default: begin
			spiflash_done0 <= 1'd1;
			if (spiflash_start0) begin
				spiflash_done0 <= 1'd0;
				spiflash_mosi_latch <= 1'd1;
				ecp5spiflash_next_state <= 1'd1;
			end
		end
	endcase
end
assign pulsegen_start = pulsegen_go_storage;
assign pulsegen_en = 1'd1;
assign pulsegen_scaling = 8'd255;
assign pulsegen_x_out_adr = pulsegen_pos;
assign pulsegen_superinterpolator_input_input_payload_data = pulsegen_x_out;
assign pulsegen_superinterpolator_r = pulsegen_r_storage;
assign pulsegen_out0 = {(~pulsegen_superinterpolator_output_output_payload_data0[15]), pulsegen_superinterpolator_output_output_payload_data0[14:0]};
always @(*) begin
	pulsegen_fft_step <= 7'd0;
	if ((pulsegen_stage == 1'd0)) begin
		pulsegen_fft_step <= 7'd64;
	end
	if ((pulsegen_stage == 1'd1)) begin
		pulsegen_fft_step <= 6'd32;
	end
	if ((pulsegen_stage == 2'd2)) begin
		pulsegen_fft_step <= 5'd16;
	end
	if ((pulsegen_stage == 2'd3)) begin
		pulsegen_fft_step <= 4'd8;
	end
	if ((pulsegen_stage == 3'd4)) begin
		pulsegen_fft_step <= 3'd4;
	end
	if ((pulsegen_stage == 3'd5)) begin
		pulsegen_fft_step <= 2'd2;
	end
	if ((pulsegen_stage == 3'd6)) begin
		pulsegen_fft_step <= 1'd1;
	end
end
assign pulsegen_fft_adr = pulsegen_fft_w_idx[4:0];
assign pulsegen_fft_wr_ram = pulsegen_fft_dat_r[17:0];
assign pulsegen_fft_wi_ram = pulsegen_fft_dat_r[35:18];
assign pulsegen_fft_wr = (pulsegen_fft_w_idx_l ? pulsegen_fft_wi_ram : pulsegen_fft_wr_ram);
assign pulsegen_fft_wi = (pulsegen_fft_w_idx_l ? pulsegen_fft_wr_ram : (-pulsegen_fft_wi_ram));
assign pulsegen_fft_posbit_r = comb_array_muxed0;
always @(*) begin
	pulsegen_fft_posbit_w <= 1'd0;
	pulsegen_fft_posbit_w <= comb_array_muxed1;
	if ((pulsegen_fft_stage_w >= 3'd6)) begin
		pulsegen_fft_posbit_w <= 1'd0;
	end
end
assign pulsegen_fft_a_x2_mux = pulsegen_stage[0];
assign pulsegen_fft_a_mux = ((pulsegen_stage == 1'd0) ? 1'd0 : pulsegen_fft_posbit_r);
assign pulsegen_fft_x1p1_adr = pulsegen_fft_pos_r;
assign pulsegen_fft_x2p1_adr = (({pulsegen_fft_pos_r, 1'd0} ^ (1'd1 <<< pulsegen_stage)) >>> 1'd1);
assign pulsegen_fft_pos_w = (pulsegen_fft_pos_r - 4'd8);
assign pulsegen_fft_c_x2_mux = (~pulsegen_fft_stage_w[0]);
assign pulsegen_fft_c_mux = pulsegen_fft_posbit_w;
assign pulsegen_fft_x1p2_adr = pulsegen_fft_pos_w;
assign pulsegen_fft_x2p2_adr = pulsegen_fft_pos_w;
assign pulsegen_xram1_port1_adr = (pulsegen_busy ? pulsegen_fft_x1p1_adr : pulsegen_inp_ram_adr[6:1]);
assign pulsegen_xram2a_port1_adr = (pulsegen_busy ? pulsegen_fft_x2p1_adr : pulsegen_inp_ram_adr[6:1]);
assign pulsegen_xram2b_port1_adr = (pulsegen_busy ? pulsegen_fft_x2p1_adr : pulsegen_inp_ram_adr[6:1]);
assign pulsegen_xram1_port1_dat_w = pulsegen_x_in;
assign pulsegen_xram2a_port1_dat_w = pulsegen_x_in;
assign pulsegen_xram2b_port1_dat_w = pulsegen_x_in;
assign pulsegen_xram1_port1_we = (((~pulsegen_busy) & pulsegen_x_in_we) & (~pulsegen_inp_ram_adr[0]));
assign pulsegen_xram2a_port1_we = (((~pulsegen_busy) & pulsegen_x_in_we) & pulsegen_inp_ram_adr[0]);
assign pulsegen_xram2b_port1_we = (((~pulsegen_busy) & pulsegen_x_in_we) & pulsegen_inp_ram_adr[0]);
assign pulsegen_ar = ((pulsegen_fft_a_mux_l == 1'd0) ? pulsegen_xram1_port1_dat_r[17:0] : pulsegen_dat_r[17:0]);
assign pulsegen_ai = ((pulsegen_fft_a_mux_l == 1'd0) ? pulsegen_xram1_port1_dat_r[35:18] : pulsegen_dat_r[35:18]);
assign pulsegen_br = (pulsegen_fft_a_mux_l ? pulsegen_xram1_port1_dat_r[17:0] : pulsegen_dat_r[17:0]);
assign pulsegen_bi = (pulsegen_fft_a_mux_l ? pulsegen_xram1_port1_dat_r[35:18] : pulsegen_dat_r[35:18]);
assign pulsegen_dat_r = (pulsegen_fft_a_x2_mux_l ? pulsegen_xram2a_port1_dat_r : pulsegen_xram2b_port1_dat_r);
assign pulsegen_xram1_port2_adr = (pulsegen_busy ? pulsegen_fft_x1p2_adr : pulsegen_x_out_adr[5:0]);
assign pulsegen_xram2a_port2_adr = (pulsegen_busy ? pulsegen_fft_x2p2_adr : pulsegen_x_out_adr[5:0]);
assign pulsegen_xram2b_port2_adr = (pulsegen_busy ? pulsegen_fft_x2p2_adr : pulsegen_x_out_adr[5:0]);
assign pulsegen_x_out = ((pulsegen_last_bit_xout_adr_l == 1'd0) ? pulsegen_xram1_port2_dat_r : (pulsegen_fft_c_x2_mux ? pulsegen_xram2a_port2_dat_r : pulsegen_xram2b_port2_dat_r));
assign pulsegen_xram1_port2_we = (pulsegen_busy & pulsegen_fft_bfl_we);
assign pulsegen_xram2a_port2_we = (pulsegen_busy & (pulsegen_fft_bfl_we & pulsegen_fft_c_x2_mux));
assign pulsegen_xram2b_port2_we = (pulsegen_busy & (pulsegen_fft_bfl_we & (~pulsegen_fft_c_x2_mux)));
assign pulsegen_xram1_port2_dat_w = {((pulsegen_fft_c_mux == 1'd0) ? pulsegen_fft_ci : pulsegen_fft_di), ((pulsegen_fft_c_mux == 1'd0) ? pulsegen_fft_cr : pulsegen_fft_dr)};
assign pulsegen_xram2a_port2_dat_w = {(pulsegen_fft_c_mux ? pulsegen_fft_ci : pulsegen_fft_di), (pulsegen_fft_c_mux ? pulsegen_fft_cr : pulsegen_fft_dr)};
assign pulsegen_xram2b_port2_dat_w = {(pulsegen_fft_c_mux ? pulsegen_fft_ci : pulsegen_fft_di), (pulsegen_fft_c_mux ? pulsegen_fft_cr : pulsegen_fft_dr)};
assign pulsegen_inp_ram_adr = {pulsegen_x_in_adr[0], pulsegen_x_in_adr[1], pulsegen_x_in_adr[2], pulsegen_x_in_adr[3], pulsegen_x_in_adr[4], pulsegen_x_in_adr[5], pulsegen_x_in_adr[6]};
assign pulsegen_s = (~comb_array_muxed2);
assign pulsegen_superinterpolator_output_output_stb = 1'd1;
always @(*) begin
	pulsegen_superinterpolator_output_output_payload_data0 <= 16'd0;
	pulsegen_superinterpolator_output_output_payload_data1 <= 16'd0;
	pulsegen_superinterpolator_input_input_ack <= 1'd0;
	if ((~pulsegen_superinterpolator_mode3)) begin
		pulsegen_superinterpolator_input_input_ack <= (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_hbf0_step1 : 1'd1);
		pulsegen_superinterpolator_output_output_payload_data0 <= pulsegen_superinterpolator_y14[32:17];
		pulsegen_superinterpolator_output_output_payload_data1 <= (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_x1_15 : pulsegen_superinterpolator_x31);
	end else begin
		pulsegen_superinterpolator_input_input_ack <= (pulsegen_superinterpolator_hbf0_step1 & (~pulsegen_superinterpolator_hbfstop));
		pulsegen_superinterpolator_output_output_payload_data0 <= pulsegen_superinterpolator_cic_output_payload_data0;
		pulsegen_superinterpolator_output_output_payload_data1 <= pulsegen_superinterpolator_cic_output_payload_data1;
	end
end
assign pulsegen_superinterpolator_mode2 = ((pulsegen_superinterpolator_r >= 3'd4) ? 1'd1 : 1'd0);
assign pulsegen_superinterpolator_mode3 = ((pulsegen_superinterpolator_r >= 4'd8) ? 1'd1 : 1'd0);
assign pulsegen_superinterpolator_muxsel0 = ((~pulsegen_superinterpolator_cic_input_ack) | (pulsegen_superinterpolator_mode3 & pulsegen_superinterpolator_hbf1_step1));
assign pulsegen_superinterpolator_hbfstop = (pulsegen_superinterpolator_muxsel0 ? 1'd1 : 1'd0);
assign pulsegen_superinterpolator_cic_r = pulsegen_superinterpolator_r[11:2];
assign pulsegen_superinterpolator_cic_input_payload_data = (pulsegen_superinterpolator_hbf1_step1 ? pulsegen_superinterpolator_y14[32:17] : pulsegen_superinterpolator_x1_15);
assign pulsegen_superinterpolator_cic_input_stb = pulsegen_superinterpolator_mode3;
assign pulsegen_superinterpolator_x1__ = pulsegen_superinterpolator_y7[32:17];
assign pulsegen_superinterpolator_y0 = pulsegen_superinterpolator_p0;
always @(*) begin
	pulsegen_superinterpolator_b0 <= 18'd0;
	pulsegen_superinterpolator_d0 <= 18'd0;
	pulsegen_superinterpolator_a0 <= 18'd0;
	pulsegen_superinterpolator_mux_p0 <= 1'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p0 <= 1'd1;
		pulsegen_superinterpolator_a0 <= pulsegen_superinterpolator_x0;
		pulsegen_superinterpolator_d0 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b0 <= pulsegen_superinterpolator0;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p0 <= 1'd1;
			pulsegen_superinterpolator_a0 <= pulsegen_superinterpolator_x0;
			pulsegen_superinterpolator_d0 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b0 <= pulsegen_superinterpolator0;
		end else begin
			pulsegen_superinterpolator_mux_p0 <= 1'd0;
			pulsegen_superinterpolator_a0 <= pulsegen_superinterpolator_x1;
			pulsegen_superinterpolator_d0 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b0 <= pulsegen_superinterpolator1;
		end
	end
end
assign pulsegen_superinterpolator_y1 = pulsegen_superinterpolator_p1;
always @(*) begin
	pulsegen_superinterpolator_d1 <= 18'd0;
	pulsegen_superinterpolator_a1 <= 18'd0;
	pulsegen_superinterpolator_b1 <= 18'd0;
	pulsegen_superinterpolator_mux_p1 <= 1'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p1 <= 1'd1;
		pulsegen_superinterpolator_a1 <= pulsegen_superinterpolator_x2;
		pulsegen_superinterpolator_d1 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b1 <= pulsegen_superinterpolator1;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p1 <= 1'd1;
			pulsegen_superinterpolator_a1 <= pulsegen_superinterpolator_x4;
			pulsegen_superinterpolator_d1 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b1 <= pulsegen_superinterpolator2;
		end else begin
			pulsegen_superinterpolator_mux_p1 <= 1'd0;
			pulsegen_superinterpolator_a1 <= pulsegen_superinterpolator_x5;
			pulsegen_superinterpolator_d1 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b1 <= pulsegen_superinterpolator3;
		end
	end
end
assign pulsegen_superinterpolator_c1 = (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_y_reg0 : pulsegen_superinterpolator_y0);
assign pulsegen_superinterpolator_y2 = pulsegen_superinterpolator_p2;
always @(*) begin
	pulsegen_superinterpolator_d2 <= 18'd0;
	pulsegen_superinterpolator_b2 <= 18'd0;
	pulsegen_superinterpolator_a2 <= 18'd0;
	pulsegen_superinterpolator_mux_p2 <= 1'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p2 <= 1'd1;
		pulsegen_superinterpolator_a2 <= pulsegen_superinterpolator_x4;
		pulsegen_superinterpolator_d2 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b2 <= pulsegen_superinterpolator2;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p2 <= 1'd1;
			pulsegen_superinterpolator_a2 <= pulsegen_superinterpolator_x8;
			pulsegen_superinterpolator_d2 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b2 <= pulsegen_superinterpolator4;
		end else begin
			pulsegen_superinterpolator_mux_p2 <= 1'd0;
			pulsegen_superinterpolator_a2 <= pulsegen_superinterpolator_x9;
			pulsegen_superinterpolator_d2 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b2 <= pulsegen_superinterpolator5;
		end
	end
end
assign pulsegen_superinterpolator_c2 = (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_y_reg1 : pulsegen_superinterpolator_y1);
assign pulsegen_superinterpolator_y3 = pulsegen_superinterpolator_p3;
always @(*) begin
	pulsegen_superinterpolator_b3 <= 18'd0;
	pulsegen_superinterpolator_d3 <= 18'd0;
	pulsegen_superinterpolator_a3 <= 18'd0;
	pulsegen_superinterpolator_mux_p3 <= 1'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p3 <= 1'd1;
		pulsegen_superinterpolator_a3 <= pulsegen_superinterpolator_x6;
		pulsegen_superinterpolator_d3 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b3 <= pulsegen_superinterpolator3;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p3 <= 1'd1;
			pulsegen_superinterpolator_a3 <= pulsegen_superinterpolator_x12;
			pulsegen_superinterpolator_d3 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b3 <= pulsegen_superinterpolator6;
		end else begin
			pulsegen_superinterpolator_mux_p3 <= 1'd0;
			pulsegen_superinterpolator_a3 <= pulsegen_superinterpolator_x13;
			pulsegen_superinterpolator_d3 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b3 <= pulsegen_superinterpolator7;
		end
	end
end
assign pulsegen_superinterpolator_c3 = (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_y_reg2 : pulsegen_superinterpolator_y2);
assign pulsegen_superinterpolator_y4 = pulsegen_superinterpolator_p4;
always @(*) begin
	pulsegen_superinterpolator_mux_p4 <= 1'd0;
	pulsegen_superinterpolator_d4 <= 18'd0;
	pulsegen_superinterpolator_a4 <= 18'd0;
	pulsegen_superinterpolator_b4 <= 18'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p4 <= 1'd1;
		pulsegen_superinterpolator_a4 <= pulsegen_superinterpolator_x8;
		pulsegen_superinterpolator_d4 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b4 <= pulsegen_superinterpolator4;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p4 <= 1'd1;
			pulsegen_superinterpolator_a4 <= pulsegen_superinterpolator_x16;
			pulsegen_superinterpolator_d4 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b4 <= pulsegen_superinterpolator8;
		end else begin
			pulsegen_superinterpolator_mux_p4 <= 1'd0;
			pulsegen_superinterpolator_a4 <= pulsegen_superinterpolator_x17;
			pulsegen_superinterpolator_d4 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b4 <= pulsegen_superinterpolator9;
		end
	end
end
assign pulsegen_superinterpolator_c4 = (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_y_reg3 : pulsegen_superinterpolator_y3);
assign pulsegen_superinterpolator_y5 = pulsegen_superinterpolator_p5;
always @(*) begin
	pulsegen_superinterpolator_mux_p5 <= 1'd0;
	pulsegen_superinterpolator_d5 <= 18'd0;
	pulsegen_superinterpolator_b5 <= 18'd0;
	pulsegen_superinterpolator_a5 <= 18'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p5 <= 1'd1;
		pulsegen_superinterpolator_a5 <= pulsegen_superinterpolator_x10;
		pulsegen_superinterpolator_d5 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b5 <= pulsegen_superinterpolator5;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p5 <= 1'd1;
			pulsegen_superinterpolator_a5 <= pulsegen_superinterpolator_x20;
			pulsegen_superinterpolator_d5 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b5 <= pulsegen_superinterpolator10;
		end else begin
			pulsegen_superinterpolator_mux_p5 <= 1'd0;
			pulsegen_superinterpolator_a5 <= pulsegen_superinterpolator_x21;
			pulsegen_superinterpolator_d5 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b5 <= pulsegen_superinterpolator11;
		end
	end
end
assign pulsegen_superinterpolator_c5 = (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_y_reg4 : pulsegen_superinterpolator_y4);
assign pulsegen_superinterpolator_y6 = pulsegen_superinterpolator_p6;
always @(*) begin
	pulsegen_superinterpolator_a6 <= 18'd0;
	pulsegen_superinterpolator_d6 <= 18'd0;
	pulsegen_superinterpolator_mux_p6 <= 1'd0;
	pulsegen_superinterpolator_b6 <= 18'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p6 <= 1'd1;
		pulsegen_superinterpolator_a6 <= pulsegen_superinterpolator_x12;
		pulsegen_superinterpolator_d6 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b6 <= pulsegen_superinterpolator6;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p6 <= 1'd1;
			pulsegen_superinterpolator_a6 <= pulsegen_superinterpolator_x24;
			pulsegen_superinterpolator_d6 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b6 <= pulsegen_superinterpolator12;
		end else begin
			pulsegen_superinterpolator_mux_p6 <= 1'd0;
			pulsegen_superinterpolator_a6 <= pulsegen_superinterpolator_x25;
			pulsegen_superinterpolator_d6 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b6 <= pulsegen_superinterpolator13;
		end
	end
end
assign pulsegen_superinterpolator_c6 = (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_y_reg5 : pulsegen_superinterpolator_y5);
assign pulsegen_superinterpolator_y7 = pulsegen_superinterpolator_p7;
assign pulsegen_superinterpolator_c7 = (pulsegen_superinterpolator_mode2 ? pulsegen_superinterpolator_y_reg6 : pulsegen_superinterpolator_y6);
always @(*) begin
	pulsegen_superinterpolator_a7 <= 18'd0;
	pulsegen_superinterpolator_mux_p7 <= 1'd0;
	pulsegen_superinterpolator_b7 <= 18'd0;
	pulsegen_superinterpolator_d7 <= 18'd0;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p7 <= 1'd1;
		pulsegen_superinterpolator_a7 <= pulsegen_superinterpolator_x14;
		pulsegen_superinterpolator_d7 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b7 <= pulsegen_superinterpolator7;
	end else begin
		if ((~pulsegen_superinterpolator_hbf0_step1)) begin
			pulsegen_superinterpolator_mux_p7 <= 1'd1;
			pulsegen_superinterpolator_a7 <= pulsegen_superinterpolator_x28;
			pulsegen_superinterpolator_d7 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b7 <= pulsegen_superinterpolator14;
		end else begin
			pulsegen_superinterpolator_mux_p7 <= 1'd0;
			pulsegen_superinterpolator_a7 <= pulsegen_superinterpolator_x29;
			pulsegen_superinterpolator_d7 <= pulsegen_superinterpolator_x_end_l;
			pulsegen_superinterpolator_b7 <= 1'd0;
		end
	end
end
always @(*) begin
	pulsegen_superinterpolator_a8 <= 18'd0;
	pulsegen_superinterpolator_b8 <= 18'd0;
	pulsegen_superinterpolator_y8 <= 36'd0;
	pulsegen_superinterpolator_c8 <= 36'd0;
	pulsegen_superinterpolator_d8 <= 18'd0;
	pulsegen_superinterpolator_mux_p8 <= 1'd0;
	pulsegen_superinterpolator_y8 <= pulsegen_superinterpolator_p8;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p8 <= 1'd1;
		pulsegen_superinterpolator_a8 <= pulsegen_superinterpolator_x16;
		pulsegen_superinterpolator_d8 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b8 <= pulsegen_superinterpolator8;
		pulsegen_superinterpolator_y8 <= pulsegen_superinterpolator_p8;
		pulsegen_superinterpolator_c8 <= pulsegen_superinterpolator_y7;
	end else begin
		pulsegen_superinterpolator_mux_p8 <= 1'd1;
		pulsegen_superinterpolator_a8 <= pulsegen_superinterpolator_x1_0;
		pulsegen_superinterpolator_d8 <= pulsegen_superinterpolator_x1_13;
		pulsegen_superinterpolator_b8 <= pulsegen_superinterpolator15;
		pulsegen_superinterpolator_y8 <= pulsegen_superinterpolator_p8;
		pulsegen_superinterpolator_c8 <= 1'd0;
	end
end
always @(*) begin
	pulsegen_superinterpolator_c9 <= 36'd0;
	pulsegen_superinterpolator_d9 <= 18'd0;
	pulsegen_superinterpolator_y9 <= 36'd0;
	pulsegen_superinterpolator_mux_p9 <= 1'd0;
	pulsegen_superinterpolator_a9 <= 18'd0;
	pulsegen_superinterpolator_b9 <= 18'd0;
	pulsegen_superinterpolator_y9 <= pulsegen_superinterpolator_p9;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p9 <= 1'd1;
		pulsegen_superinterpolator_a9 <= pulsegen_superinterpolator_x18;
		pulsegen_superinterpolator_d9 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b9 <= pulsegen_superinterpolator9;
		pulsegen_superinterpolator_y9 <= pulsegen_superinterpolator_p9;
		pulsegen_superinterpolator_c9 <= pulsegen_superinterpolator_y8;
	end else begin
		pulsegen_superinterpolator_mux_p9 <= 1'd1;
		pulsegen_superinterpolator_a9 <= pulsegen_superinterpolator_x1_2;
		pulsegen_superinterpolator_d9 <= pulsegen_superinterpolator_x1_13;
		pulsegen_superinterpolator_b9 <= pulsegen_superinterpolator16;
		pulsegen_superinterpolator_y9 <= pulsegen_superinterpolator_p9;
		pulsegen_superinterpolator_c9 <= pulsegen_superinterpolator_y8;
	end
end
always @(*) begin
	pulsegen_superinterpolator_mux_p10 <= 1'd0;
	pulsegen_superinterpolator_a10 <= 18'd0;
	pulsegen_superinterpolator_y10 <= 36'd0;
	pulsegen_superinterpolator_b10 <= 18'd0;
	pulsegen_superinterpolator_c10 <= 36'd0;
	pulsegen_superinterpolator_d10 <= 18'd0;
	pulsegen_superinterpolator_y10 <= pulsegen_superinterpolator_p10;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p10 <= 1'd1;
		pulsegen_superinterpolator_a10 <= pulsegen_superinterpolator_x20;
		pulsegen_superinterpolator_d10 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b10 <= pulsegen_superinterpolator10;
		pulsegen_superinterpolator_y10 <= pulsegen_superinterpolator_p10;
		pulsegen_superinterpolator_c10 <= pulsegen_superinterpolator_y9;
	end else begin
		pulsegen_superinterpolator_mux_p10 <= 1'd1;
		pulsegen_superinterpolator_a10 <= pulsegen_superinterpolator_x1_4;
		pulsegen_superinterpolator_d10 <= pulsegen_superinterpolator_x1_13;
		pulsegen_superinterpolator_b10 <= pulsegen_superinterpolator17;
		pulsegen_superinterpolator_y10 <= pulsegen_superinterpolator_p10;
		pulsegen_superinterpolator_c10 <= pulsegen_superinterpolator_y9;
	end
end
always @(*) begin
	pulsegen_superinterpolator_a11 <= 18'd0;
	pulsegen_superinterpolator_b11 <= 18'd0;
	pulsegen_superinterpolator_c11 <= 36'd0;
	pulsegen_superinterpolator_y11 <= 36'd0;
	pulsegen_superinterpolator_mux_p11 <= 1'd0;
	pulsegen_superinterpolator_d11 <= 18'd0;
	pulsegen_superinterpolator_y11 <= pulsegen_superinterpolator_p11;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p11 <= 1'd1;
		pulsegen_superinterpolator_a11 <= pulsegen_superinterpolator_x22;
		pulsegen_superinterpolator_d11 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b11 <= pulsegen_superinterpolator11;
		pulsegen_superinterpolator_y11 <= pulsegen_superinterpolator_p11;
		pulsegen_superinterpolator_c11 <= pulsegen_superinterpolator_y10;
	end else begin
		pulsegen_superinterpolator_mux_p11 <= 1'd1;
		pulsegen_superinterpolator_a11 <= pulsegen_superinterpolator_x1_6;
		pulsegen_superinterpolator_d11 <= pulsegen_superinterpolator_x1_13;
		pulsegen_superinterpolator_b11 <= pulsegen_superinterpolator18;
		pulsegen_superinterpolator_y11 <= pulsegen_superinterpolator_p11;
		pulsegen_superinterpolator_c11 <= pulsegen_superinterpolator_y10;
	end
end
always @(*) begin
	pulsegen_superinterpolator_c12 <= 36'd0;
	pulsegen_superinterpolator_d12 <= 18'd0;
	pulsegen_superinterpolator_mux_p12 <= 1'd0;
	pulsegen_superinterpolator_y12 <= 36'd0;
	pulsegen_superinterpolator_a12 <= 18'd0;
	pulsegen_superinterpolator_b12 <= 18'd0;
	pulsegen_superinterpolator_y12 <= pulsegen_superinterpolator_p12;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p12 <= 1'd1;
		pulsegen_superinterpolator_a12 <= pulsegen_superinterpolator_x24;
		pulsegen_superinterpolator_d12 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b12 <= pulsegen_superinterpolator12;
		pulsegen_superinterpolator_y12 <= pulsegen_superinterpolator_p12;
		pulsegen_superinterpolator_c12 <= pulsegen_superinterpolator_y11;
	end else begin
		pulsegen_superinterpolator_mux_p12 <= 1'd1;
		pulsegen_superinterpolator_a12 <= pulsegen_superinterpolator_x1_8;
		pulsegen_superinterpolator_d12 <= pulsegen_superinterpolator_x1_13;
		pulsegen_superinterpolator_b12 <= pulsegen_superinterpolator19;
		pulsegen_superinterpolator_y12 <= pulsegen_superinterpolator_p12;
		pulsegen_superinterpolator_c12 <= pulsegen_superinterpolator_y11;
	end
end
always @(*) begin
	pulsegen_superinterpolator_d13 <= 18'd0;
	pulsegen_superinterpolator_mux_p13 <= 1'd0;
	pulsegen_superinterpolator_c13 <= 36'd0;
	pulsegen_superinterpolator_a13 <= 18'd0;
	pulsegen_superinterpolator_b13 <= 18'd0;
	pulsegen_superinterpolator_y13 <= 36'd0;
	pulsegen_superinterpolator_y13 <= pulsegen_superinterpolator_p13;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p13 <= 1'd1;
		pulsegen_superinterpolator_a13 <= pulsegen_superinterpolator_x26;
		pulsegen_superinterpolator_d13 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b13 <= pulsegen_superinterpolator13;
		pulsegen_superinterpolator_y13 <= pulsegen_superinterpolator_p13;
		pulsegen_superinterpolator_c13 <= pulsegen_superinterpolator_y12;
	end else begin
		pulsegen_superinterpolator_mux_p13 <= 1'd1;
		pulsegen_superinterpolator_a13 <= pulsegen_superinterpolator_x1_10;
		pulsegen_superinterpolator_d13 <= pulsegen_superinterpolator_x1_13;
		pulsegen_superinterpolator_b13 <= pulsegen_superinterpolator20;
		pulsegen_superinterpolator_y13 <= pulsegen_superinterpolator_p13;
		pulsegen_superinterpolator_c13 <= pulsegen_superinterpolator_y12;
	end
end
always @(*) begin
	pulsegen_superinterpolator_y14 <= 36'd0;
	pulsegen_superinterpolator_a14 <= 18'd0;
	pulsegen_superinterpolator_b14 <= 18'd0;
	pulsegen_superinterpolator_c14 <= 36'd0;
	pulsegen_superinterpolator_d14 <= 18'd0;
	pulsegen_superinterpolator_mux_p14 <= 1'd0;
	pulsegen_superinterpolator_y14 <= pulsegen_superinterpolator_p14;
	if ((~pulsegen_superinterpolator_mode2)) begin
		pulsegen_superinterpolator_mux_p14 <= 1'd1;
		pulsegen_superinterpolator_a14 <= pulsegen_superinterpolator_x28;
		pulsegen_superinterpolator_d14 <= pulsegen_superinterpolator_x29;
		pulsegen_superinterpolator_b14 <= pulsegen_superinterpolator14;
		pulsegen_superinterpolator_y14 <= pulsegen_superinterpolator_p14;
		pulsegen_superinterpolator_c14 <= pulsegen_superinterpolator_y13;
	end else begin
		pulsegen_superinterpolator_mux_p14 <= 1'd1;
		pulsegen_superinterpolator_a14 <= pulsegen_superinterpolator_x1_12;
		pulsegen_superinterpolator_d14 <= pulsegen_superinterpolator_x1_13;
		pulsegen_superinterpolator_b14 <= pulsegen_superinterpolator21;
		pulsegen_superinterpolator_y14 <= pulsegen_superinterpolator_p14;
		pulsegen_superinterpolator_c14 <= pulsegen_superinterpolator_y13;
	end
end
assign pulsegen_superinterpolator_cic_f_rst = (pulsegen_superinterpolator_cic_r != pulsegen_superinterpolator_cic_r_reg);
assign pulsegen_superinterpolator_cic_comb_ce = (pulsegen_superinterpolator_cic_input_ack & pulsegen_superinterpolator_cic_input_stb);
assign pulsegen_superinterpolator_cic_output_stb = (~pulsegen_superinterpolator_cic_inp_stall);
assign pulsegen_superinterpolator_cic_input_ack = (((pulsegen_superinterpolator_cic_i == 1'd0) | pulsegen_superinterpolator_cic_inp_stall_reg) | (pulsegen_superinterpolator_cic_i == pulsegen_superinterpolator_cic_r_reg[9:1]));
assign pulsegen_superinterpolator_cic_inp_stall = (pulsegen_superinterpolator_cic_input_ack & (~pulsegen_superinterpolator_cic_input_stb));
assign pulsegen_superinterpolator_cic_adr = pulsegen_superinterpolator_cic_r_reg;
assign pulsegen_superinterpolator_cic_temp = ($signed({1'd0, pulsegen_superinterpolator_cic_dat_r[13:0]}) * pulsegen_superinterpolator_cic_input_payload_data);
assign pulsegen_superinterpolator_cic_out = (pulsegen_superinterpolator_cic_temp >>> 4'd13);
assign pulsegen_superinterpolator_cic_shift = pulsegen_superinterpolator_cic_dat_r[17:14];
assign pulsegen_superinterpolator_cic_sig_i = (pulsegen_superinterpolator_cic_sig_b + pulsegen_superinterpolator_cic_diff1);
assign pulsegen_superinterpolator_cic_output_payload_data0 = (pulsegen_superinterpolator_cic_sum_a >>> pulsegen_superinterpolator_cic_shift);
assign pulsegen_superinterpolator_cic_output_payload_data1 = (pulsegen_superinterpolator_cic_sum_b >>> pulsegen_superinterpolator_cic_shift);
always @(*) begin
	next_state <= 1'd0;
	main_adr <= 14'd0;
	main_we <= 1'd0;
	main_wishbone_ack <= 1'd0;
	main_dat_w <= 8'd0;
	main_wishbone_dat_r <= 32'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			main_wishbone_ack <= 1'd1;
			main_wishbone_dat_r <= main_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			main_dat_w <= main_wishbone_dat_w;
			if ((main_wishbone_cyc & main_wishbone_stb)) begin
				main_adr <= main_wishbone_adr;
				main_we <= (main_wishbone_we & (main_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign shared_adr = comb_array_muxed3;
assign shared_dat_w = comb_array_muxed4;
assign shared_sel = comb_array_muxed5;
assign shared_cyc = comb_array_muxed6;
assign shared_stb = comb_array_muxed7;
assign shared_we = comb_array_muxed8;
assign shared_cti = comb_array_muxed9;
assign shared_bte = comb_array_muxed10;
assign main_etherbone_liteethetherbonewishbonemaster_bus_dat_r = shared_dat_r;
assign main_etherbone_liteethetherbonewishbonemaster_bus_ack = (shared_ack & (grant == 1'd0));
assign main_etherbone_liteethetherbonewishbonemaster_bus_err = (shared_err & (grant == 1'd0));
assign request = {main_etherbone_liteethetherbonewishbonemaster_bus_cyc};
assign grant = 1'd0;
always @(*) begin
	slave_sel <= 2'd0;
	slave_sel[0] <= (shared_adr[29:5] == 23'd4194304);
	slave_sel[1] <= (shared_adr[29:14] == 1'd0);
end
assign wb_adr = shared_adr;
assign wb_dat_w = shared_dat_w;
assign wb_sel = shared_sel;
assign wb_stb = shared_stb;
assign wb_we = shared_we;
assign wb_cti = shared_cti;
assign wb_bte = shared_bte;
assign main_wishbone_adr = shared_adr;
assign main_wishbone_dat_w = shared_dat_w;
assign main_wishbone_sel = shared_sel;
assign main_wishbone_stb = shared_stb;
assign main_wishbone_we = shared_we;
assign main_wishbone_cti = shared_cti;
assign main_wishbone_bte = shared_bte;
assign wb_cyc = (shared_cyc & slave_sel[0]);
assign main_wishbone_cyc = (shared_cyc & slave_sel[1]);
assign shared_err = (wb_err | main_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	error <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= 1'd0;
	shared_ack <= (wb_ack | main_wishbone_ack);
	shared_dat_r <= (({32{slave_sel_r[0]}} & wb_dat_r) | ({32{slave_sel_r[1]}} & main_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[0];
assign csrbank0_reset0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 1'd0));
assign csrbank0_reset0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 1'd0));
assign csrbank0_scratch3_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch3_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 1'd1));
assign csrbank0_scratch3_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 1'd1));
assign csrbank0_scratch2_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch2_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 2'd2));
assign csrbank0_scratch2_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 2'd2));
assign csrbank0_scratch1_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch1_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 2'd3));
assign csrbank0_scratch1_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 2'd3));
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_scratch0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd4));
assign csrbank0_scratch0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd4));
assign csrbank0_bus_errors3_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors3_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd5));
assign csrbank0_bus_errors3_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd5));
assign csrbank0_bus_errors2_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors2_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd6));
assign csrbank0_bus_errors2_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd6));
assign csrbank0_bus_errors1_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors1_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 3'd7));
assign csrbank0_bus_errors1_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 3'd7));
assign csrbank0_bus_errors0_r = interface0_bank_bus_dat_w[7:0];
assign csrbank0_bus_errors0_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[3:0] == 4'd8));
assign csrbank0_bus_errors0_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[3:0] == 4'd8));
assign csrbank0_reset0_w = main_reset_storage;
assign csrbank0_scratch3_w = main_scratch_storage[31:24];
assign csrbank0_scratch2_w = main_scratch_storage[23:16];
assign csrbank0_scratch1_w = main_scratch_storage[15:8];
assign csrbank0_scratch0_w = main_scratch_storage[7:0];
assign csrbank0_bus_errors3_w = main_bus_errors_status[31:24];
assign csrbank0_bus_errors2_w = main_bus_errors_status[23:16];
assign csrbank0_bus_errors1_w = main_bus_errors_status[15:8];
assign csrbank0_bus_errors0_w = main_bus_errors_status[7:0];
assign main_bus_errors_we = csrbank0_bus_errors0_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_crg_reset0_r = interface1_bank_bus_dat_w[0];
assign csrbank1_crg_reset0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 1'd0));
assign csrbank1_crg_reset0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 1'd0));
assign csrbank1_rx_inband_status_r = interface1_bank_bus_dat_w[2:0];
assign csrbank1_rx_inband_status_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 1'd1));
assign csrbank1_rx_inband_status_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 1'd1));
assign csrbank1_mdio_w0_r = interface1_bank_bus_dat_w[2:0];
assign csrbank1_mdio_w0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 2'd2));
assign csrbank1_mdio_w0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 2'd2));
assign csrbank1_mdio_r_r = interface1_bank_bus_dat_w[0];
assign csrbank1_mdio_r_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[1:0] == 2'd3));
assign csrbank1_mdio_r_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[1:0] == 2'd3));
assign csrbank1_crg_reset0_w = ethphy_reset_storage;
always @(*) begin
	ethphy_liteethphyrgmiirx_status <= 3'd0;
	ethphy_liteethphyrgmiirx_status[0] <= ethphy_liteethphyrgmiirx_link_status;
	ethphy_liteethphyrgmiirx_status[1] <= ethphy_liteethphyrgmiirx_clock_speed;
	ethphy_liteethphyrgmiirx_status[2] <= ethphy_liteethphyrgmiirx_duplex_status;
end
assign csrbank1_rx_inband_status_w = ethphy_liteethphyrgmiirx_status[2:0];
assign ethphy_liteethphyrgmiirx_we = csrbank1_rx_inband_status_we;
assign ethphy_mdio_mdc = ethphy_mdio_storage[0];
assign ethphy_mdio_oe = ethphy_mdio_storage[1];
assign ethphy_mdio_w = ethphy_mdio_storage[2];
assign csrbank1_mdio_w0_w = ethphy_mdio_storage[2:0];
assign csrbank1_mdio_r_w = ethphy_mdio_status;
assign ethphy_mdio_we = csrbank1_mdio_r_we;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd3);
assign csrbank2_go0_r = interface2_bank_bus_dat_w[0];
assign csrbank2_go0_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[2:0] == 1'd0));
assign csrbank2_go0_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[2:0] == 1'd0));
assign csrbank2_r3_r = interface2_bank_bus_dat_w[7:0];
assign csrbank2_r3_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[2:0] == 1'd1));
assign csrbank2_r3_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[2:0] == 1'd1));
assign csrbank2_r2_r = interface2_bank_bus_dat_w[7:0];
assign csrbank2_r2_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[2:0] == 2'd2));
assign csrbank2_r2_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[2:0] == 2'd2));
assign csrbank2_r1_r = interface2_bank_bus_dat_w[7:0];
assign csrbank2_r1_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[2:0] == 2'd3));
assign csrbank2_r1_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[2:0] == 2'd3));
assign csrbank2_r0_r = interface2_bank_bus_dat_w[7:0];
assign csrbank2_r0_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[2:0] == 3'd4));
assign csrbank2_r0_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[2:0] == 3'd4));
assign csrbank2_go0_w = pulsegen_go_storage;
assign csrbank2_r3_w = pulsegen_r_storage[31:24];
assign csrbank2_r2_w = pulsegen_r_storage[23:16];
assign csrbank2_r1_w = pulsegen_r_storage[15:8];
assign csrbank2_r0_w = pulsegen_r_storage[7:0];
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd2);
assign csrbank3_spi_control1_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_control1_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 1'd0));
assign csrbank3_spi_control1_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 1'd0));
assign csrbank3_spi_control0_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_control0_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 1'd1));
assign csrbank3_spi_control0_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 1'd1));
assign csrbank3_spi_status_r = interface3_bank_bus_dat_w[0];
assign csrbank3_spi_status_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 2'd2));
assign csrbank3_spi_status_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 2'd2));
assign csrbank3_spi_mosi4_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_mosi4_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 2'd3));
assign csrbank3_spi_mosi4_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 2'd3));
assign csrbank3_spi_mosi3_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_mosi3_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 3'd4));
assign csrbank3_spi_mosi3_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 3'd4));
assign csrbank3_spi_mosi2_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_mosi2_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 3'd5));
assign csrbank3_spi_mosi2_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 3'd5));
assign csrbank3_spi_mosi1_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_mosi1_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 3'd6));
assign csrbank3_spi_mosi1_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 3'd6));
assign csrbank3_spi_mosi0_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_mosi0_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 3'd7));
assign csrbank3_spi_mosi0_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 3'd7));
assign csrbank3_spi_miso4_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_miso4_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 4'd8));
assign csrbank3_spi_miso4_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 4'd8));
assign csrbank3_spi_miso3_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_miso3_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 4'd9));
assign csrbank3_spi_miso3_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 4'd9));
assign csrbank3_spi_miso2_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_miso2_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 4'd10));
assign csrbank3_spi_miso2_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 4'd10));
assign csrbank3_spi_miso1_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_miso1_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 4'd11));
assign csrbank3_spi_miso1_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 4'd11));
assign csrbank3_spi_miso0_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_spi_miso0_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 4'd12));
assign csrbank3_spi_miso0_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 4'd12));
assign csrbank3_spi_cs0_r = interface3_bank_bus_dat_w[0];
assign csrbank3_spi_cs0_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 4'd13));
assign csrbank3_spi_cs0_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 4'd13));
assign csrbank3_spi_loopback0_r = interface3_bank_bus_dat_w[0];
assign csrbank3_spi_loopback0_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[3:0] == 4'd14));
assign csrbank3_spi_loopback0_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[3:0] == 4'd14));
always @(*) begin
	spiflash_start1 <= 1'd0;
	if (spiflash_control_re) begin
		spiflash_start1 <= spiflash_control_storage[0];
	end
end
assign spiflash_length1 = spiflash_control_storage[15:8];
assign csrbank3_spi_control1_w = spiflash_control_storage[15:8];
assign csrbank3_spi_control0_w = spiflash_control_storage[7:0];
assign spiflash_status_status = spiflash_done1;
assign csrbank3_spi_status_w = spiflash_status_status;
assign spiflash_status_we = csrbank3_spi_status_we;
assign csrbank3_spi_mosi4_w = spiflash_mosi_storage[39:32];
assign csrbank3_spi_mosi3_w = spiflash_mosi_storage[31:24];
assign csrbank3_spi_mosi2_w = spiflash_mosi_storage[23:16];
assign csrbank3_spi_mosi1_w = spiflash_mosi_storage[15:8];
assign csrbank3_spi_mosi0_w = spiflash_mosi_storage[7:0];
assign csrbank3_spi_miso4_w = spiflash_miso_status[39:32];
assign csrbank3_spi_miso3_w = spiflash_miso_status[31:24];
assign csrbank3_spi_miso2_w = spiflash_miso_status[23:16];
assign csrbank3_spi_miso1_w = spiflash_miso_status[15:8];
assign csrbank3_spi_miso0_w = spiflash_miso_status[7:0];
assign spiflash_miso_we = csrbank3_spi_miso0_we;
assign spiflash_sel = spiflash_cs_storage;
assign csrbank3_spi_cs0_w = spiflash_cs_storage;
assign csrbank3_spi_loopback0_w = spiflash_loopback_storage;
assign csr_interconnect_adr = main_adr;
assign csr_interconnect_we = main_we;
assign csr_interconnect_dat_w = main_dat_w;
assign main_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r);
assign slice_proxy0 = main_ethcore_mac_depacketizer_header[111:96];
assign slice_proxy1 = main_ethcore_mac_depacketizer_header[111:96];
assign slice_proxy2 = main_ethcore_mac_depacketizer_header[95:48];
assign slice_proxy3 = main_ethcore_mac_depacketizer_header[95:48];
assign slice_proxy4 = main_ethcore_mac_depacketizer_header[95:48];
assign slice_proxy5 = main_ethcore_mac_depacketizer_header[95:48];
assign slice_proxy6 = main_ethcore_mac_depacketizer_header[95:48];
assign slice_proxy7 = main_ethcore_mac_depacketizer_header[95:48];
assign slice_proxy8 = main_ethcore_mac_depacketizer_header[47:0];
assign slice_proxy9 = main_ethcore_mac_depacketizer_header[47:0];
assign slice_proxy10 = main_ethcore_mac_depacketizer_header[47:0];
assign slice_proxy11 = main_ethcore_mac_depacketizer_header[47:0];
assign slice_proxy12 = main_ethcore_mac_depacketizer_header[47:0];
assign slice_proxy13 = main_ethcore_mac_depacketizer_header[47:0];
assign slice_proxy14 = main_ethcore_arp_rx_depacketizer_header[39:32];
assign slice_proxy15 = main_ethcore_arp_rx_depacketizer_header[15:0];
assign slice_proxy16 = main_ethcore_arp_rx_depacketizer_header[15:0];
assign slice_proxy17 = main_ethcore_arp_rx_depacketizer_header[63:48];
assign slice_proxy18 = main_ethcore_arp_rx_depacketizer_header[63:48];
assign slice_proxy19 = main_ethcore_arp_rx_depacketizer_header[31:16];
assign slice_proxy20 = main_ethcore_arp_rx_depacketizer_header[31:16];
assign slice_proxy21 = main_ethcore_arp_rx_depacketizer_header[47:40];
assign slice_proxy22 = main_ethcore_arp_rx_depacketizer_header[143:112];
assign slice_proxy23 = main_ethcore_arp_rx_depacketizer_header[143:112];
assign slice_proxy24 = main_ethcore_arp_rx_depacketizer_header[143:112];
assign slice_proxy25 = main_ethcore_arp_rx_depacketizer_header[143:112];
assign slice_proxy26 = main_ethcore_arp_rx_depacketizer_header[111:64];
assign slice_proxy27 = main_ethcore_arp_rx_depacketizer_header[111:64];
assign slice_proxy28 = main_ethcore_arp_rx_depacketizer_header[111:64];
assign slice_proxy29 = main_ethcore_arp_rx_depacketizer_header[111:64];
assign slice_proxy30 = main_ethcore_arp_rx_depacketizer_header[111:64];
assign slice_proxy31 = main_ethcore_arp_rx_depacketizer_header[111:64];
assign slice_proxy32 = main_ethcore_arp_rx_depacketizer_header[223:192];
assign slice_proxy33 = main_ethcore_arp_rx_depacketizer_header[223:192];
assign slice_proxy34 = main_ethcore_arp_rx_depacketizer_header[223:192];
assign slice_proxy35 = main_ethcore_arp_rx_depacketizer_header[223:192];
assign slice_proxy36 = main_ethcore_arp_rx_depacketizer_header[191:144];
assign slice_proxy37 = main_ethcore_arp_rx_depacketizer_header[191:144];
assign slice_proxy38 = main_ethcore_arp_rx_depacketizer_header[191:144];
assign slice_proxy39 = main_ethcore_arp_rx_depacketizer_header[191:144];
assign slice_proxy40 = main_ethcore_arp_rx_depacketizer_header[191:144];
assign slice_proxy41 = main_ethcore_arp_rx_depacketizer_header[191:144];
assign slice_proxy42 = main_ethcore_ip_rx_depacketizer_header[95:80];
assign slice_proxy43 = main_ethcore_ip_rx_depacketizer_header[95:80];
assign slice_proxy44 = main_ethcore_ip_rx_depacketizer_header[47:32];
assign slice_proxy45 = main_ethcore_ip_rx_depacketizer_header[47:32];
assign slice_proxy46 = main_ethcore_ip_rx_depacketizer_header[3:0];
assign slice_proxy47 = main_ethcore_ip_rx_depacketizer_header[79:72];
assign slice_proxy48 = main_ethcore_ip_rx_depacketizer_header[127:96];
assign slice_proxy49 = main_ethcore_ip_rx_depacketizer_header[127:96];
assign slice_proxy50 = main_ethcore_ip_rx_depacketizer_header[127:96];
assign slice_proxy51 = main_ethcore_ip_rx_depacketizer_header[127:96];
assign slice_proxy52 = main_ethcore_ip_rx_depacketizer_header[159:128];
assign slice_proxy53 = main_ethcore_ip_rx_depacketizer_header[159:128];
assign slice_proxy54 = main_ethcore_ip_rx_depacketizer_header[159:128];
assign slice_proxy55 = main_ethcore_ip_rx_depacketizer_header[159:128];
assign slice_proxy56 = main_ethcore_ip_rx_depacketizer_header[31:16];
assign slice_proxy57 = main_ethcore_ip_rx_depacketizer_header[31:16];
assign slice_proxy58 = main_ethcore_ip_rx_depacketizer_header[71:64];
assign slice_proxy59 = main_ethcore_ip_rx_depacketizer_header[7:4];
assign slice_proxy60 = main_ethcore_icmp_rx_depacketizer_header[31:16];
assign slice_proxy61 = main_ethcore_icmp_rx_depacketizer_header[31:16];
assign slice_proxy62 = main_ethcore_icmp_rx_depacketizer_header[15:8];
assign slice_proxy63 = main_ethcore_icmp_rx_depacketizer_header[7:0];
assign slice_proxy64 = main_ethcore_icmp_rx_depacketizer_header[63:32];
assign slice_proxy65 = main_ethcore_icmp_rx_depacketizer_header[63:32];
assign slice_proxy66 = main_ethcore_icmp_rx_depacketizer_header[63:32];
assign slice_proxy67 = main_ethcore_icmp_rx_depacketizer_header[63:32];
assign slice_proxy68 = main_ethcore_rx_depacketizer_header[63:48];
assign slice_proxy69 = main_ethcore_rx_depacketizer_header[63:48];
assign slice_proxy70 = main_ethcore_rx_depacketizer_header[31:16];
assign slice_proxy71 = main_ethcore_rx_depacketizer_header[31:16];
assign slice_proxy72 = main_ethcore_rx_depacketizer_header[47:32];
assign slice_proxy73 = main_ethcore_rx_depacketizer_header[47:32];
assign slice_proxy74 = main_ethcore_rx_depacketizer_header[15:0];
assign slice_proxy75 = main_ethcore_rx_depacketizer_header[15:0];
assign slice_proxy76 = main_etherbone_rx_depacketizer_header[31:28];
assign slice_proxy77 = main_etherbone_rx_depacketizer_header[15:0];
assign slice_proxy78 = main_etherbone_rx_depacketizer_header[15:0];
assign slice_proxy79 = main_etherbone_rx_depacketizer_header[18];
assign slice_proxy80 = main_etherbone_rx_depacketizer_header[16];
assign slice_proxy81 = main_etherbone_rx_depacketizer_header[27:24];
assign slice_proxy82 = main_etherbone_rx_depacketizer_header[17];
assign slice_proxy83 = main_etherbone_rx_depacketizer_header[23:20];
assign slice_proxy84 = main_etherbone_record_depacketizer_header[0];
assign slice_proxy85 = main_etherbone_record_depacketizer_header[15:8];
assign slice_proxy86 = main_etherbone_record_depacketizer_header[4];
assign slice_proxy87 = main_etherbone_record_depacketizer_header[1];
assign slice_proxy88 = main_etherbone_record_depacketizer_header[31:24];
assign slice_proxy89 = main_etherbone_record_depacketizer_header[2];
assign slice_proxy90 = main_etherbone_record_depacketizer_header[5];
assign slice_proxy91 = main_etherbone_record_depacketizer_header[23:16];
assign slice_proxy92 = main_etherbone_record_depacketizer_header[6];
always @(*) begin
	comb_array_muxed0 <= 1'd0;
	case ((pulsegen_stage - 1'd1))
		1'd0: begin
			comb_array_muxed0 <= pulsegen_fft_pos_r[0];
		end
		1'd1: begin
			comb_array_muxed0 <= pulsegen_fft_pos_r[1];
		end
		2'd2: begin
			comb_array_muxed0 <= pulsegen_fft_pos_r[2];
		end
		2'd3: begin
			comb_array_muxed0 <= pulsegen_fft_pos_r[3];
		end
		3'd4: begin
			comb_array_muxed0 <= pulsegen_fft_pos_r[4];
		end
		default: begin
			comb_array_muxed0 <= pulsegen_fft_pos_r[5];
		end
	endcase
end
always @(*) begin
	comb_array_muxed1 <= 1'd0;
	case (pulsegen_fft_stage_w)
		1'd0: begin
			comb_array_muxed1 <= pulsegen_fft_pos_w[0];
		end
		1'd1: begin
			comb_array_muxed1 <= pulsegen_fft_pos_w[1];
		end
		2'd2: begin
			comb_array_muxed1 <= pulsegen_fft_pos_w[2];
		end
		2'd3: begin
			comb_array_muxed1 <= pulsegen_fft_pos_w[3];
		end
		3'd4: begin
			comb_array_muxed1 <= pulsegen_fft_pos_w[4];
		end
		default: begin
			comb_array_muxed1 <= pulsegen_fft_pos_w[5];
		end
	endcase
end
always @(*) begin
	comb_array_muxed2 <= 1'd0;
	case (pulsegen_fft_stage_w_n)
		1'd0: begin
			comb_array_muxed2 <= pulsegen_scaling_reg[0];
		end
		1'd1: begin
			comb_array_muxed2 <= pulsegen_scaling_reg[1];
		end
		2'd2: begin
			comb_array_muxed2 <= pulsegen_scaling_reg[2];
		end
		2'd3: begin
			comb_array_muxed2 <= pulsegen_scaling_reg[3];
		end
		3'd4: begin
			comb_array_muxed2 <= pulsegen_scaling_reg[4];
		end
		3'd5: begin
			comb_array_muxed2 <= pulsegen_scaling_reg[5];
		end
		default: begin
			comb_array_muxed2 <= pulsegen_scaling_reg[6];
		end
	endcase
end
always @(*) begin
	comb_array_muxed3 <= 30'd0;
	case (grant)
		default: begin
			comb_array_muxed3 <= main_etherbone_liteethetherbonewishbonemaster_bus_adr;
		end
	endcase
end
always @(*) begin
	comb_array_muxed4 <= 32'd0;
	case (grant)
		default: begin
			comb_array_muxed4 <= main_etherbone_liteethetherbonewishbonemaster_bus_dat_w;
		end
	endcase
end
always @(*) begin
	comb_array_muxed5 <= 4'd0;
	case (grant)
		default: begin
			comb_array_muxed5 <= main_etherbone_liteethetherbonewishbonemaster_bus_sel;
		end
	endcase
end
always @(*) begin
	comb_array_muxed6 <= 1'd0;
	case (grant)
		default: begin
			comb_array_muxed6 <= main_etherbone_liteethetherbonewishbonemaster_bus_cyc;
		end
	endcase
end
always @(*) begin
	comb_array_muxed7 <= 1'd0;
	case (grant)
		default: begin
			comb_array_muxed7 <= main_etherbone_liteethetherbonewishbonemaster_bus_stb;
		end
	endcase
end
always @(*) begin
	comb_array_muxed8 <= 1'd0;
	case (grant)
		default: begin
			comb_array_muxed8 <= main_etherbone_liteethetherbonewishbonemaster_bus_we;
		end
	endcase
end
always @(*) begin
	comb_array_muxed9 <= 3'd0;
	case (grant)
		default: begin
			comb_array_muxed9 <= main_etherbone_liteethetherbonewishbonemaster_bus_cti;
		end
	endcase
end
always @(*) begin
	comb_array_muxed10 <= 2'd0;
	case (grant)
		default: begin
			comb_array_muxed10 <= main_etherbone_liteethetherbonewishbonemaster_bus_bte;
		end
	endcase
end
always @(*) begin
	sync_array_muxed <= 1'd0;
	case (spiflash_mosi_sel)
		1'd0: begin
			sync_array_muxed <= spiflash_mosi_data[0];
		end
		1'd1: begin
			sync_array_muxed <= spiflash_mosi_data[1];
		end
		2'd2: begin
			sync_array_muxed <= spiflash_mosi_data[2];
		end
		2'd3: begin
			sync_array_muxed <= spiflash_mosi_data[3];
		end
		3'd4: begin
			sync_array_muxed <= spiflash_mosi_data[4];
		end
		3'd5: begin
			sync_array_muxed <= spiflash_mosi_data[5];
		end
		3'd6: begin
			sync_array_muxed <= spiflash_mosi_data[6];
		end
		3'd7: begin
			sync_array_muxed <= spiflash_mosi_data[7];
		end
		4'd8: begin
			sync_array_muxed <= spiflash_mosi_data[8];
		end
		4'd9: begin
			sync_array_muxed <= spiflash_mosi_data[9];
		end
		4'd10: begin
			sync_array_muxed <= spiflash_mosi_data[10];
		end
		4'd11: begin
			sync_array_muxed <= spiflash_mosi_data[11];
		end
		4'd12: begin
			sync_array_muxed <= spiflash_mosi_data[12];
		end
		4'd13: begin
			sync_array_muxed <= spiflash_mosi_data[13];
		end
		4'd14: begin
			sync_array_muxed <= spiflash_mosi_data[14];
		end
		4'd15: begin
			sync_array_muxed <= spiflash_mosi_data[15];
		end
		5'd16: begin
			sync_array_muxed <= spiflash_mosi_data[16];
		end
		5'd17: begin
			sync_array_muxed <= spiflash_mosi_data[17];
		end
		5'd18: begin
			sync_array_muxed <= spiflash_mosi_data[18];
		end
		5'd19: begin
			sync_array_muxed <= spiflash_mosi_data[19];
		end
		5'd20: begin
			sync_array_muxed <= spiflash_mosi_data[20];
		end
		5'd21: begin
			sync_array_muxed <= spiflash_mosi_data[21];
		end
		5'd22: begin
			sync_array_muxed <= spiflash_mosi_data[22];
		end
		5'd23: begin
			sync_array_muxed <= spiflash_mosi_data[23];
		end
		5'd24: begin
			sync_array_muxed <= spiflash_mosi_data[24];
		end
		5'd25: begin
			sync_array_muxed <= spiflash_mosi_data[25];
		end
		5'd26: begin
			sync_array_muxed <= spiflash_mosi_data[26];
		end
		5'd27: begin
			sync_array_muxed <= spiflash_mosi_data[27];
		end
		5'd28: begin
			sync_array_muxed <= spiflash_mosi_data[28];
		end
		5'd29: begin
			sync_array_muxed <= spiflash_mosi_data[29];
		end
		5'd30: begin
			sync_array_muxed <= spiflash_mosi_data[30];
		end
		5'd31: begin
			sync_array_muxed <= spiflash_mosi_data[31];
		end
		6'd32: begin
			sync_array_muxed <= spiflash_mosi_data[32];
		end
		6'd33: begin
			sync_array_muxed <= spiflash_mosi_data[33];
		end
		6'd34: begin
			sync_array_muxed <= spiflash_mosi_data[34];
		end
		6'd35: begin
			sync_array_muxed <= spiflash_mosi_data[35];
		end
		6'd36: begin
			sync_array_muxed <= spiflash_mosi_data[36];
		end
		6'd37: begin
			sync_array_muxed <= spiflash_mosi_data[37];
		end
		6'd38: begin
			sync_array_muxed <= spiflash_mosi_data[38];
		end
		default: begin
			sync_array_muxed <= spiflash_mosi_data[39];
		end
	endcase
end
always @(*) begin
	ethphy_mdio_status <= 1'd0;
	ethphy_mdio_status <= ethphy_mdio_r;
	ethphy_mdio_status <= multiregimpl0_regs1;
end
assign main_ethcore_mac_ps_preamble_error_toggle_o = multiregimpl1_regs1;
assign main_ethcore_mac_ps_crc_error_toggle_o = multiregimpl2_regs1;
assign main_ethcore_mac_tx_cdc_produce_rdomain = multiregimpl3_regs1;
assign main_ethcore_mac_tx_cdc_consume_wdomain = multiregimpl4_regs1;
assign main_ethcore_mac_rx_cdc_produce_rdomain = multiregimpl5_regs1;
assign main_ethcore_mac_rx_cdc_consume_wdomain = multiregimpl6_regs1;
assign main_etherbone_tx_cdc_produce_rdomain = multiregimpl7_regs1;
assign main_etherbone_tx_cdc_consume_wdomain = multiregimpl8_regs1;
assign main_etherbone_rx_cdc_produce_rdomain = multiregimpl9_regs1;
assign main_etherbone_rx_cdc_consume_wdomain = multiregimpl10_regs1;

always @(posedge eth_rx_clk) begin
	ethphy_liteethphyrgmiirx_rx_ctl_reg <= ethphy_liteethphyrgmiirx_rx_ctl;
	ethphy_liteethphyrgmiirx_rx_data_reg <= ethphy_liteethphyrgmiirx_rx_data;
	ethphy_liteethphyrgmiirx_rx_ctl_reg_d <= ethphy_liteethphyrgmiirx_rx_ctl_reg;
	ethphy_liteethphyrgmiirx_source_valid <= ethphy_liteethphyrgmiirx_rx_ctl_reg[0];
	ethphy_liteethphyrgmiirx_source_payload_data <= ethphy_liteethphyrgmiirx_rx_data_reg;
	if ((ethphy_liteethphyrgmiirx_rx_ctl == 1'd0)) begin
		ethphy_liteethphyrgmiirx_link_status <= ethphy_liteethphyrgmiirx_rx_data[0];
		ethphy_liteethphyrgmiirx_clock_speed <= ethphy_liteethphyrgmiirx_rx_data[2:1];
		ethphy_liteethphyrgmiirx_duplex_status <= ethphy_liteethphyrgmiirx_rx_data[3];
	end
	clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_state <= clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_next_state;
	if (main_ethcore_mac_crc32_checker_crc_ce) begin
		main_ethcore_mac_crc32_checker_crc_reg <= main_ethcore_mac_crc32_checker_crc_next;
	end
	if (main_ethcore_mac_crc32_checker_crc_reset) begin
		main_ethcore_mac_crc32_checker_crc_reg <= 32'd4294967295;
	end
	if (((main_ethcore_mac_crc32_checker_syncfifo_syncfifo_we & main_ethcore_mac_crc32_checker_syncfifo_syncfifo_writable) & (~main_ethcore_mac_crc32_checker_syncfifo_replace))) begin
		if ((main_ethcore_mac_crc32_checker_syncfifo_produce == 3'd4)) begin
			main_ethcore_mac_crc32_checker_syncfifo_produce <= 1'd0;
		end else begin
			main_ethcore_mac_crc32_checker_syncfifo_produce <= (main_ethcore_mac_crc32_checker_syncfifo_produce + 1'd1);
		end
	end
	if (main_ethcore_mac_crc32_checker_syncfifo_do_read) begin
		if ((main_ethcore_mac_crc32_checker_syncfifo_consume == 3'd4)) begin
			main_ethcore_mac_crc32_checker_syncfifo_consume <= 1'd0;
		end else begin
			main_ethcore_mac_crc32_checker_syncfifo_consume <= (main_ethcore_mac_crc32_checker_syncfifo_consume + 1'd1);
		end
	end
	if (((main_ethcore_mac_crc32_checker_syncfifo_syncfifo_we & main_ethcore_mac_crc32_checker_syncfifo_syncfifo_writable) & (~main_ethcore_mac_crc32_checker_syncfifo_replace))) begin
		if ((~main_ethcore_mac_crc32_checker_syncfifo_do_read)) begin
			main_ethcore_mac_crc32_checker_syncfifo_level <= (main_ethcore_mac_crc32_checker_syncfifo_level + 1'd1);
		end
	end else begin
		if (main_ethcore_mac_crc32_checker_syncfifo_do_read) begin
			main_ethcore_mac_crc32_checker_syncfifo_level <= (main_ethcore_mac_crc32_checker_syncfifo_level - 1'd1);
		end
	end
	if (main_ethcore_mac_crc32_checker_fifo_reset) begin
		main_ethcore_mac_crc32_checker_syncfifo_level <= 3'd0;
		main_ethcore_mac_crc32_checker_syncfifo_produce <= 3'd0;
		main_ethcore_mac_crc32_checker_syncfifo_consume <= 3'd0;
	end
	clockdomainsrenamer_liteethmac_liteethmaccrc32checker_state <= clockdomainsrenamer_liteethmac_liteethmaccrc32checker_next_state;
	if (main_ethcore_mac_ps_preamble_error_i) begin
		main_ethcore_mac_ps_preamble_error_toggle_i <= (~main_ethcore_mac_ps_preamble_error_toggle_i);
	end
	if (main_ethcore_mac_ps_crc_error_i) begin
		main_ethcore_mac_ps_crc_error_toggle_i <= (~main_ethcore_mac_ps_crc_error_toggle_i);
	end
	main_ethcore_mac_rx_cdc_graycounter0_q_binary <= main_ethcore_mac_rx_cdc_graycounter0_q_next_binary;
	main_ethcore_mac_rx_cdc_graycounter0_q <= main_ethcore_mac_rx_cdc_graycounter0_q_next;
	if (eth_rx_rst) begin
		ethphy_liteethphyrgmiirx_source_valid <= 1'd0;
		ethphy_liteethphyrgmiirx_link_status <= 1'd0;
		ethphy_liteethphyrgmiirx_clock_speed <= 1'd0;
		ethphy_liteethphyrgmiirx_duplex_status <= 1'd0;
		ethphy_liteethphyrgmiirx_rx_ctl_reg <= 2'd0;
		ethphy_liteethphyrgmiirx_rx_data_reg <= 8'd0;
		ethphy_liteethphyrgmiirx_rx_ctl_reg_d <= 2'd0;
		main_ethcore_mac_crc32_checker_crc_reg <= 32'd4294967295;
		main_ethcore_mac_crc32_checker_syncfifo_level <= 3'd0;
		main_ethcore_mac_crc32_checker_syncfifo_produce <= 3'd0;
		main_ethcore_mac_crc32_checker_syncfifo_consume <= 3'd0;
		main_ethcore_mac_rx_cdc_graycounter0_q <= 7'd0;
		main_ethcore_mac_rx_cdc_graycounter0_q_binary <= 7'd0;
		clockdomainsrenamer_liteethmac_liteethmacpreamblechecker_state <= 1'd0;
		clockdomainsrenamer_liteethmac_liteethmaccrc32checker_state <= 2'd0;
	end
	multiregimpl6_regs0 <= main_ethcore_mac_rx_cdc_graycounter1_q;
	multiregimpl6_regs1 <= multiregimpl6_regs0;
end

always @(posedge eth_tx_clk) begin
	clockdomainsrenamer_liteethmac_liteethmacgap_state <= clockdomainsrenamer_liteethmac_liteethmacgap_next_state;
	if (main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value_ce) begin
		main_ethcore_mac_tx_gap_inserter_counter <= main_ethcore_mac_tx_gap_inserter_counter_liteethmacgap_next_value;
	end
	clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_state <= clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_next_state;
	if (main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value_ce) begin
		main_ethcore_mac_preamble_inserter_count <= main_ethcore_mac_preamble_inserter_count_liteethmacpreambleinserter_next_value;
	end
	if (main_ethcore_mac_crc32_inserter_is_ongoing0) begin
		main_ethcore_mac_crc32_inserter_cnt <= 2'd3;
	end else begin
		if ((main_ethcore_mac_crc32_inserter_is_ongoing1 & (~main_ethcore_mac_crc32_inserter_cnt_done))) begin
			main_ethcore_mac_crc32_inserter_cnt <= (main_ethcore_mac_crc32_inserter_cnt - main_ethcore_mac_crc32_inserter_source_ready);
		end
	end
	if (main_ethcore_mac_crc32_inserter_ce) begin
		main_ethcore_mac_crc32_inserter_reg <= main_ethcore_mac_crc32_inserter_next;
	end
	if (main_ethcore_mac_crc32_inserter_reset) begin
		main_ethcore_mac_crc32_inserter_reg <= 32'd4294967295;
	end
	clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_state <= clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_next_state;
	clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_state <= clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_next_state;
	if (main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value_ce) begin
		main_ethcore_mac_padding_inserter_counter <= main_ethcore_mac_padding_inserter_counter_liteethmacpaddinginserter_next_value;
	end
	main_ethcore_mac_tx_cdc_graycounter1_q_binary <= main_ethcore_mac_tx_cdc_graycounter1_q_next_binary;
	main_ethcore_mac_tx_cdc_graycounter1_q <= main_ethcore_mac_tx_cdc_graycounter1_q_next;
	if (main_ethcore_mac_ps_preamble_error_o) begin
		main_ethcore_mac_preamble_errors_status <= (main_ethcore_mac_preamble_errors_status + 1'd1);
	end
	if (main_ethcore_mac_ps_crc_error_o) begin
		main_ethcore_mac_crc_errors_status <= (main_ethcore_mac_crc_errors_status + 1'd1);
	end
	main_ethcore_mac_ps_preamble_error_toggle_o_r <= main_ethcore_mac_ps_preamble_error_toggle_o;
	main_ethcore_mac_ps_crc_error_toggle_o_r <= main_ethcore_mac_ps_crc_error_toggle_o;
	main_ethcore_mac_tx_cdc_graycounter0_q_binary <= main_ethcore_mac_tx_cdc_graycounter0_q_next_binary;
	main_ethcore_mac_tx_cdc_graycounter0_q <= main_ethcore_mac_tx_cdc_graycounter0_q_next;
	main_ethcore_mac_rx_cdc_graycounter1_q_binary <= main_ethcore_mac_rx_cdc_graycounter1_q_next_binary;
	main_ethcore_mac_rx_cdc_graycounter1_q <= main_ethcore_mac_rx_cdc_graycounter1_q_next;
	case (clockdomainsrenamer_liteethmac_grant)
		1'd0: begin
			if ((~clockdomainsrenamer_liteethmac_request[0])) begin
				if (clockdomainsrenamer_liteethmac_request[1]) begin
					clockdomainsrenamer_liteethmac_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~clockdomainsrenamer_liteethmac_request[1])) begin
				if (clockdomainsrenamer_liteethmac_request[0]) begin
					clockdomainsrenamer_liteethmac_grant <= 1'd0;
				end
			end
		end
	endcase
	clockdomainsrenamer_liteethmac_status0_ongoing1 <= ((main_ethcore_arp_mac_port_sink_valid | clockdomainsrenamer_liteethmac_status0_ongoing1) & (~clockdomainsrenamer_liteethmac_status0_last));
	if (clockdomainsrenamer_liteethmac_status0_last) begin
		clockdomainsrenamer_liteethmac_status0_first <= 1'd1;
	end else begin
		if ((main_ethcore_arp_mac_port_sink_valid & main_ethcore_arp_mac_port_sink_ready)) begin
			clockdomainsrenamer_liteethmac_status0_first <= 1'd0;
		end
	end
	clockdomainsrenamer_liteethmac_status1_ongoing1 <= ((main_ethcore_ip_mac_port_sink_valid | clockdomainsrenamer_liteethmac_status1_ongoing1) & (~clockdomainsrenamer_liteethmac_status1_last));
	if (clockdomainsrenamer_liteethmac_status1_last) begin
		clockdomainsrenamer_liteethmac_status1_first <= 1'd1;
	end else begin
		if ((main_ethcore_ip_mac_port_sink_valid & main_ethcore_ip_mac_port_sink_ready)) begin
			clockdomainsrenamer_liteethmac_status1_first <= 1'd0;
		end
	end
	if (clockdomainsrenamer_liteethmac_first) begin
		clockdomainsrenamer_liteethmac_sel_ongoing <= clockdomainsrenamer_liteethmac_sel0;
	end
	clockdomainsrenamer_liteethmac_ongoing1 <= ((main_ethcore_mac_crossbar_sink_valid | clockdomainsrenamer_liteethmac_ongoing1) & (~clockdomainsrenamer_liteethmac_last));
	if (clockdomainsrenamer_liteethmac_last) begin
		clockdomainsrenamer_liteethmac_first <= 1'd1;
	end else begin
		if ((main_ethcore_mac_crossbar_sink_valid & main_ethcore_mac_crossbar_sink_ready)) begin
			clockdomainsrenamer_liteethmac_first <= 1'd0;
		end
	end
	if (main_ethcore_mac_packetizer_sr_load) begin
		main_ethcore_mac_packetizer_sr <= main_ethcore_mac_packetizer_header;
	end
	if (main_ethcore_mac_packetizer_sr_shift) begin
		main_ethcore_mac_packetizer_sr <= main_ethcore_mac_packetizer_sr[111:8];
	end
	if (main_ethcore_mac_packetizer_source_ready) begin
		main_ethcore_mac_packetizer_sink_d_valid <= main_ethcore_mac_packetizer_sink_valid;
		main_ethcore_mac_packetizer_sink_d_ready <= main_ethcore_mac_packetizer_sink_ready;
		main_ethcore_mac_packetizer_sink_d_first <= main_ethcore_mac_packetizer_sink_first;
		main_ethcore_mac_packetizer_sink_d_last <= main_ethcore_mac_packetizer_sink_last;
		main_ethcore_mac_packetizer_sink_d_payload_ethernet_type <= main_ethcore_mac_packetizer_sink_payload_ethernet_type;
		main_ethcore_mac_packetizer_sink_d_payload_sender_mac <= main_ethcore_mac_packetizer_sink_payload_sender_mac;
		main_ethcore_mac_packetizer_sink_d_payload_target_mac <= main_ethcore_mac_packetizer_sink_payload_target_mac;
		main_ethcore_mac_packetizer_sink_d_payload_data <= main_ethcore_mac_packetizer_sink_payload_data;
		main_ethcore_mac_packetizer_sink_d_payload_last_be <= main_ethcore_mac_packetizer_sink_payload_last_be;
		main_ethcore_mac_packetizer_sink_d_payload_error <= main_ethcore_mac_packetizer_sink_payload_error;
	end
	clockdomainsrenamer_liteethmac_liteethmacpacketizer_state <= clockdomainsrenamer_liteethmac_liteethmacpacketizer_next_state;
	if (main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value_ce0) begin
		main_ethcore_mac_packetizer_count <= main_ethcore_mac_packetizer_count_liteethmacpacketizer_next_value0;
	end
	if (main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value_ce1) begin
		main_ethcore_mac_packetizer_fsm_from_idle <= main_ethcore_mac_packetizer_fsm_from_idle_liteethmacpacketizer_next_value1;
	end
	if (main_ethcore_mac_depacketizer_sr_shift) begin
		main_ethcore_mac_depacketizer_sr <= {main_ethcore_mac_depacketizer_sink_payload_data, main_ethcore_mac_depacketizer_sr[111:8]};
	end
	if (main_ethcore_mac_depacketizer_sr_shift_leftover) begin
		main_ethcore_mac_depacketizer_sr <= {main_ethcore_mac_depacketizer_sink_payload_data, main_ethcore_mac_depacketizer_sr[111:0]};
	end
	if ((main_ethcore_mac_depacketizer_sink_valid & main_ethcore_mac_depacketizer_sink_ready)) begin
		main_ethcore_mac_depacketizer_sink_d_valid <= main_ethcore_mac_depacketizer_sink_valid;
		main_ethcore_mac_depacketizer_sink_d_ready <= main_ethcore_mac_depacketizer_sink_ready;
		main_ethcore_mac_depacketizer_sink_d_first <= main_ethcore_mac_depacketizer_sink_first;
		main_ethcore_mac_depacketizer_sink_d_last <= main_ethcore_mac_depacketizer_sink_last;
		main_ethcore_mac_depacketizer_sink_d_payload_data <= main_ethcore_mac_depacketizer_sink_payload_data;
		main_ethcore_mac_depacketizer_sink_d_payload_last_be <= main_ethcore_mac_depacketizer_sink_payload_last_be;
		main_ethcore_mac_depacketizer_sink_d_payload_error <= main_ethcore_mac_depacketizer_sink_payload_error;
	end
	clockdomainsrenamer_liteethmac_liteethmacdepacketizer_state <= clockdomainsrenamer_liteethmac_liteethmacdepacketizer_next_state;
	if (main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value_ce0) begin
		main_ethcore_mac_depacketizer_count <= main_ethcore_mac_depacketizer_count_liteethmacdepacketizer_next_value0;
	end
	if (main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value_ce1) begin
		main_ethcore_mac_depacketizer_fsm_from_idle <= main_ethcore_mac_depacketizer_fsm_from_idle_liteethmacdepacketizer_next_value1;
	end
	if (main_ethcore_arp_tx_packetizer_sr_load) begin
		main_ethcore_arp_tx_packetizer_sr <= main_ethcore_arp_tx_packetizer_header;
	end
	if (main_ethcore_arp_tx_packetizer_sr_shift) begin
		main_ethcore_arp_tx_packetizer_sr <= main_ethcore_arp_tx_packetizer_sr[223:8];
	end
	if (main_ethcore_arp_tx_packetizer_source_ready) begin
		main_ethcore_arp_tx_packetizer_sink_d_valid <= main_ethcore_arp_tx_packetizer_sink_valid;
		main_ethcore_arp_tx_packetizer_sink_d_ready <= main_ethcore_arp_tx_packetizer_sink_ready;
		main_ethcore_arp_tx_packetizer_sink_d_first <= main_ethcore_arp_tx_packetizer_sink_first;
		main_ethcore_arp_tx_packetizer_sink_d_last <= main_ethcore_arp_tx_packetizer_sink_last;
		main_ethcore_arp_tx_packetizer_sink_d_payload_data <= main_ethcore_arp_tx_packetizer_sink_payload_data;
		main_ethcore_arp_tx_packetizer_sink_d_payload_error <= main_ethcore_arp_tx_packetizer_sink_payload_error;
		main_ethcore_arp_tx_packetizer_sink_d_param_hwsize <= main_ethcore_arp_tx_packetizer_sink_param_hwsize;
		main_ethcore_arp_tx_packetizer_sink_d_param_hwtype <= main_ethcore_arp_tx_packetizer_sink_param_hwtype;
		main_ethcore_arp_tx_packetizer_sink_d_param_opcode <= main_ethcore_arp_tx_packetizer_sink_param_opcode;
		main_ethcore_arp_tx_packetizer_sink_d_param_proto <= main_ethcore_arp_tx_packetizer_sink_param_proto;
		main_ethcore_arp_tx_packetizer_sink_d_param_protosize <= main_ethcore_arp_tx_packetizer_sink_param_protosize;
		main_ethcore_arp_tx_packetizer_sink_d_param_sender_ip <= main_ethcore_arp_tx_packetizer_sink_param_sender_ip;
		main_ethcore_arp_tx_packetizer_sink_d_param_sender_mac <= main_ethcore_arp_tx_packetizer_sink_param_sender_mac;
		main_ethcore_arp_tx_packetizer_sink_d_param_target_ip <= main_ethcore_arp_tx_packetizer_sink_param_target_ip;
		main_ethcore_arp_tx_packetizer_sink_d_param_target_mac <= main_ethcore_arp_tx_packetizer_sink_param_target_mac;
	end
	clockdomainsrenamer_liteetharptx_liteetharppacketizer_state <= clockdomainsrenamer_liteetharptx_liteetharppacketizer_next_state;
	if (main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value_ce0) begin
		main_ethcore_arp_tx_packetizer_count <= main_ethcore_arp_tx_packetizer_count_liteetharp_liteetharppacketizer_next_value0;
	end
	if (main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value_ce1) begin
		main_ethcore_arp_tx_packetizer_fsm_from_idle <= main_ethcore_arp_tx_packetizer_fsm_from_idle_liteetharp_liteetharppacketizer_next_value1;
	end
	clockdomainsrenamer_liteetharptx_fsm_state <= clockdomainsrenamer_liteetharptx_fsm_next_state;
	if (main_ethcore_arp_tx_counter_liteetharp_fsm_next_value_ce) begin
		main_ethcore_arp_tx_counter <= main_ethcore_arp_tx_counter_liteetharp_fsm_next_value;
	end
	main_ethcore_arp_rx_valid <= (((((main_ethcore_arp_rx_depacketizer_source_valid & (main_ethcore_arp_rx_depacketizer_source_param_hwtype == 1'd1)) & (main_ethcore_arp_rx_depacketizer_source_param_proto == 12'd2048)) & (main_ethcore_arp_rx_depacketizer_source_param_hwsize == 3'd6)) & (main_ethcore_arp_rx_depacketizer_source_param_protosize == 3'd4)) & (main_ethcore_arp_rx_depacketizer_source_param_target_ip == 32'd3232235796));
	if (main_ethcore_arp_rx_depacketizer_sr_shift) begin
		main_ethcore_arp_rx_depacketizer_sr <= {main_ethcore_arp_rx_depacketizer_sink_payload_data, main_ethcore_arp_rx_depacketizer_sr[223:8]};
	end
	if (main_ethcore_arp_rx_depacketizer_sr_shift_leftover) begin
		main_ethcore_arp_rx_depacketizer_sr <= {main_ethcore_arp_rx_depacketizer_sink_payload_data, main_ethcore_arp_rx_depacketizer_sr[223:0]};
	end
	if ((main_ethcore_arp_rx_depacketizer_sink_valid & main_ethcore_arp_rx_depacketizer_sink_ready)) begin
		main_ethcore_arp_rx_depacketizer_sink_d_valid <= main_ethcore_arp_rx_depacketizer_sink_valid;
		main_ethcore_arp_rx_depacketizer_sink_d_ready <= main_ethcore_arp_rx_depacketizer_sink_ready;
		main_ethcore_arp_rx_depacketizer_sink_d_first <= main_ethcore_arp_rx_depacketizer_sink_first;
		main_ethcore_arp_rx_depacketizer_sink_d_last <= main_ethcore_arp_rx_depacketizer_sink_last;
		main_ethcore_arp_rx_depacketizer_sink_d_payload_ethernet_type <= main_ethcore_arp_rx_depacketizer_sink_payload_ethernet_type;
		main_ethcore_arp_rx_depacketizer_sink_d_payload_sender_mac <= main_ethcore_arp_rx_depacketizer_sink_payload_sender_mac;
		main_ethcore_arp_rx_depacketizer_sink_d_payload_target_mac <= main_ethcore_arp_rx_depacketizer_sink_payload_target_mac;
		main_ethcore_arp_rx_depacketizer_sink_d_payload_data <= main_ethcore_arp_rx_depacketizer_sink_payload_data;
		main_ethcore_arp_rx_depacketizer_sink_d_payload_last_be <= main_ethcore_arp_rx_depacketizer_sink_payload_last_be;
		main_ethcore_arp_rx_depacketizer_sink_d_payload_error <= main_ethcore_arp_rx_depacketizer_sink_payload_error;
	end
	clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_state <= clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_next_state;
	if (main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value_ce0) begin
		main_ethcore_arp_rx_depacketizer_count <= main_ethcore_arp_rx_depacketizer_count_liteetharp_next_value0;
	end
	if (main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value_ce1) begin
		main_ethcore_arp_rx_depacketizer_fsm_from_idle <= main_ethcore_arp_rx_depacketizer_fsm_from_idle_liteetharp_next_value1;
	end
	clockdomainsrenamer_liteetharprx_fsm_state <= clockdomainsrenamer_liteetharprx_fsm_next_state;
	if (main_ethcore_arp_table_request_pending_clr) begin
		main_ethcore_arp_table_request_pending <= 1'd0;
	end else begin
		if (main_ethcore_arp_table_request_pending_set) begin
			main_ethcore_arp_table_request_pending <= 1'd1;
		end
	end
	if (main_ethcore_arp_table_request_ip_address_reset) begin
		main_ethcore_arp_table_request_ip_address <= 1'd0;
	end else begin
		if (main_ethcore_arp_table_request_ip_address_update) begin
			main_ethcore_arp_table_request_ip_address <= main_ethcore_arp_table_request_payload_ip_address;
		end
	end
	if (main_ethcore_arp_table_request_counter_reset) begin
		main_ethcore_arp_table_request_counter <= 1'd0;
	end else begin
		if (main_ethcore_arp_table_request_counter_ce) begin
			main_ethcore_arp_table_request_counter <= (main_ethcore_arp_table_request_counter + 1'd1);
		end
	end
	if (main_ethcore_arp_table_update) begin
		main_ethcore_arp_table_cached_valid <= 1'd1;
		main_ethcore_arp_table_cached_ip_address <= main_ethcore_arp_table_sink_payload_ip_address;
		main_ethcore_arp_table_cached_mac_address <= main_ethcore_arp_table_sink_payload_mac_address;
	end else begin
		if (main_ethcore_arp_table_cached_timer_done) begin
			main_ethcore_arp_table_cached_valid <= 1'd0;
		end
	end
	if (main_ethcore_arp_table_request_timer_wait) begin
		if ((~main_ethcore_arp_table_request_timer_done)) begin
			main_ethcore_arp_table_request_timer_count <= (main_ethcore_arp_table_request_timer_count - 1'd1);
		end
	end else begin
		main_ethcore_arp_table_request_timer_count <= 23'd5000000;
	end
	if (main_ethcore_arp_table_cached_timer_wait) begin
		if ((~main_ethcore_arp_table_cached_timer_done)) begin
			main_ethcore_arp_table_cached_timer_count <= (main_ethcore_arp_table_cached_timer_count - 1'd1);
		end
	end else begin
		main_ethcore_arp_table_cached_timer_count <= 29'd500000000;
	end
	clockdomainsrenamer_state <= clockdomainsrenamer_next_state;
	if (main_ethcore_ip_tx_ce) begin
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next0 <= {main_ethcore_ip_tx_liteethipv4checksum0, (main_ethcore_ip_tx_liteethipv4checksum_s_next0[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next0[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next1 <= {main_ethcore_ip_tx_liteethipv4checksum1, (main_ethcore_ip_tx_liteethipv4checksum_s_next1[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next1[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next2 <= {main_ethcore_ip_tx_liteethipv4checksum2, (main_ethcore_ip_tx_liteethipv4checksum_s_next2[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next2[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next3 <= {main_ethcore_ip_tx_liteethipv4checksum3, (main_ethcore_ip_tx_liteethipv4checksum_s_next3[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next3[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next4 <= {main_ethcore_ip_tx_liteethipv4checksum4, (main_ethcore_ip_tx_liteethipv4checksum_s_next4[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next4[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next5 <= {main_ethcore_ip_tx_liteethipv4checksum5, (main_ethcore_ip_tx_liteethipv4checksum_s_next5[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next5[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next6 <= {main_ethcore_ip_tx_liteethipv4checksum6, (main_ethcore_ip_tx_liteethipv4checksum_s_next6[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next6[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next7 <= {main_ethcore_ip_tx_liteethipv4checksum7, (main_ethcore_ip_tx_liteethipv4checksum_s_next7[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next7[16])};
		end
		if ((~main_ethcore_ip_tx_liteethipv4checksum_done)) begin
			main_ethcore_ip_tx_liteethipv4checksum_r_next8 <= {main_ethcore_ip_tx_liteethipv4checksum8, (main_ethcore_ip_tx_liteethipv4checksum_s_next8[15:0] + main_ethcore_ip_tx_liteethipv4checksum_s_next8[16])};
		end
		if (main_ethcore_ip_tx_liteethipv4checksum_counter_ce) begin
			main_ethcore_ip_tx_liteethipv4checksum_counter <= (main_ethcore_ip_tx_liteethipv4checksum_counter + 1'd1);
		end
	end
	if (main_ethcore_ip_tx_reset) begin
		main_ethcore_ip_tx_liteethipv4checksum_counter <= 4'd0;
	end
	if (main_ethcore_ip_tx_packetizer_sr_load) begin
		main_ethcore_ip_tx_packetizer_sr <= main_ethcore_ip_tx_packetizer_header;
	end
	if (main_ethcore_ip_tx_packetizer_sr_shift) begin
		main_ethcore_ip_tx_packetizer_sr <= main_ethcore_ip_tx_packetizer_sr[159:8];
	end
	if (main_ethcore_ip_tx_packetizer_source_ready) begin
		main_ethcore_ip_tx_packetizer_sink_d_valid <= main_ethcore_ip_tx_packetizer_sink_valid;
		main_ethcore_ip_tx_packetizer_sink_d_ready <= main_ethcore_ip_tx_packetizer_sink_ready;
		main_ethcore_ip_tx_packetizer_sink_d_first <= main_ethcore_ip_tx_packetizer_sink_first;
		main_ethcore_ip_tx_packetizer_sink_d_last <= main_ethcore_ip_tx_packetizer_sink_last;
		main_ethcore_ip_tx_packetizer_sink_d_payload_data <= main_ethcore_ip_tx_packetizer_sink_payload_data;
		main_ethcore_ip_tx_packetizer_sink_d_payload_error <= main_ethcore_ip_tx_packetizer_sink_payload_error;
		main_ethcore_ip_tx_packetizer_sink_d_param_checksum <= main_ethcore_ip_tx_packetizer_sink_param_checksum;
		main_ethcore_ip_tx_packetizer_sink_d_param_identification <= main_ethcore_ip_tx_packetizer_sink_param_identification;
		main_ethcore_ip_tx_packetizer_sink_d_param_ihl <= main_ethcore_ip_tx_packetizer_sink_param_ihl;
		main_ethcore_ip_tx_packetizer_sink_d_param_protocol <= main_ethcore_ip_tx_packetizer_sink_param_protocol;
		main_ethcore_ip_tx_packetizer_sink_d_param_sender_ip <= main_ethcore_ip_tx_packetizer_sink_param_sender_ip;
		main_ethcore_ip_tx_packetizer_sink_d_param_target_ip <= main_ethcore_ip_tx_packetizer_sink_param_target_ip;
		main_ethcore_ip_tx_packetizer_sink_d_param_total_length <= main_ethcore_ip_tx_packetizer_sink_param_total_length;
		main_ethcore_ip_tx_packetizer_sink_d_param_ttl <= main_ethcore_ip_tx_packetizer_sink_param_ttl;
		main_ethcore_ip_tx_packetizer_sink_d_param_version <= main_ethcore_ip_tx_packetizer_sink_param_version;
	end
	clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_state <= clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_next_state;
	if (main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value_ce0) begin
		main_ethcore_ip_tx_packetizer_count <= main_ethcore_ip_tx_packetizer_count_liteethip_liteethipv4packetizer_next_value0;
	end
	if (main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value_ce1) begin
		main_ethcore_ip_tx_packetizer_fsm_from_idle <= main_ethcore_ip_tx_packetizer_fsm_from_idle_liteethip_liteethipv4packetizer_next_value1;
	end
	clockdomainsrenamer_liteethip_liteethiptx_fsm_state <= clockdomainsrenamer_liteethip_liteethiptx_fsm_next_state;
	if (main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value_ce) begin
		main_ethcore_ip_tx_target_mac <= main_ethcore_ip_tx_target_mac_liteethip_fsm_next_value;
	end
	main_ethcore_ip_rx_valid <= ((((main_ethcore_ip_rx_depacketizer_source_valid & (main_ethcore_ip_rx_depacketizer_source_param_target_ip == 32'd3232235796)) & (main_ethcore_ip_rx_depacketizer_source_param_version == 3'd4)) & (main_ethcore_ip_rx_depacketizer_source_param_ihl == 3'd5)) & (main_ethcore_ip_rx_liteethipv4checksum_value == 1'd0));
	if (main_ethcore_ip_rx_depacketizer_sr_shift) begin
		main_ethcore_ip_rx_depacketizer_sr <= {main_ethcore_ip_rx_depacketizer_sink_payload_data, main_ethcore_ip_rx_depacketizer_sr[159:8]};
	end
	if (main_ethcore_ip_rx_depacketizer_sr_shift_leftover) begin
		main_ethcore_ip_rx_depacketizer_sr <= {main_ethcore_ip_rx_depacketizer_sink_payload_data, main_ethcore_ip_rx_depacketizer_sr[159:0]};
	end
	if ((main_ethcore_ip_rx_depacketizer_sink_valid & main_ethcore_ip_rx_depacketizer_sink_ready)) begin
		main_ethcore_ip_rx_depacketizer_sink_d_valid <= main_ethcore_ip_rx_depacketizer_sink_valid;
		main_ethcore_ip_rx_depacketizer_sink_d_ready <= main_ethcore_ip_rx_depacketizer_sink_ready;
		main_ethcore_ip_rx_depacketizer_sink_d_first <= main_ethcore_ip_rx_depacketizer_sink_first;
		main_ethcore_ip_rx_depacketizer_sink_d_last <= main_ethcore_ip_rx_depacketizer_sink_last;
		main_ethcore_ip_rx_depacketizer_sink_d_payload_ethernet_type <= main_ethcore_ip_rx_depacketizer_sink_payload_ethernet_type;
		main_ethcore_ip_rx_depacketizer_sink_d_payload_sender_mac <= main_ethcore_ip_rx_depacketizer_sink_payload_sender_mac;
		main_ethcore_ip_rx_depacketizer_sink_d_payload_target_mac <= main_ethcore_ip_rx_depacketizer_sink_payload_target_mac;
		main_ethcore_ip_rx_depacketizer_sink_d_payload_data <= main_ethcore_ip_rx_depacketizer_sink_payload_data;
		main_ethcore_ip_rx_depacketizer_sink_d_payload_last_be <= main_ethcore_ip_rx_depacketizer_sink_payload_last_be;
		main_ethcore_ip_rx_depacketizer_sink_d_payload_error <= main_ethcore_ip_rx_depacketizer_sink_payload_error;
	end
	clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_state <= clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_next_state;
	if (main_ethcore_ip_rx_depacketizer_count_liteethip_next_value_ce0) begin
		main_ethcore_ip_rx_depacketizer_count <= main_ethcore_ip_rx_depacketizer_count_liteethip_next_value0;
	end
	if (main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value_ce1) begin
		main_ethcore_ip_rx_depacketizer_fsm_from_idle <= main_ethcore_ip_rx_depacketizer_fsm_from_idle_liteethip_next_value1;
	end
	if (main_ethcore_ip_rx_ce) begin
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next0 <= {main_ethcore_ip_rx_liteethipv4checksum0, (main_ethcore_ip_rx_liteethipv4checksum_s_next0[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next0[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next1 <= {main_ethcore_ip_rx_liteethipv4checksum1, (main_ethcore_ip_rx_liteethipv4checksum_s_next1[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next1[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next2 <= {main_ethcore_ip_rx_liteethipv4checksum2, (main_ethcore_ip_rx_liteethipv4checksum_s_next2[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next2[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next3 <= {main_ethcore_ip_rx_liteethipv4checksum3, (main_ethcore_ip_rx_liteethipv4checksum_s_next3[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next3[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next4 <= {main_ethcore_ip_rx_liteethipv4checksum4, (main_ethcore_ip_rx_liteethipv4checksum_s_next4[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next4[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next5 <= {main_ethcore_ip_rx_liteethipv4checksum5, (main_ethcore_ip_rx_liteethipv4checksum_s_next5[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next5[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next6 <= {main_ethcore_ip_rx_liteethipv4checksum6, (main_ethcore_ip_rx_liteethipv4checksum_s_next6[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next6[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next7 <= {main_ethcore_ip_rx_liteethipv4checksum7, (main_ethcore_ip_rx_liteethipv4checksum_s_next7[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next7[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next8 <= {main_ethcore_ip_rx_liteethipv4checksum8, (main_ethcore_ip_rx_liteethipv4checksum_s_next8[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next8[16])};
		end
		if ((~main_ethcore_ip_rx_liteethipv4checksum_done)) begin
			main_ethcore_ip_rx_liteethipv4checksum_r_next9 <= {main_ethcore_ip_rx_liteethipv4checksum9, (main_ethcore_ip_rx_liteethipv4checksum_s_next9[15:0] + main_ethcore_ip_rx_liteethipv4checksum_s_next9[16])};
		end
		if (main_ethcore_ip_rx_liteethipv4checksum_counter_ce) begin
			main_ethcore_ip_rx_liteethipv4checksum_counter <= (main_ethcore_ip_rx_liteethipv4checksum_counter + 1'd1);
		end
	end
	if (main_ethcore_ip_rx_reset) begin
		main_ethcore_ip_rx_liteethipv4checksum_counter <= 4'd0;
	end
	clockdomainsrenamer_liteethip_liteethiprx_fsm_state <= clockdomainsrenamer_liteethip_liteethiprx_fsm_next_state;
	case (clockdomainsrenamer_liteethip_grant)
		1'd0: begin
			if ((~clockdomainsrenamer_liteethip_request[0])) begin
				if (clockdomainsrenamer_liteethip_request[1]) begin
					clockdomainsrenamer_liteethip_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~clockdomainsrenamer_liteethip_request[1])) begin
				if (clockdomainsrenamer_liteethip_request[0]) begin
					clockdomainsrenamer_liteethip_grant <= 1'd0;
				end
			end
		end
	endcase
	clockdomainsrenamer_liteethip_status0_ongoing1 <= ((main_ethcore_icmp_sink_valid | clockdomainsrenamer_liteethip_status0_ongoing1) & (~clockdomainsrenamer_liteethip_status0_last));
	if (clockdomainsrenamer_liteethip_status0_last) begin
		clockdomainsrenamer_liteethip_status0_first <= 1'd1;
	end else begin
		if ((main_ethcore_icmp_sink_valid & main_ethcore_icmp_sink_ready)) begin
			clockdomainsrenamer_liteethip_status0_first <= 1'd0;
		end
	end
	clockdomainsrenamer_liteethip_status1_ongoing1 <= ((main_ethcore_ip_port_sink_valid | clockdomainsrenamer_liteethip_status1_ongoing1) & (~clockdomainsrenamer_liteethip_status1_last));
	if (clockdomainsrenamer_liteethip_status1_last) begin
		clockdomainsrenamer_liteethip_status1_first <= 1'd1;
	end else begin
		if ((main_ethcore_ip_port_sink_valid & main_ethcore_ip_port_sink_ready)) begin
			clockdomainsrenamer_liteethip_status1_first <= 1'd0;
		end
	end
	if (clockdomainsrenamer_liteethip_first) begin
		clockdomainsrenamer_liteethip_sel_ongoing <= clockdomainsrenamer_liteethip_sel0;
	end
	clockdomainsrenamer_liteethip_ongoing1 <= ((main_ethcore_ip_crossbar_sink_valid | clockdomainsrenamer_liteethip_ongoing1) & (~clockdomainsrenamer_liteethip_last));
	if (clockdomainsrenamer_liteethip_last) begin
		clockdomainsrenamer_liteethip_first <= 1'd1;
	end else begin
		if ((main_ethcore_ip_crossbar_sink_valid & main_ethcore_ip_crossbar_sink_ready)) begin
			clockdomainsrenamer_liteethip_first <= 1'd0;
		end
	end
	if (main_ethcore_icmp_tx_packetizer_sr_load) begin
		main_ethcore_icmp_tx_packetizer_sr <= main_ethcore_icmp_tx_packetizer_header;
	end
	if (main_ethcore_icmp_tx_packetizer_sr_shift) begin
		main_ethcore_icmp_tx_packetizer_sr <= main_ethcore_icmp_tx_packetizer_sr[63:8];
	end
	if (main_ethcore_icmp_tx_packetizer_source_ready) begin
		main_ethcore_icmp_tx_packetizer_sink_d_valid <= main_ethcore_icmp_tx_packetizer_sink_valid;
		main_ethcore_icmp_tx_packetizer_sink_d_ready <= main_ethcore_icmp_tx_packetizer_sink_ready;
		main_ethcore_icmp_tx_packetizer_sink_d_first <= main_ethcore_icmp_tx_packetizer_sink_first;
		main_ethcore_icmp_tx_packetizer_sink_d_last <= main_ethcore_icmp_tx_packetizer_sink_last;
		main_ethcore_icmp_tx_packetizer_sink_d_payload_data <= main_ethcore_icmp_tx_packetizer_sink_payload_data;
		main_ethcore_icmp_tx_packetizer_sink_d_payload_error <= main_ethcore_icmp_tx_packetizer_sink_payload_error;
		main_ethcore_icmp_tx_packetizer_sink_d_param_checksum <= main_ethcore_icmp_tx_packetizer_sink_param_checksum;
		main_ethcore_icmp_tx_packetizer_sink_d_param_code <= main_ethcore_icmp_tx_packetizer_sink_param_code;
		main_ethcore_icmp_tx_packetizer_sink_d_param_msgtype <= main_ethcore_icmp_tx_packetizer_sink_param_msgtype;
		main_ethcore_icmp_tx_packetizer_sink_d_param_quench <= main_ethcore_icmp_tx_packetizer_sink_param_quench;
	end
	clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_state <= clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_next_state;
	if (main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value_ce0) begin
		main_ethcore_icmp_tx_packetizer_count <= main_ethcore_icmp_tx_packetizer_count_liteethicmptx_next_value0;
	end
	if (main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value_ce1) begin
		main_ethcore_icmp_tx_packetizer_fsm_from_idle <= main_ethcore_icmp_tx_packetizer_fsm_from_idle_liteethicmptx_next_value1;
	end
	clockdomainsrenamer_liteethicmptx_fsm_state <= clockdomainsrenamer_liteethicmptx_fsm_next_state;
	main_ethcore_icmp_rx_valid <= (main_ethcore_icmp_rx_depacketizer_source_valid & (main_ethcore_icmp_rx_sink_sink_param_protocol == 1'd1));
	if (main_ethcore_icmp_rx_depacketizer_sr_shift) begin
		main_ethcore_icmp_rx_depacketizer_sr <= {main_ethcore_icmp_rx_depacketizer_sink_payload_data, main_ethcore_icmp_rx_depacketizer_sr[63:8]};
	end
	if (main_ethcore_icmp_rx_depacketizer_sr_shift_leftover) begin
		main_ethcore_icmp_rx_depacketizer_sr <= {main_ethcore_icmp_rx_depacketizer_sink_payload_data, main_ethcore_icmp_rx_depacketizer_sr[63:0]};
	end
	if ((main_ethcore_icmp_rx_depacketizer_sink_valid & main_ethcore_icmp_rx_depacketizer_sink_ready)) begin
		main_ethcore_icmp_rx_depacketizer_sink_d_valid <= main_ethcore_icmp_rx_depacketizer_sink_valid;
		main_ethcore_icmp_rx_depacketizer_sink_d_ready <= main_ethcore_icmp_rx_depacketizer_sink_ready;
		main_ethcore_icmp_rx_depacketizer_sink_d_first <= main_ethcore_icmp_rx_depacketizer_sink_first;
		main_ethcore_icmp_rx_depacketizer_sink_d_last <= main_ethcore_icmp_rx_depacketizer_sink_last;
		main_ethcore_icmp_rx_depacketizer_sink_d_payload_data <= main_ethcore_icmp_rx_depacketizer_sink_payload_data;
		main_ethcore_icmp_rx_depacketizer_sink_d_payload_error <= main_ethcore_icmp_rx_depacketizer_sink_payload_error;
		main_ethcore_icmp_rx_depacketizer_sink_d_param_length <= main_ethcore_icmp_rx_depacketizer_sink_param_length;
		main_ethcore_icmp_rx_depacketizer_sink_d_param_protocol <= main_ethcore_icmp_rx_depacketizer_sink_param_protocol;
		main_ethcore_icmp_rx_depacketizer_sink_d_param_ip_address <= main_ethcore_icmp_rx_depacketizer_sink_param_ip_address;
	end
	clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_state <= clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_next_state;
	if (main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value_ce0) begin
		main_ethcore_icmp_rx_depacketizer_count <= main_ethcore_icmp_rx_depacketizer_count_liteethicmprx_next_value0;
	end
	if (main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value_ce1) begin
		main_ethcore_icmp_rx_depacketizer_fsm_from_idle <= main_ethcore_icmp_rx_depacketizer_fsm_from_idle_liteethicmprx_next_value1;
	end
	clockdomainsrenamer_liteethicmprx_fsm_state <= clockdomainsrenamer_liteethicmprx_fsm_next_state;
	if (main_ethcore_icmp_echo_buffer_syncfifo_re) begin
		main_ethcore_icmp_echo_buffer_readable <= 1'd1;
	end else begin
		if (main_ethcore_icmp_echo_buffer_re) begin
			main_ethcore_icmp_echo_buffer_readable <= 1'd0;
		end
	end
	if (((main_ethcore_icmp_echo_buffer_syncfifo_we & main_ethcore_icmp_echo_buffer_syncfifo_writable) & (~main_ethcore_icmp_echo_buffer_replace))) begin
		main_ethcore_icmp_echo_buffer_produce <= (main_ethcore_icmp_echo_buffer_produce + 1'd1);
	end
	if (main_ethcore_icmp_echo_buffer_do_read) begin
		main_ethcore_icmp_echo_buffer_consume <= (main_ethcore_icmp_echo_buffer_consume + 1'd1);
	end
	if (((main_ethcore_icmp_echo_buffer_syncfifo_we & main_ethcore_icmp_echo_buffer_syncfifo_writable) & (~main_ethcore_icmp_echo_buffer_replace))) begin
		if ((~main_ethcore_icmp_echo_buffer_do_read)) begin
			main_ethcore_icmp_echo_buffer_level0 <= (main_ethcore_icmp_echo_buffer_level0 + 1'd1);
		end
	end else begin
		if (main_ethcore_icmp_echo_buffer_do_read) begin
			main_ethcore_icmp_echo_buffer_level0 <= (main_ethcore_icmp_echo_buffer_level0 - 1'd1);
		end
	end
	if (main_ethcore_tx_packetizer_sr_load) begin
		main_ethcore_tx_packetizer_sr <= main_ethcore_tx_packetizer_header;
	end
	if (main_ethcore_tx_packetizer_sr_shift) begin
		main_ethcore_tx_packetizer_sr <= main_ethcore_tx_packetizer_sr[63:8];
	end
	if (main_ethcore_tx_packetizer_source_ready) begin
		main_ethcore_tx_packetizer_sink_d_valid <= main_ethcore_tx_packetizer_sink_valid;
		main_ethcore_tx_packetizer_sink_d_ready <= main_ethcore_tx_packetizer_sink_ready;
		main_ethcore_tx_packetizer_sink_d_first <= main_ethcore_tx_packetizer_sink_first;
		main_ethcore_tx_packetizer_sink_d_last <= main_ethcore_tx_packetizer_sink_last;
		main_ethcore_tx_packetizer_sink_d_payload_data <= main_ethcore_tx_packetizer_sink_payload_data;
		main_ethcore_tx_packetizer_sink_d_payload_error <= main_ethcore_tx_packetizer_sink_payload_error;
		main_ethcore_tx_packetizer_sink_d_param_checksum <= main_ethcore_tx_packetizer_sink_param_checksum;
		main_ethcore_tx_packetizer_sink_d_param_dst_port <= main_ethcore_tx_packetizer_sink_param_dst_port;
		main_ethcore_tx_packetizer_sink_d_param_length <= main_ethcore_tx_packetizer_sink_param_length;
		main_ethcore_tx_packetizer_sink_d_param_src_port <= main_ethcore_tx_packetizer_sink_param_src_port;
	end
	clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_state <= clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_next_state;
	if (main_ethcore_tx_packetizer_count_liteethudptx_next_value_ce0) begin
		main_ethcore_tx_packetizer_count <= main_ethcore_tx_packetizer_count_liteethudptx_next_value0;
	end
	if (main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value_ce1) begin
		main_ethcore_tx_packetizer_fsm_from_idle <= main_ethcore_tx_packetizer_fsm_from_idle_liteethudptx_next_value1;
	end
	clockdomainsrenamer_liteethudp_liteethudptx_fsm_state <= clockdomainsrenamer_liteethudp_liteethudptx_fsm_next_state;
	main_ethcore_rx_valid <= (main_ethcore_rx_depacketizer_source_valid & (main_ethcore_rx_sink_sink_param_protocol == 5'd17));
	if (main_ethcore_rx_depacketizer_sr_shift) begin
		main_ethcore_rx_depacketizer_sr <= {main_ethcore_rx_depacketizer_sink_payload_data, main_ethcore_rx_depacketizer_sr[63:8]};
	end
	if (main_ethcore_rx_depacketizer_sr_shift_leftover) begin
		main_ethcore_rx_depacketizer_sr <= {main_ethcore_rx_depacketizer_sink_payload_data, main_ethcore_rx_depacketizer_sr[63:0]};
	end
	if ((main_ethcore_rx_depacketizer_sink_valid & main_ethcore_rx_depacketizer_sink_ready)) begin
		main_ethcore_rx_depacketizer_sink_d_valid <= main_ethcore_rx_depacketizer_sink_valid;
		main_ethcore_rx_depacketizer_sink_d_ready <= main_ethcore_rx_depacketizer_sink_ready;
		main_ethcore_rx_depacketizer_sink_d_first <= main_ethcore_rx_depacketizer_sink_first;
		main_ethcore_rx_depacketizer_sink_d_last <= main_ethcore_rx_depacketizer_sink_last;
		main_ethcore_rx_depacketizer_sink_d_payload_data <= main_ethcore_rx_depacketizer_sink_payload_data;
		main_ethcore_rx_depacketizer_sink_d_payload_error <= main_ethcore_rx_depacketizer_sink_payload_error;
		main_ethcore_rx_depacketizer_sink_d_param_length <= main_ethcore_rx_depacketizer_sink_param_length;
		main_ethcore_rx_depacketizer_sink_d_param_protocol <= main_ethcore_rx_depacketizer_sink_param_protocol;
		main_ethcore_rx_depacketizer_sink_d_param_ip_address <= main_ethcore_rx_depacketizer_sink_param_ip_address;
	end
	clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_state <= clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_next_state;
	if (main_ethcore_rx_depacketizer_count_liteethudprx_next_value_ce0) begin
		main_ethcore_rx_depacketizer_count <= main_ethcore_rx_depacketizer_count_liteethudprx_next_value0;
	end
	if (main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value_ce1) begin
		main_ethcore_rx_depacketizer_fsm_from_idle <= main_ethcore_rx_depacketizer_fsm_from_idle_liteethudprx_next_value1;
	end
	clockdomainsrenamer_liteethudp_liteethudprx_fsm_state <= clockdomainsrenamer_liteethudp_liteethudprx_fsm_next_state;
	main_etherbone_tx_cdc_graycounter1_q_binary <= main_etherbone_tx_cdc_graycounter1_q_next_binary;
	main_etherbone_tx_cdc_graycounter1_q <= main_etherbone_tx_cdc_graycounter1_q_next;
	if ((main_etherbone_tx_converter_converter_source_valid & main_etherbone_tx_converter_converter_source_ready)) begin
		if (main_etherbone_tx_converter_converter_last) begin
			main_etherbone_tx_converter_converter_mux <= 1'd0;
		end else begin
			main_etherbone_tx_converter_converter_mux <= (main_etherbone_tx_converter_converter_mux + 1'd1);
		end
	end
	main_etherbone_rx_converter_source_param_src_port <= main_etherbone_rx_converter_sink_param_src_port;
	main_etherbone_rx_converter_source_param_dst_port <= main_etherbone_rx_converter_sink_param_dst_port;
	main_etherbone_rx_converter_source_param_ip_address <= main_etherbone_rx_converter_sink_param_ip_address;
	main_etherbone_rx_converter_source_param_length <= main_etherbone_rx_converter_sink_param_length;
	if (main_etherbone_rx_converter_converter_source_ready) begin
		main_etherbone_rx_converter_converter_strobe_all <= 1'd0;
	end
	if (main_etherbone_rx_converter_converter_load_part) begin
		if (((main_etherbone_rx_converter_converter_demux == 2'd3) | main_etherbone_rx_converter_converter_sink_last)) begin
			main_etherbone_rx_converter_converter_demux <= 1'd0;
			main_etherbone_rx_converter_converter_strobe_all <= 1'd1;
		end else begin
			main_etherbone_rx_converter_converter_demux <= (main_etherbone_rx_converter_converter_demux + 1'd1);
		end
	end
	if ((main_etherbone_rx_converter_converter_source_valid & main_etherbone_rx_converter_converter_source_ready)) begin
		if ((main_etherbone_rx_converter_converter_sink_valid & main_etherbone_rx_converter_converter_sink_ready)) begin
			main_etherbone_rx_converter_converter_source_first <= main_etherbone_rx_converter_converter_sink_first;
			main_etherbone_rx_converter_converter_source_last <= main_etherbone_rx_converter_converter_sink_last;
		end else begin
			main_etherbone_rx_converter_converter_source_first <= 1'd0;
			main_etherbone_rx_converter_converter_source_last <= 1'd0;
		end
	end else begin
		if ((main_etherbone_rx_converter_converter_sink_valid & main_etherbone_rx_converter_converter_sink_ready)) begin
			main_etherbone_rx_converter_converter_source_first <= (main_etherbone_rx_converter_converter_sink_first | main_etherbone_rx_converter_converter_source_first);
			main_etherbone_rx_converter_converter_source_last <= (main_etherbone_rx_converter_converter_sink_last | main_etherbone_rx_converter_converter_source_last);
		end
	end
	if (main_etherbone_rx_converter_converter_load_part) begin
		case (main_etherbone_rx_converter_converter_demux)
			1'd0: begin
				main_etherbone_rx_converter_converter_source_payload_data[8:0] <= main_etherbone_rx_converter_converter_sink_payload_data;
			end
			1'd1: begin
				main_etherbone_rx_converter_converter_source_payload_data[17:9] <= main_etherbone_rx_converter_converter_sink_payload_data;
			end
			2'd2: begin
				main_etherbone_rx_converter_converter_source_payload_data[26:18] <= main_etherbone_rx_converter_converter_sink_payload_data;
			end
			2'd3: begin
				main_etherbone_rx_converter_converter_source_payload_data[35:27] <= main_etherbone_rx_converter_converter_sink_payload_data;
			end
		endcase
	end
	if (main_etherbone_rx_converter_converter_load_part) begin
		main_etherbone_rx_converter_converter_source_payload_valid_token_count <= (main_etherbone_rx_converter_converter_demux + 1'd1);
	end
	main_etherbone_rx_cdc_graycounter0_q_binary <= main_etherbone_rx_cdc_graycounter0_q_next_binary;
	main_etherbone_rx_cdc_graycounter0_q <= main_etherbone_rx_cdc_graycounter0_q_next;
	if (eth_tx_rst) begin
		main_ethcore_mac_preamble_errors_status <= 32'd0;
		main_ethcore_mac_crc_errors_status <= 32'd0;
		main_ethcore_mac_crc32_inserter_reg <= 32'd4294967295;
		main_ethcore_mac_crc32_inserter_cnt <= 2'd3;
		main_ethcore_mac_padding_inserter_counter <= 16'd0;
		main_ethcore_mac_tx_cdc_graycounter0_q <= 7'd0;
		main_ethcore_mac_tx_cdc_graycounter0_q_binary <= 7'd0;
		main_ethcore_mac_tx_cdc_graycounter1_q <= 7'd0;
		main_ethcore_mac_tx_cdc_graycounter1_q_binary <= 7'd0;
		main_ethcore_mac_rx_cdc_graycounter1_q <= 7'd0;
		main_ethcore_mac_rx_cdc_graycounter1_q_binary <= 7'd0;
		main_ethcore_mac_packetizer_count <= 4'd0;
		main_ethcore_mac_packetizer_sink_d_valid <= 1'd0;
		main_ethcore_mac_packetizer_sink_d_ready <= 1'd0;
		main_ethcore_mac_packetizer_fsm_from_idle <= 1'd0;
		main_ethcore_mac_depacketizer_count <= 4'd0;
		main_ethcore_mac_depacketizer_sink_d_valid <= 1'd0;
		main_ethcore_mac_depacketizer_sink_d_ready <= 1'd0;
		main_ethcore_mac_depacketizer_fsm_from_idle <= 1'd0;
		main_ethcore_arp_tx_packetizer_count <= 5'd0;
		main_ethcore_arp_tx_packetizer_sink_d_valid <= 1'd0;
		main_ethcore_arp_tx_packetizer_sink_d_ready <= 1'd0;
		main_ethcore_arp_tx_packetizer_fsm_from_idle <= 1'd0;
		main_ethcore_arp_rx_depacketizer_count <= 5'd0;
		main_ethcore_arp_rx_depacketizer_sink_d_valid <= 1'd0;
		main_ethcore_arp_rx_depacketizer_sink_d_ready <= 1'd0;
		main_ethcore_arp_rx_depacketizer_fsm_from_idle <= 1'd0;
		main_ethcore_arp_table_request_pending <= 1'd0;
		main_ethcore_arp_table_request_timer_count <= 23'd5000000;
		main_ethcore_arp_table_request_counter <= 3'd0;
		main_ethcore_arp_table_cached_valid <= 1'd0;
		main_ethcore_arp_table_cached_timer_count <= 29'd500000000;
		main_ethcore_ip_tx_liteethipv4checksum_counter <= 4'd0;
		main_ethcore_ip_tx_packetizer_count <= 5'd0;
		main_ethcore_ip_tx_packetizer_sink_d_valid <= 1'd0;
		main_ethcore_ip_tx_packetizer_sink_d_ready <= 1'd0;
		main_ethcore_ip_tx_packetizer_fsm_from_idle <= 1'd0;
		main_ethcore_ip_rx_depacketizer_count <= 5'd0;
		main_ethcore_ip_rx_depacketizer_sink_d_valid <= 1'd0;
		main_ethcore_ip_rx_depacketizer_sink_d_ready <= 1'd0;
		main_ethcore_ip_rx_depacketizer_fsm_from_idle <= 1'd0;
		main_ethcore_ip_rx_liteethipv4checksum_counter <= 4'd0;
		main_ethcore_icmp_tx_packetizer_count <= 3'd0;
		main_ethcore_icmp_tx_packetizer_sink_d_valid <= 1'd0;
		main_ethcore_icmp_tx_packetizer_sink_d_ready <= 1'd0;
		main_ethcore_icmp_tx_packetizer_fsm_from_idle <= 1'd0;
		main_ethcore_icmp_rx_depacketizer_count <= 3'd0;
		main_ethcore_icmp_rx_depacketizer_sink_d_valid <= 1'd0;
		main_ethcore_icmp_rx_depacketizer_sink_d_ready <= 1'd0;
		main_ethcore_icmp_rx_depacketizer_fsm_from_idle <= 1'd0;
		main_ethcore_icmp_echo_buffer_readable <= 1'd0;
		main_ethcore_icmp_echo_buffer_level0 <= 8'd0;
		main_ethcore_icmp_echo_buffer_produce <= 7'd0;
		main_ethcore_icmp_echo_buffer_consume <= 7'd0;
		main_ethcore_tx_packetizer_count <= 3'd0;
		main_ethcore_tx_packetizer_sink_d_valid <= 1'd0;
		main_ethcore_tx_packetizer_sink_d_ready <= 1'd0;
		main_ethcore_tx_packetizer_fsm_from_idle <= 1'd0;
		main_ethcore_rx_depacketizer_count <= 3'd0;
		main_ethcore_rx_depacketizer_sink_d_valid <= 1'd0;
		main_ethcore_rx_depacketizer_sink_d_ready <= 1'd0;
		main_ethcore_rx_depacketizer_fsm_from_idle <= 1'd0;
		main_etherbone_tx_cdc_graycounter1_q <= 3'd0;
		main_etherbone_tx_cdc_graycounter1_q_binary <= 3'd0;
		main_etherbone_tx_converter_converter_mux <= 2'd0;
		main_etherbone_rx_converter_converter_demux <= 2'd0;
		main_etherbone_rx_converter_converter_strobe_all <= 1'd0;
		main_etherbone_rx_cdc_graycounter0_q <= 3'd0;
		main_etherbone_rx_cdc_graycounter0_q_binary <= 3'd0;
		clockdomainsrenamer_liteethmac_liteethmacgap_state <= 1'd0;
		clockdomainsrenamer_liteethmac_liteethmacpreambleinserter_state <= 2'd0;
		clockdomainsrenamer_liteethmac_liteethmaccrc32inserter_state <= 2'd0;
		clockdomainsrenamer_liteethmac_liteethmacpaddinginserter_state <= 1'd0;
		clockdomainsrenamer_liteethmac_grant <= 1'd0;
		clockdomainsrenamer_liteethmac_status0_first <= 1'd1;
		clockdomainsrenamer_liteethmac_status0_ongoing1 <= 1'd0;
		clockdomainsrenamer_liteethmac_status1_first <= 1'd1;
		clockdomainsrenamer_liteethmac_status1_ongoing1 <= 1'd0;
		clockdomainsrenamer_liteethmac_first <= 1'd1;
		clockdomainsrenamer_liteethmac_ongoing1 <= 1'd0;
		clockdomainsrenamer_liteethmac_sel_ongoing <= 2'd0;
		clockdomainsrenamer_liteethmac_liteethmacpacketizer_state <= 2'd0;
		clockdomainsrenamer_liteethmac_liteethmacdepacketizer_state <= 2'd0;
		clockdomainsrenamer_liteetharptx_liteetharppacketizer_state <= 2'd0;
		clockdomainsrenamer_liteetharptx_fsm_state <= 1'd0;
		clockdomainsrenamer_liteetharprx_liteetharpdepacketizer_state <= 2'd0;
		clockdomainsrenamer_liteetharprx_fsm_state <= 2'd0;
		clockdomainsrenamer_state <= 3'd0;
		clockdomainsrenamer_liteethip_liteethiptx_liteethipv4packetizer_state <= 2'd0;
		clockdomainsrenamer_liteethip_liteethiptx_fsm_state <= 3'd0;
		clockdomainsrenamer_liteethip_liteethiprx_liteethipv4depacketizer_state <= 2'd0;
		clockdomainsrenamer_liteethip_liteethiprx_fsm_state <= 2'd0;
		clockdomainsrenamer_liteethip_grant <= 1'd0;
		clockdomainsrenamer_liteethip_status0_first <= 1'd1;
		clockdomainsrenamer_liteethip_status0_ongoing1 <= 1'd0;
		clockdomainsrenamer_liteethip_status1_first <= 1'd1;
		clockdomainsrenamer_liteethip_status1_ongoing1 <= 1'd0;
		clockdomainsrenamer_liteethip_first <= 1'd1;
		clockdomainsrenamer_liteethip_ongoing1 <= 1'd0;
		clockdomainsrenamer_liteethip_sel_ongoing <= 2'd0;
		clockdomainsrenamer_liteethicmptx_liteethicmppacketizer_state <= 2'd0;
		clockdomainsrenamer_liteethicmptx_fsm_state <= 1'd0;
		clockdomainsrenamer_liteethicmprx_liteethicmpdepacketizer_state <= 2'd0;
		clockdomainsrenamer_liteethicmprx_fsm_state <= 2'd0;
		clockdomainsrenamer_liteethudp_liteethudptx_liteethudppacketizer_state <= 2'd0;
		clockdomainsrenamer_liteethudp_liteethudptx_fsm_state <= 1'd0;
		clockdomainsrenamer_liteethudp_liteethudprx_liteethudpdepacketizer_state <= 2'd0;
		clockdomainsrenamer_liteethudp_liteethudprx_fsm_state <= 2'd0;
	end
	multiregimpl1_regs0 <= main_ethcore_mac_ps_preamble_error_toggle_i;
	multiregimpl1_regs1 <= multiregimpl1_regs0;
	multiregimpl2_regs0 <= main_ethcore_mac_ps_crc_error_toggle_i;
	multiregimpl2_regs1 <= multiregimpl2_regs0;
	multiregimpl3_regs0 <= main_ethcore_mac_tx_cdc_graycounter0_q;
	multiregimpl3_regs1 <= multiregimpl3_regs0;
	multiregimpl4_regs0 <= main_ethcore_mac_tx_cdc_graycounter1_q;
	multiregimpl4_regs1 <= multiregimpl4_regs0;
	multiregimpl5_regs0 <= main_ethcore_mac_rx_cdc_graycounter0_q;
	multiregimpl5_regs1 <= multiregimpl5_regs0;
	multiregimpl7_regs0 <= main_etherbone_tx_cdc_graycounter0_q;
	multiregimpl7_regs1 <= multiregimpl7_regs0;
	multiregimpl10_regs0 <= main_etherbone_rx_cdc_graycounter1_q;
	multiregimpl10_regs1 <= multiregimpl10_regs0;
end

always @(posedge etherbone_clk) begin
	main_etherbone_tx_cdc_graycounter0_q_binary <= main_etherbone_tx_cdc_graycounter0_q_next_binary;
	main_etherbone_tx_cdc_graycounter0_q <= main_etherbone_tx_cdc_graycounter0_q_next;
	main_etherbone_rx_cdc_graycounter1_q_binary <= main_etherbone_rx_cdc_graycounter1_q_next_binary;
	main_etherbone_rx_cdc_graycounter1_q <= main_etherbone_rx_cdc_graycounter1_q_next;
	if (etherbone_rst) begin
		main_etherbone_tx_cdc_graycounter0_q <= 3'd0;
		main_etherbone_tx_cdc_graycounter0_q_binary <= 3'd0;
		main_etherbone_rx_cdc_graycounter1_q <= 3'd0;
		main_etherbone_rx_cdc_graycounter1_q_binary <= 3'd0;
	end
	multiregimpl8_regs0 <= main_etherbone_tx_cdc_graycounter1_q;
	multiregimpl8_regs1 <= multiregimpl8_regs0;
	multiregimpl9_regs0 <= main_etherbone_rx_cdc_graycounter0_q;
	multiregimpl9_regs1 <= multiregimpl9_regs0;
end

always @(posedge sys_clk) begin
	wb_ack <= wb_stb;
	if (wb_stb) begin
		t <= wb_adr;
	end
	if ((main_bus_errors != 32'd4294967295)) begin
		if (main_bus_error) begin
			main_bus_errors <= (main_bus_errors + 1'd1);
		end
	end
	if (ethphy_counter_ce) begin
		ethphy_counter <= (ethphy_counter + 1'd1);
	end
	if (main_etherbone_tx_packetizer_sr_load) begin
		main_etherbone_tx_packetizer_sr <= main_etherbone_tx_packetizer_header;
	end
	if (main_etherbone_tx_packetizer_sr_shift) begin
		main_etherbone_tx_packetizer_sr <= main_etherbone_tx_packetizer_sr[63:32];
	end
	if (main_etherbone_tx_packetizer_source_ready) begin
		main_etherbone_tx_packetizer_sink_d_valid <= main_etherbone_tx_packetizer_sink_valid;
		main_etherbone_tx_packetizer_sink_d_ready <= main_etherbone_tx_packetizer_sink_ready;
		main_etherbone_tx_packetizer_sink_d_first <= main_etherbone_tx_packetizer_sink_first;
		main_etherbone_tx_packetizer_sink_d_last <= main_etherbone_tx_packetizer_sink_last;
		main_etherbone_tx_packetizer_sink_d_payload_data <= main_etherbone_tx_packetizer_sink_payload_data;
		main_etherbone_tx_packetizer_sink_d_payload_error <= main_etherbone_tx_packetizer_sink_payload_error;
		main_etherbone_tx_packetizer_sink_d_param_addr_size <= main_etherbone_tx_packetizer_sink_param_addr_size;
		main_etherbone_tx_packetizer_sink_d_param_magic <= main_etherbone_tx_packetizer_sink_param_magic;
		main_etherbone_tx_packetizer_sink_d_param_nr <= main_etherbone_tx_packetizer_sink_param_nr;
		main_etherbone_tx_packetizer_sink_d_param_pf <= main_etherbone_tx_packetizer_sink_param_pf;
		main_etherbone_tx_packetizer_sink_d_param_port_size <= main_etherbone_tx_packetizer_sink_param_port_size;
		main_etherbone_tx_packetizer_sink_d_param_pr <= main_etherbone_tx_packetizer_sink_param_pr;
		main_etherbone_tx_packetizer_sink_d_param_version <= main_etherbone_tx_packetizer_sink_param_version;
	end
	liteethetherbonepackettx_liteethetherbonepacketpacketizer_state <= liteethetherbonepackettx_liteethetherbonepacketpacketizer_next_state;
	if (main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value_ce0) begin
		main_etherbone_tx_packetizer_count <= main_etherbone_tx_packetizer_count_liteethetherbonepackettx_next_value0;
	end
	if (main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value_ce1) begin
		main_etherbone_tx_packetizer_fsm_from_idle <= main_etherbone_tx_packetizer_fsm_from_idle_liteethetherbonepackettx_next_value1;
	end
	liteethetherbonepackettx_fsm_state <= liteethetherbonepackettx_fsm_next_state;
	main_etherbone_rx_valid <= (main_etherbone_rx_depacketizer_source_valid & (main_etherbone_rx_depacketizer_source_param_magic == 15'd20079));
	if (main_etherbone_rx_depacketizer_sr_shift) begin
		main_etherbone_rx_depacketizer_sr <= {main_etherbone_rx_depacketizer_sink_payload_data, main_etherbone_rx_depacketizer_sr[63:32]};
	end
	if (main_etherbone_rx_depacketizer_sr_shift_leftover) begin
		main_etherbone_rx_depacketizer_sr <= {main_etherbone_rx_depacketizer_sink_payload_data, main_etherbone_rx_depacketizer_sr[63:0]};
	end
	if ((main_etherbone_rx_depacketizer_sink_valid & main_etherbone_rx_depacketizer_sink_ready)) begin
		main_etherbone_rx_depacketizer_sink_d_valid <= main_etherbone_rx_depacketizer_sink_valid;
		main_etherbone_rx_depacketizer_sink_d_ready <= main_etherbone_rx_depacketizer_sink_ready;
		main_etherbone_rx_depacketizer_sink_d_first <= main_etherbone_rx_depacketizer_sink_first;
		main_etherbone_rx_depacketizer_sink_d_last <= main_etherbone_rx_depacketizer_sink_last;
		main_etherbone_rx_depacketizer_sink_d_payload_data <= main_etherbone_rx_depacketizer_sink_payload_data;
		main_etherbone_rx_depacketizer_sink_d_payload_error <= main_etherbone_rx_depacketizer_sink_payload_error;
		main_etherbone_rx_depacketizer_sink_d_param_src_port <= main_etherbone_rx_depacketizer_sink_param_src_port;
		main_etherbone_rx_depacketizer_sink_d_param_dst_port <= main_etherbone_rx_depacketizer_sink_param_dst_port;
		main_etherbone_rx_depacketizer_sink_d_param_ip_address <= main_etherbone_rx_depacketizer_sink_param_ip_address;
		main_etherbone_rx_depacketizer_sink_d_param_length <= main_etherbone_rx_depacketizer_sink_param_length;
	end
	liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_state <= liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_next_state;
	if (main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value_ce0) begin
		main_etherbone_rx_depacketizer_count <= main_etherbone_rx_depacketizer_count_liteethetherbonepacketrx_next_value0;
	end
	if (main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value_ce1) begin
		main_etherbone_rx_depacketizer_fsm_from_idle <= main_etherbone_rx_depacketizer_fsm_from_idle_liteethetherbonepacketrx_next_value1;
	end
	liteethetherbonepacketrx_fsm_state <= liteethetherbonepacketrx_fsm_next_state;
	liteethetherboneprobe_state <= liteethetherboneprobe_next_state;
	if ((main_etherbone_record_sink_sink_valid & main_etherbone_record_sink_sink_ready)) begin
		if (main_etherbone_record_first) begin
			main_etherbone_record_last_ip_address <= main_etherbone_record_sink_sink_param_ip_address;
		end
		main_etherbone_record_first <= main_etherbone_record_sink_sink_last;
	end
	if (main_etherbone_record_depacketizer_sr_shift) begin
		main_etherbone_record_depacketizer_sr <= main_etherbone_record_depacketizer_sink_payload_data;
	end
	if ((main_etherbone_record_depacketizer_sink_valid & main_etherbone_record_depacketizer_sink_ready)) begin
		main_etherbone_record_depacketizer_sink_d_valid <= main_etherbone_record_depacketizer_sink_valid;
		main_etherbone_record_depacketizer_sink_d_ready <= main_etherbone_record_depacketizer_sink_ready;
		main_etherbone_record_depacketizer_sink_d_first <= main_etherbone_record_depacketizer_sink_first;
		main_etherbone_record_depacketizer_sink_d_last <= main_etherbone_record_depacketizer_sink_last;
		main_etherbone_record_depacketizer_sink_d_payload_data <= main_etherbone_record_depacketizer_sink_payload_data;
		main_etherbone_record_depacketizer_sink_d_payload_error <= main_etherbone_record_depacketizer_sink_payload_error;
		main_etherbone_record_depacketizer_sink_d_param_addr_size <= main_etherbone_record_depacketizer_sink_param_addr_size;
		main_etherbone_record_depacketizer_sink_d_param_nr <= main_etherbone_record_depacketizer_sink_param_nr;
		main_etherbone_record_depacketizer_sink_d_param_pf <= main_etherbone_record_depacketizer_sink_param_pf;
		main_etherbone_record_depacketizer_sink_d_param_port_size <= main_etherbone_record_depacketizer_sink_param_port_size;
		main_etherbone_record_depacketizer_sink_d_param_pr <= main_etherbone_record_depacketizer_sink_param_pr;
		main_etherbone_record_depacketizer_sink_d_param_src_port <= main_etherbone_record_depacketizer_sink_param_src_port;
		main_etherbone_record_depacketizer_sink_d_param_dst_port <= main_etherbone_record_depacketizer_sink_param_dst_port;
		main_etherbone_record_depacketizer_sink_d_param_ip_address <= main_etherbone_record_depacketizer_sink_param_ip_address;
		main_etherbone_record_depacketizer_sink_d_param_length <= main_etherbone_record_depacketizer_sink_param_length;
	end
	liteethetherbonerecorddepacketizer_state <= liteethetherbonerecorddepacketizer_next_state;
	if (main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value_ce0) begin
		main_etherbone_record_depacketizer_count <= main_etherbone_record_depacketizer_count_liteethetherbonerecorddepacketizer_next_value0;
	end
	if (main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value_ce1) begin
		main_etherbone_record_depacketizer_fsm_from_idle <= main_etherbone_record_depacketizer_fsm_from_idle_liteethetherbonerecorddepacketizer_next_value1;
	end
	if (main_etherbone_record_receiver_base_addr_update) begin
		main_etherbone_record_receiver_base_addr <= main_etherbone_record_receiver_fifo_source_payload_data;
	end
	if (main_etherbone_record_receiver_counter_reset) begin
		main_etherbone_record_receiver_counter <= 1'd0;
	end else begin
		if (main_etherbone_record_receiver_counter_ce) begin
			main_etherbone_record_receiver_counter <= (main_etherbone_record_receiver_counter + 1'd1);
		end
	end
	if (main_etherbone_record_receiver_fifo_syncfifo_re) begin
		main_etherbone_record_receiver_fifo_readable <= 1'd1;
	end else begin
		if (main_etherbone_record_receiver_fifo_re) begin
			main_etherbone_record_receiver_fifo_readable <= 1'd0;
		end
	end
	if (((main_etherbone_record_receiver_fifo_syncfifo_we & main_etherbone_record_receiver_fifo_syncfifo_writable) & (~main_etherbone_record_receiver_fifo_replace))) begin
		main_etherbone_record_receiver_fifo_produce <= (main_etherbone_record_receiver_fifo_produce + 1'd1);
	end
	if (main_etherbone_record_receiver_fifo_do_read) begin
		main_etherbone_record_receiver_fifo_consume <= (main_etherbone_record_receiver_fifo_consume + 1'd1);
	end
	if (((main_etherbone_record_receiver_fifo_syncfifo_we & main_etherbone_record_receiver_fifo_syncfifo_writable) & (~main_etherbone_record_receiver_fifo_replace))) begin
		if ((~main_etherbone_record_receiver_fifo_do_read)) begin
			main_etherbone_record_receiver_fifo_level0 <= (main_etherbone_record_receiver_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_etherbone_record_receiver_fifo_do_read) begin
			main_etherbone_record_receiver_fifo_level0 <= (main_etherbone_record_receiver_fifo_level0 - 1'd1);
		end
	end
	liteethetherbonerecordreceiver_state <= liteethetherbonerecordreceiver_next_state;
	main_etherbone_record_sender_source_source_param_byte_enable <= main_etherbone_record_sender_fifo_source_param_be;
	if (main_etherbone_record_sender_fifo_source_param_we) begin
		main_etherbone_record_sender_source_source_param_wcount <= main_etherbone_record_sender_fifo_source_param_count;
	end else begin
		main_etherbone_record_sender_source_source_param_rcount <= main_etherbone_record_sender_fifo_source_param_count;
	end
	if (main_etherbone_record_sender_data_sel) begin
		main_etherbone_record_sender_source_source_payload_data <= main_etherbone_record_sender_fifo_source_payload_data;
	end else begin
		main_etherbone_record_sender_source_source_payload_data <= main_etherbone_record_sender_fifo_source_param_base_addr;
	end
	if (main_etherbone_record_sender_fifo_syncfifo_re) begin
		main_etherbone_record_sender_fifo_readable <= 1'd1;
	end else begin
		if (main_etherbone_record_sender_fifo_re) begin
			main_etherbone_record_sender_fifo_readable <= 1'd0;
		end
	end
	if (((main_etherbone_record_sender_fifo_syncfifo_we & main_etherbone_record_sender_fifo_syncfifo_writable) & (~main_etherbone_record_sender_fifo_replace))) begin
		main_etherbone_record_sender_fifo_produce <= (main_etherbone_record_sender_fifo_produce + 1'd1);
	end
	if (main_etherbone_record_sender_fifo_do_read) begin
		main_etherbone_record_sender_fifo_consume <= (main_etherbone_record_sender_fifo_consume + 1'd1);
	end
	if (((main_etherbone_record_sender_fifo_syncfifo_we & main_etherbone_record_sender_fifo_syncfifo_writable) & (~main_etherbone_record_sender_fifo_replace))) begin
		if ((~main_etherbone_record_sender_fifo_do_read)) begin
			main_etherbone_record_sender_fifo_level0 <= (main_etherbone_record_sender_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_etherbone_record_sender_fifo_do_read) begin
			main_etherbone_record_sender_fifo_level0 <= (main_etherbone_record_sender_fifo_level0 - 1'd1);
		end
	end
	liteethetherbonerecordsender_state <= liteethetherbonerecordsender_next_state;
	if (main_etherbone_record_packetizer_sr_load) begin
		main_etherbone_record_packetizer_sr <= main_etherbone_record_packetizer_header;
	end
	if (main_etherbone_record_packetizer_source_ready) begin
		main_etherbone_record_packetizer_sink_d_valid <= main_etherbone_record_packetizer_sink_valid;
		main_etherbone_record_packetizer_sink_d_ready <= main_etherbone_record_packetizer_sink_ready;
		main_etherbone_record_packetizer_sink_d_first <= main_etherbone_record_packetizer_sink_first;
		main_etherbone_record_packetizer_sink_d_last <= main_etherbone_record_packetizer_sink_last;
		main_etherbone_record_packetizer_sink_d_payload_data <= main_etherbone_record_packetizer_sink_payload_data;
		main_etherbone_record_packetizer_sink_d_payload_error <= main_etherbone_record_packetizer_sink_payload_error;
		main_etherbone_record_packetizer_sink_d_param_bca <= main_etherbone_record_packetizer_sink_param_bca;
		main_etherbone_record_packetizer_sink_d_param_byte_enable <= main_etherbone_record_packetizer_sink_param_byte_enable;
		main_etherbone_record_packetizer_sink_d_param_cyc <= main_etherbone_record_packetizer_sink_param_cyc;
		main_etherbone_record_packetizer_sink_d_param_rca <= main_etherbone_record_packetizer_sink_param_rca;
		main_etherbone_record_packetizer_sink_d_param_rcount <= main_etherbone_record_packetizer_sink_param_rcount;
		main_etherbone_record_packetizer_sink_d_param_rff <= main_etherbone_record_packetizer_sink_param_rff;
		main_etherbone_record_packetizer_sink_d_param_wca <= main_etherbone_record_packetizer_sink_param_wca;
		main_etherbone_record_packetizer_sink_d_param_wcount <= main_etherbone_record_packetizer_sink_param_wcount;
		main_etherbone_record_packetizer_sink_d_param_wff <= main_etherbone_record_packetizer_sink_param_wff;
	end
	liteethetherbonerecordpacketizer_state <= liteethetherbonerecordpacketizer_next_state;
	if (main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value_ce0) begin
		main_etherbone_record_packetizer_count <= main_etherbone_record_packetizer_count_liteethetherbonerecordpacketizer_next_value0;
	end
	if (main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value_ce1) begin
		main_etherbone_record_packetizer_fsm_from_idle <= main_etherbone_record_packetizer_fsm_from_idle_liteethetherbonerecordpacketizer_next_value1;
	end
	if (main_etherbone_dispatcher_first) begin
		main_etherbone_dispatcher_sel_ongoing <= main_etherbone_dispatcher_sel0;
	end
	main_etherbone_dispatcher_ongoing1 <= ((main_etherbone_rx_source_source_valid | main_etherbone_dispatcher_ongoing1) & (~main_etherbone_dispatcher_last));
	if (main_etherbone_dispatcher_last) begin
		main_etherbone_dispatcher_first <= 1'd1;
	end else begin
		if ((main_etherbone_rx_source_source_valid & main_etherbone_rx_source_source_ready)) begin
			main_etherbone_dispatcher_first <= 1'd0;
		end
	end
	case (main_etherbone_grant)
		1'd0: begin
			if ((~main_etherbone_request[0])) begin
				if (main_etherbone_request[1]) begin
					main_etherbone_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~main_etherbone_request[1])) begin
				if (main_etherbone_request[0]) begin
					main_etherbone_grant <= 1'd0;
				end
			end
		end
	endcase
	main_etherbone_status0_ongoing1 <= ((main_etherbone_probe_source_valid | main_etherbone_status0_ongoing1) & (~main_etherbone_status0_last));
	if (main_etherbone_status0_last) begin
		main_etherbone_status0_first <= 1'd1;
	end else begin
		if ((main_etherbone_probe_source_valid & main_etherbone_probe_source_ready)) begin
			main_etherbone_status0_first <= 1'd0;
		end
	end
	main_etherbone_status1_ongoing1 <= ((main_etherbone_record_source_source_valid | main_etherbone_status1_ongoing1) & (~main_etherbone_status1_last));
	if (main_etherbone_status1_last) begin
		main_etherbone_status1_first <= 1'd1;
	end else begin
		if ((main_etherbone_record_source_source_valid & main_etherbone_record_source_source_ready)) begin
			main_etherbone_status1_first <= 1'd0;
		end
	end
	main_etherbone_liteethetherbonewishbonemaster_source_param_base_addr <= main_etherbone_liteethetherbonewishbonemaster_sink_param_base_addr;
	main_etherbone_liteethetherbonewishbonemaster_source_payload_addr <= main_etherbone_liteethetherbonewishbonemaster_sink_payload_addr;
	main_etherbone_liteethetherbonewishbonemaster_source_param_count <= main_etherbone_liteethetherbonewishbonemaster_sink_param_count;
	main_etherbone_liteethetherbonewishbonemaster_source_param_be <= main_etherbone_liteethetherbonewishbonemaster_sink_param_be;
	main_etherbone_liteethetherbonewishbonemaster_source_param_we <= 1'd1;
	if (main_etherbone_liteethetherbonewishbonemaster_data_update) begin
		main_etherbone_liteethetherbonewishbonemaster_source_payload_data <= main_etherbone_liteethetherbonewishbonemaster_bus_dat_r;
	end
	liteethetherbonewishbonemaster_state <= liteethetherbonewishbonemaster_next_state;
	spiflash_clk_divider1 <= (spiflash_clk_divider1 + 1'd1);
	if (spiflash_clk_rise) begin
		spiflash_pads_clk <= spiflash_clk_enable;
	end else begin
		if (spiflash_clk_fall) begin
			spiflash_clk_divider1 <= 1'd0;
			spiflash_pads_clk <= 1'd0;
		end
	end
	spiflash_pads_cs_n <= ((~spiflash_cs) | (~spiflash_cs_enable));
	if (spiflash_mosi_latch) begin
		spiflash_mosi_data <= spiflash_mosi1;
		spiflash_mosi_sel <= 6'd39;
	end else begin
		if (spiflash_clk_fall) begin
			if (spiflash_cs_enable) begin
				spiflash_pads_mosi <= sync_array_muxed;
			end
			spiflash_mosi_sel <= (spiflash_mosi_sel - 1'd1);
		end
	end
	if (spiflash_clk_rise) begin
		if (spiflash_loopback) begin
			spiflash_miso_data <= {spiflash_miso_data, spiflash_pads_mosi};
		end else begin
			spiflash_miso_data <= {spiflash_miso_data, spiflash_pads_miso};
		end
	end
	if (spiflash_miso_latch) begin
		spiflash_miso1 <= spiflash_miso_data;
	end
	ecp5spiflash_state <= ecp5spiflash_next_state;
	if (spiflash_count_next_value_ce) begin
		spiflash_count <= spiflash_count_next_value;
	end
	pulsegen_slow <= (pulsegen_slow + 1'd1);
	if ((pulsegen_superinterpolator_input_input_ack & pulsegen_done)) begin
		pulsegen_pos <= (pulsegen_pos + 1'd1);
	end
	if (pulsegen_en) begin
		pulsegen_fft_w_idx <= (pulsegen_fft_w_idx + pulsegen_fft_step);
	end
	pulsegen_fft_w_idx_l <= pulsegen_fft_w_idx[5];
	{pulsegen_fft_ar_reg_fft5, pulsegen_fft_ar_reg_fft4, pulsegen_fft_ar_reg_fft3, pulsegen_fft_ar_reg_fft2, pulsegen_fft_ar_reg_fft1, pulsegen_fft_ar_reg_fft0} <= {pulsegen_fft_ar_reg_fft5, pulsegen_fft_ar_reg_fft4, pulsegen_fft_ar_reg_fft3, pulsegen_fft_ar_reg_fft2, pulsegen_fft_ar_reg_fft1, pulsegen_fft_ar_reg_fft0, pulsegen_ar};
	{pulsegen_fft_ai_reg_fft5, pulsegen_fft_ai_reg_fft4, pulsegen_fft_ai_reg_fft3, pulsegen_fft_ai_reg_fft2, pulsegen_fft_ai_reg_fft1, pulsegen_fft_ai_reg_fft0} <= {pulsegen_fft_ai_reg_fft5, pulsegen_fft_ai_reg_fft4, pulsegen_fft_ai_reg_fft3, pulsegen_fft_ai_reg_fft2, pulsegen_fft_ai_reg_fft1, pulsegen_fft_ai_reg_fft0, pulsegen_ai};
	{pulsegen_fft_br_reg_fft3, pulsegen_fft_br_reg_fft2, pulsegen_fft_br_reg_fft1, pulsegen_fft_br_reg_fft0} <= {pulsegen_fft_br_reg_fft3, pulsegen_fft_br_reg_fft2, pulsegen_fft_br_reg_fft1, pulsegen_fft_br_reg_fft0, pulsegen_br};
	{pulsegen_fft_bi_reg_fft3, pulsegen_fft_bi_reg_fft2, pulsegen_fft_bi_reg_fft1, pulsegen_fft_bi_reg_fft0} <= {pulsegen_fft_bi_reg_fft3, pulsegen_fft_bi_reg_fft2, pulsegen_fft_bi_reg_fft1, pulsegen_fft_bi_reg_fft0, pulsegen_bi};
	{pulsegen_fft_wr_reg_fft2, pulsegen_fft_wr_reg_fft1, pulsegen_fft_wr_reg_fft0} <= {pulsegen_fft_wr_reg_fft2, pulsegen_fft_wr_reg_fft1, pulsegen_fft_wr_reg_fft0, pulsegen_fft_wr};
	{pulsegen_fft_wi_reg_fft2, pulsegen_fft_wi_reg_fft1, pulsegen_fft_wi_reg_fft0} <= {pulsegen_fft_wi_reg_fft2, pulsegen_fft_wi_reg_fft1, pulsegen_fft_wi_reg_fft0, pulsegen_fft_wi};
	pulsegen_fft_bd <= (pulsegen_fft_br_reg_fft0 + pulsegen_fft_bi_reg_fft0);
	pulsegen_fft_m_fft0 <= (pulsegen_fft_bd * pulsegen_fft_wr_reg_fft1);
	pulsegen_fft_m_fft1 <= (pulsegen_fft_m_fft0 + $signed({1'd0, 15'd32767}));
	pulsegen_fft_ws <= (pulsegen_fft_wr_reg_fft2 + pulsegen_fft_wi_reg_fft2);
	pulsegen_fft_wd <= (pulsegen_fft_wr_reg_fft2 - pulsegen_fft_wi_reg_fft2);
	pulsegen_fft_m_fft2 <= (pulsegen_fft_ws * pulsegen_fft_bi_reg_fft3);
	pulsegen_fft_m_fft3 <= (pulsegen_fft_wd * pulsegen_fft_br_reg_fft3);
	pulsegen_fft_m_fft4 <= pulsegen_fft_m_fft1;
	pulsegen_fft_m_fft5 <= pulsegen_fft_m_fft1;
	pulsegen_fft_m_fft6 <= (pulsegen_fft_m_fft4 - pulsegen_fft_m_fft2);
	pulsegen_fft_m_fft7 <= (pulsegen_fft_m_fft5 - pulsegen_fft_m_fft3);
	pulsegen_fft_cr <= ((pulsegen_fft_ar_reg_fft5 + pulsegen_fft_m_fft6[36:16]) >>> pulsegen_s);
	pulsegen_fft_ci <= ((pulsegen_fft_ai_reg_fft5 + pulsegen_fft_m_fft7[36:16]) >>> pulsegen_s);
	pulsegen_fft_dr <= ((pulsegen_fft_ar_reg_fft5 - pulsegen_fft_m_fft6[36:16]) >>> pulsegen_s);
	pulsegen_fft_di <= ((pulsegen_fft_ai_reg_fft5 - pulsegen_fft_m_fft7[36:16]) >>> pulsegen_s);
	pulsegen_fft_laststart <= pulsegen_start;
	if (((pulsegen_start & (~pulsegen_fft_laststart)) & (~pulsegen_busy))) begin
		pulsegen_busy <= 1'd1;
		pulsegen_done <= 1'd0;
		pulsegen_stage <= 1'd0;
		pulsegen_fft_stage_w <= -1'd1;
		pulsegen_fft_stage_w_n <= -1'd1;
		pulsegen_fft_pos_r <= 1'd0;
		pulsegen_scaling_reg <= pulsegen_scaling;
	end
	if (((((((pulsegen_fft_pos_w[0] & pulsegen_fft_pos_w[1]) & pulsegen_fft_pos_w[2]) & pulsegen_fft_pos_w[3]) & pulsegen_fft_pos_w[4]) & pulsegen_fft_pos_w[5]) & (pulsegen_fft_stage_w == 3'd6))) begin
		pulsegen_fft_bfl_we <= 1'd0;
		pulsegen_busy <= 1'd0;
		pulsegen_done <= 1'd1;
	end
	if ((pulsegen_en & pulsegen_busy)) begin
		pulsegen_fft_pos_r <= (pulsegen_fft_pos_r + 1'd1);
	end
	if ((((((pulsegen_fft_pos_r[0] & pulsegen_fft_pos_r[1]) & pulsegen_fft_pos_r[2]) & pulsegen_fft_pos_r[3]) & pulsegen_fft_pos_r[4]) & pulsegen_fft_pos_r[5])) begin
		pulsegen_stage <= (pulsegen_stage + 1'd1);
	end
	if (((((((pulsegen_fft_pos_w[0] & pulsegen_fft_pos_w[1]) & pulsegen_fft_pos_w[2]) & pulsegen_fft_pos_w[3]) & pulsegen_fft_pos_w[4]) & pulsegen_fft_pos_w[5]) & (~(pulsegen_fft_stage_w == 3'd6)))) begin
		pulsegen_fft_stage_w <= (pulsegen_fft_stage_w + 1'd1);
	end
	if ((pulsegen_fft_pos_w == 6'd62)) begin
		pulsegen_fft_stage_w_n <= (pulsegen_fft_stage_w_n + 1'd1);
	end
	if ((((((((pulsegen_fft_pos_w[0] & pulsegen_fft_pos_w[1]) & pulsegen_fft_pos_w[2]) & pulsegen_fft_pos_w[3]) & pulsegen_fft_pos_w[4]) & pulsegen_fft_pos_w[5]) & (((pulsegen_fft_stage_w[0] & pulsegen_fft_stage_w[1]) & pulsegen_fft_stage_w[2]) & pulsegen_fft_stage_w[3])) & (pulsegen_busy == 1'd1))) begin
		pulsegen_fft_bfl_we <= 1'd1;
	end
	pulsegen_fft_a_mux_l <= pulsegen_fft_a_mux;
	pulsegen_fft_a_x2_mux_l <= pulsegen_fft_a_x2_mux;
	pulsegen_last_bit_xout_adr_l <= pulsegen_x_out_adr[6];
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		if (((~pulsegen_superinterpolator_mode2) | (pulsegen_superinterpolator_mode2 & pulsegen_superinterpolator_hbf0_step1))) begin
			{pulsegen_superinterpolator_x31, pulsegen_superinterpolator_x30, pulsegen_superinterpolator_x29, pulsegen_superinterpolator_x28, pulsegen_superinterpolator_x27, pulsegen_superinterpolator_x26, pulsegen_superinterpolator_x25, pulsegen_superinterpolator_x24, pulsegen_superinterpolator_x23, pulsegen_superinterpolator_x22, pulsegen_superinterpolator_x21, pulsegen_superinterpolator_x20, pulsegen_superinterpolator_x19, pulsegen_superinterpolator_x18, pulsegen_superinterpolator_x17, pulsegen_superinterpolator_x16, pulsegen_superinterpolator_x15, pulsegen_superinterpolator_x14, pulsegen_superinterpolator_x13, pulsegen_superinterpolator_x12, pulsegen_superinterpolator_x11, pulsegen_superinterpolator_x10, pulsegen_superinterpolator_x9, pulsegen_superinterpolator_x8, pulsegen_superinterpolator_x7, pulsegen_superinterpolator_x6, pulsegen_superinterpolator_x5, pulsegen_superinterpolator_x4, pulsegen_superinterpolator_x3, pulsegen_superinterpolator_x2, pulsegen_superinterpolator_x1, pulsegen_superinterpolator_x0} <= {pulsegen_superinterpolator_x31, pulsegen_superinterpolator_x30, pulsegen_superinterpolator_x29, pulsegen_superinterpolator_x28, pulsegen_superinterpolator_x27, pulsegen_superinterpolator_x26, pulsegen_superinterpolator_x25, pulsegen_superinterpolator_x24, pulsegen_superinterpolator_x23, pulsegen_superinterpolator_x22, pulsegen_superinterpolator_x21, pulsegen_superinterpolator_x20, pulsegen_superinterpolator_x19, pulsegen_superinterpolator_x18, pulsegen_superinterpolator_x17, pulsegen_superinterpolator_x16, pulsegen_superinterpolator_x15, pulsegen_superinterpolator_x14, pulsegen_superinterpolator_x13, pulsegen_superinterpolator_x12, pulsegen_superinterpolator_x11, pulsegen_superinterpolator_x10, pulsegen_superinterpolator_x9, pulsegen_superinterpolator_x8, pulsegen_superinterpolator_x7, pulsegen_superinterpolator_x6, pulsegen_superinterpolator_x5, pulsegen_superinterpolator_x4, pulsegen_superinterpolator_x3, pulsegen_superinterpolator_x2, pulsegen_superinterpolator_x1, pulsegen_superinterpolator_x0, pulsegen_superinterpolator_input_input_payload_data};
		end
		pulsegen_superinterpolator_hbf0_step1 <= (~pulsegen_superinterpolator_hbf0_step1);
		pulsegen_superinterpolator_x_end_l <= pulsegen_superinterpolator_x28;
		{pulsegen_superinterpolator_x1_15, pulsegen_superinterpolator_x1_14, pulsegen_superinterpolator_x1_13, pulsegen_superinterpolator_x1_12, pulsegen_superinterpolator_x1_11, pulsegen_superinterpolator_x1_10, pulsegen_superinterpolator_x1_9, pulsegen_superinterpolator_x1_8, pulsegen_superinterpolator_x1_7, pulsegen_superinterpolator_x1_6, pulsegen_superinterpolator_x1_5, pulsegen_superinterpolator_x1_4, pulsegen_superinterpolator_x1_3, pulsegen_superinterpolator_x1_2, pulsegen_superinterpolator_x1_1, pulsegen_superinterpolator_x1_0} <= {pulsegen_superinterpolator_x1_15, pulsegen_superinterpolator_x1_14, pulsegen_superinterpolator_x1_13, pulsegen_superinterpolator_x1_12, pulsegen_superinterpolator_x1_11, pulsegen_superinterpolator_x1_10, pulsegen_superinterpolator_x1_9, pulsegen_superinterpolator_x1_8, pulsegen_superinterpolator_x1_7, pulsegen_superinterpolator_x1_6, pulsegen_superinterpolator_x1_5, pulsegen_superinterpolator_x1_4, pulsegen_superinterpolator_x1_3, pulsegen_superinterpolator_x1_2, pulsegen_superinterpolator_x1_1, pulsegen_superinterpolator_x1_0, (pulsegen_superinterpolator_hbf0_step1 ? pulsegen_superinterpolator_x1__ : pulsegen_superinterpolator_x30)};
	end
	if (pulsegen_superinterpolator_cic_input_ack) begin
		pulsegen_superinterpolator_hbf1_step1 <= (~pulsegen_superinterpolator_hbf1_step1);
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg0 <= pulsegen_superinterpolator_b0;
		pulsegen_superinterpolator_ad0 <= (pulsegen_superinterpolator_a0 + pulsegen_superinterpolator_d0);
		pulsegen_superinterpolator_m0 <= (pulsegen_superinterpolator_ad0 * pulsegen_superinterpolator_b_reg0);
		if ((~pulsegen_superinterpolator_mux_p0)) begin
			pulsegen_superinterpolator_p0 <= (pulsegen_superinterpolator_p0 + pulsegen_superinterpolator_m0);
		end else begin
			pulsegen_superinterpolator_p0 <= (pulsegen_superinterpolator_m0 + pulsegen_superinterpolator_c0);
		end
	end
	if (((~pulsegen_superinterpolator_hbf0_step1) & (~pulsegen_superinterpolator_hbfstop))) begin
		pulsegen_superinterpolator_y_reg0 <= pulsegen_superinterpolator_p0;
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg1 <= pulsegen_superinterpolator_b1;
		pulsegen_superinterpolator_ad1 <= (pulsegen_superinterpolator_a1 + pulsegen_superinterpolator_d1);
		pulsegen_superinterpolator_m1 <= (pulsegen_superinterpolator_ad1 * pulsegen_superinterpolator_b_reg1);
		if ((~pulsegen_superinterpolator_mux_p1)) begin
			pulsegen_superinterpolator_p1 <= (pulsegen_superinterpolator_p1 + pulsegen_superinterpolator_m1);
		end else begin
			pulsegen_superinterpolator_p1 <= (pulsegen_superinterpolator_m1 + pulsegen_superinterpolator_c1);
		end
	end
	if (((~pulsegen_superinterpolator_hbf0_step1) & (~pulsegen_superinterpolator_hbfstop))) begin
		pulsegen_superinterpolator_y_reg1 <= pulsegen_superinterpolator_p1;
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg2 <= pulsegen_superinterpolator_b2;
		pulsegen_superinterpolator_ad2 <= (pulsegen_superinterpolator_a2 + pulsegen_superinterpolator_d2);
		pulsegen_superinterpolator_m2 <= (pulsegen_superinterpolator_ad2 * pulsegen_superinterpolator_b_reg2);
		if ((~pulsegen_superinterpolator_mux_p2)) begin
			pulsegen_superinterpolator_p2 <= (pulsegen_superinterpolator_p2 + pulsegen_superinterpolator_m2);
		end else begin
			pulsegen_superinterpolator_p2 <= (pulsegen_superinterpolator_m2 + pulsegen_superinterpolator_c2);
		end
	end
	if (((~pulsegen_superinterpolator_hbf0_step1) & (~pulsegen_superinterpolator_hbfstop))) begin
		pulsegen_superinterpolator_y_reg2 <= pulsegen_superinterpolator_p2;
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg3 <= pulsegen_superinterpolator_b3;
		pulsegen_superinterpolator_ad3 <= (pulsegen_superinterpolator_a3 + pulsegen_superinterpolator_d3);
		pulsegen_superinterpolator_m3 <= (pulsegen_superinterpolator_ad3 * pulsegen_superinterpolator_b_reg3);
		if ((~pulsegen_superinterpolator_mux_p3)) begin
			pulsegen_superinterpolator_p3 <= (pulsegen_superinterpolator_p3 + pulsegen_superinterpolator_m3);
		end else begin
			pulsegen_superinterpolator_p3 <= (pulsegen_superinterpolator_m3 + pulsegen_superinterpolator_c3);
		end
	end
	if (((~pulsegen_superinterpolator_hbf0_step1) & (~pulsegen_superinterpolator_hbfstop))) begin
		pulsegen_superinterpolator_y_reg3 <= pulsegen_superinterpolator_p3;
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg4 <= pulsegen_superinterpolator_b4;
		pulsegen_superinterpolator_ad4 <= (pulsegen_superinterpolator_a4 + pulsegen_superinterpolator_d4);
		pulsegen_superinterpolator_m4 <= (pulsegen_superinterpolator_ad4 * pulsegen_superinterpolator_b_reg4);
		if ((~pulsegen_superinterpolator_mux_p4)) begin
			pulsegen_superinterpolator_p4 <= (pulsegen_superinterpolator_p4 + pulsegen_superinterpolator_m4);
		end else begin
			pulsegen_superinterpolator_p4 <= (pulsegen_superinterpolator_m4 + pulsegen_superinterpolator_c4);
		end
	end
	if (((~pulsegen_superinterpolator_hbf0_step1) & (~pulsegen_superinterpolator_hbfstop))) begin
		pulsegen_superinterpolator_y_reg4 <= pulsegen_superinterpolator_p4;
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg5 <= pulsegen_superinterpolator_b5;
		pulsegen_superinterpolator_ad5 <= (pulsegen_superinterpolator_a5 + pulsegen_superinterpolator_d5);
		pulsegen_superinterpolator_m5 <= (pulsegen_superinterpolator_ad5 * pulsegen_superinterpolator_b_reg5);
		if ((~pulsegen_superinterpolator_mux_p5)) begin
			pulsegen_superinterpolator_p5 <= (pulsegen_superinterpolator_p5 + pulsegen_superinterpolator_m5);
		end else begin
			pulsegen_superinterpolator_p5 <= (pulsegen_superinterpolator_m5 + pulsegen_superinterpolator_c5);
		end
	end
	if (((~pulsegen_superinterpolator_hbf0_step1) & (~pulsegen_superinterpolator_hbfstop))) begin
		pulsegen_superinterpolator_y_reg5 <= pulsegen_superinterpolator_p5;
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg6 <= pulsegen_superinterpolator_b6;
		pulsegen_superinterpolator_ad6 <= (pulsegen_superinterpolator_a6 + pulsegen_superinterpolator_d6);
		pulsegen_superinterpolator_m6 <= (pulsegen_superinterpolator_ad6 * pulsegen_superinterpolator_b_reg6);
		if ((~pulsegen_superinterpolator_mux_p6)) begin
			pulsegen_superinterpolator_p6 <= (pulsegen_superinterpolator_p6 + pulsegen_superinterpolator_m6);
		end else begin
			pulsegen_superinterpolator_p6 <= (pulsegen_superinterpolator_m6 + pulsegen_superinterpolator_c6);
		end
	end
	if (((~pulsegen_superinterpolator_hbf0_step1) & (~pulsegen_superinterpolator_hbfstop))) begin
		pulsegen_superinterpolator_y_reg6 <= pulsegen_superinterpolator_p6;
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg7 <= pulsegen_superinterpolator_b7;
		pulsegen_superinterpolator_ad7 <= (pulsegen_superinterpolator_a7 + pulsegen_superinterpolator_d7);
		pulsegen_superinterpolator_m7 <= (pulsegen_superinterpolator_ad7 * pulsegen_superinterpolator_b_reg7);
		if ((~pulsegen_superinterpolator_mux_p7)) begin
			pulsegen_superinterpolator_p7 <= (pulsegen_superinterpolator_p7 + pulsegen_superinterpolator_m7);
		end else begin
			pulsegen_superinterpolator_p7 <= (pulsegen_superinterpolator_m7 + pulsegen_superinterpolator_c7);
		end
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg8 <= pulsegen_superinterpolator_b8;
		pulsegen_superinterpolator_ad8 <= (pulsegen_superinterpolator_a8 + pulsegen_superinterpolator_d8);
		pulsegen_superinterpolator_m8 <= (pulsegen_superinterpolator_ad8 * pulsegen_superinterpolator_b_reg8);
		if ((~pulsegen_superinterpolator_mux_p8)) begin
			pulsegen_superinterpolator_p8 <= (pulsegen_superinterpolator_p8 + pulsegen_superinterpolator_m8);
		end else begin
			pulsegen_superinterpolator_p8 <= (pulsegen_superinterpolator_m8 + pulsegen_superinterpolator_c8);
		end
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg9 <= pulsegen_superinterpolator_b9;
		pulsegen_superinterpolator_ad9 <= (pulsegen_superinterpolator_a9 + pulsegen_superinterpolator_d9);
		pulsegen_superinterpolator_m9 <= (pulsegen_superinterpolator_ad9 * pulsegen_superinterpolator_b_reg9);
		if ((~pulsegen_superinterpolator_mux_p9)) begin
			pulsegen_superinterpolator_p9 <= (pulsegen_superinterpolator_p9 + pulsegen_superinterpolator_m9);
		end else begin
			pulsegen_superinterpolator_p9 <= (pulsegen_superinterpolator_m9 + pulsegen_superinterpolator_c9);
		end
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg10 <= pulsegen_superinterpolator_b10;
		pulsegen_superinterpolator_ad10 <= (pulsegen_superinterpolator_a10 + pulsegen_superinterpolator_d10);
		pulsegen_superinterpolator_m10 <= (pulsegen_superinterpolator_ad10 * pulsegen_superinterpolator_b_reg10);
		if ((~pulsegen_superinterpolator_mux_p10)) begin
			pulsegen_superinterpolator_p10 <= (pulsegen_superinterpolator_p10 + pulsegen_superinterpolator_m10);
		end else begin
			pulsegen_superinterpolator_p10 <= (pulsegen_superinterpolator_m10 + pulsegen_superinterpolator_c10);
		end
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg11 <= pulsegen_superinterpolator_b11;
		pulsegen_superinterpolator_ad11 <= (pulsegen_superinterpolator_a11 + pulsegen_superinterpolator_d11);
		pulsegen_superinterpolator_m11 <= (pulsegen_superinterpolator_ad11 * pulsegen_superinterpolator_b_reg11);
		if ((~pulsegen_superinterpolator_mux_p11)) begin
			pulsegen_superinterpolator_p11 <= (pulsegen_superinterpolator_p11 + pulsegen_superinterpolator_m11);
		end else begin
			pulsegen_superinterpolator_p11 <= (pulsegen_superinterpolator_m11 + pulsegen_superinterpolator_c11);
		end
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg12 <= pulsegen_superinterpolator_b12;
		pulsegen_superinterpolator_ad12 <= (pulsegen_superinterpolator_a12 + pulsegen_superinterpolator_d12);
		pulsegen_superinterpolator_m12 <= (pulsegen_superinterpolator_ad12 * pulsegen_superinterpolator_b_reg12);
		if ((~pulsegen_superinterpolator_mux_p12)) begin
			pulsegen_superinterpolator_p12 <= (pulsegen_superinterpolator_p12 + pulsegen_superinterpolator_m12);
		end else begin
			pulsegen_superinterpolator_p12 <= (pulsegen_superinterpolator_m12 + pulsegen_superinterpolator_c12);
		end
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg13 <= pulsegen_superinterpolator_b13;
		pulsegen_superinterpolator_ad13 <= (pulsegen_superinterpolator_a13 + pulsegen_superinterpolator_d13);
		pulsegen_superinterpolator_m13 <= (pulsegen_superinterpolator_ad13 * pulsegen_superinterpolator_b_reg13);
		if ((~pulsegen_superinterpolator_mux_p13)) begin
			pulsegen_superinterpolator_p13 <= (pulsegen_superinterpolator_p13 + pulsegen_superinterpolator_m13);
		end else begin
			pulsegen_superinterpolator_p13 <= (pulsegen_superinterpolator_m13 + pulsegen_superinterpolator_c13);
		end
	end
	if ((~pulsegen_superinterpolator_hbfstop)) begin
		pulsegen_superinterpolator_b_reg14 <= pulsegen_superinterpolator_b14;
		pulsegen_superinterpolator_ad14 <= (pulsegen_superinterpolator_a14 + pulsegen_superinterpolator_d14);
		pulsegen_superinterpolator_m14 <= (pulsegen_superinterpolator_ad14 * pulsegen_superinterpolator_b_reg14);
		if ((~pulsegen_superinterpolator_mux_p14)) begin
			pulsegen_superinterpolator_p14 <= (pulsegen_superinterpolator_p14 + pulsegen_superinterpolator_m14);
		end else begin
			pulsegen_superinterpolator_p14 <= (pulsegen_superinterpolator_m14 + pulsegen_superinterpolator_c14);
		end
	end
	pulsegen_superinterpolator_cic_inp_stall_reg <= pulsegen_superinterpolator_cic_inp_stall;
	pulsegen_superinterpolator_cic_r_reg <= pulsegen_superinterpolator_cic_r;
	if ((~pulsegen_superinterpolator_cic_inp_stall)) begin
		pulsegen_superinterpolator_cic_i <= (pulsegen_superinterpolator_cic_i + 1'd1);
	end
	if (((pulsegen_superinterpolator_cic_i == (pulsegen_superinterpolator_cic_r_reg - 1'd1)) | pulsegen_superinterpolator_cic_f_rst)) begin
		pulsegen_superinterpolator_cic_i <= 1'd0;
	end
	if (pulsegen_superinterpolator_cic_comb_ce) begin
		pulsegen_superinterpolator_cic_old0 <= pulsegen_superinterpolator_cic_out;
		pulsegen_superinterpolator_cic_diff0 <= (pulsegen_superinterpolator_cic_out - pulsegen_superinterpolator_cic_old0);
	end
	if (pulsegen_superinterpolator_cic_f_rst) begin
		pulsegen_superinterpolator_cic_old0 <= 1'd0;
		pulsegen_superinterpolator_cic_diff0 <= 1'd0;
	end
	if (pulsegen_superinterpolator_cic_comb_ce) begin
		pulsegen_superinterpolator_cic_old1 <= pulsegen_superinterpolator_cic_diff0;
		pulsegen_superinterpolator_cic_diff1 <= (pulsegen_superinterpolator_cic_diff0 - pulsegen_superinterpolator_cic_old1);
	end
	if (pulsegen_superinterpolator_cic_f_rst) begin
		pulsegen_superinterpolator_cic_old1 <= 1'd0;
		pulsegen_superinterpolator_cic_diff1 <= 1'd0;
	end
	pulsegen_superinterpolator_cic_sig_a <= pulsegen_superinterpolator_cic_sig_b;
	if (pulsegen_superinterpolator_cic_comb_ce) begin
		if (((pulsegen_superinterpolator_cic_i == 1'd0) & pulsegen_superinterpolator_cic_r_reg[0])) begin
			pulsegen_superinterpolator_cic_sig_a <= pulsegen_superinterpolator_cic_sig_i;
		end
		pulsegen_superinterpolator_cic_sig_b <= pulsegen_superinterpolator_cic_sig_i;
	end
	if (pulsegen_superinterpolator_cic_f_rst) begin
		pulsegen_superinterpolator_cic_sig_a <= 1'd0;
		pulsegen_superinterpolator_cic_sig_b <= 1'd0;
	end
	if ((~pulsegen_superinterpolator_cic_inp_stall)) begin
		pulsegen_superinterpolator_cic_sig_a0 <= pulsegen_superinterpolator_cic_sig_a;
		pulsegen_superinterpolator_cic_sum_ab <= (pulsegen_superinterpolator_cic_sig_a + pulsegen_superinterpolator_cic_sig_b);
		pulsegen_superinterpolator_cic_sum_a <= (pulsegen_superinterpolator_cic_sum_b + pulsegen_superinterpolator_cic_sig_a0);
		pulsegen_superinterpolator_cic_sum_b <= (pulsegen_superinterpolator_cic_sum_b + pulsegen_superinterpolator_cic_sum_ab);
	end
	if (pulsegen_superinterpolator_cic_f_rst) begin
		pulsegen_superinterpolator_cic_sig_a0 <= 1'd0;
		pulsegen_superinterpolator_cic_sum_ab <= 1'd0;
		pulsegen_superinterpolator_cic_sum_a <= 1'd0;
		pulsegen_superinterpolator_cic_sum_b <= 1'd0;
	end
	accu <= (accu[15:0] + inp);
	out <= accu[16];
	state <= next_state;
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[3:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_reset0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch3_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch2_w;
			end
			2'd3: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch1_w;
			end
			3'd4: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
			end
			3'd5: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors3_w;
			end
			3'd6: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors2_w;
			end
			3'd7: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors1_w;
			end
			4'd8: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors0_w;
			end
		endcase
	end
	if (csrbank0_reset0_re) begin
		main_reset_storage <= csrbank0_reset0_r;
	end
	main_reset_re <= csrbank0_reset0_re;
	if (csrbank0_scratch3_re) begin
		main_scratch_storage[31:24] <= csrbank0_scratch3_r;
	end
	if (csrbank0_scratch2_re) begin
		main_scratch_storage[23:16] <= csrbank0_scratch2_r;
	end
	if (csrbank0_scratch1_re) begin
		main_scratch_storage[15:8] <= csrbank0_scratch1_r;
	end
	if (csrbank0_scratch0_re) begin
		main_scratch_storage[7:0] <= csrbank0_scratch0_r;
	end
	main_scratch_re <= csrbank0_scratch0_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[1:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_crg_reset0_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_rx_inband_status_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_mdio_w0_w;
			end
			2'd3: begin
				interface1_bank_bus_dat_r <= csrbank1_mdio_r_w;
			end
		endcase
	end
	if (csrbank1_crg_reset0_re) begin
		ethphy_reset_storage <= csrbank1_crg_reset0_r;
	end
	ethphy_reset_re <= csrbank1_crg_reset0_re;
	if (csrbank1_mdio_w0_re) begin
		ethphy_mdio_storage[2:0] <= csrbank1_mdio_w0_r;
	end
	ethphy_mdio_re <= csrbank1_mdio_w0_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[2:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_go0_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_r3_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_r2_w;
			end
			2'd3: begin
				interface2_bank_bus_dat_r <= csrbank2_r1_w;
			end
			3'd4: begin
				interface2_bank_bus_dat_r <= csrbank2_r0_w;
			end
		endcase
	end
	if (csrbank2_go0_re) begin
		pulsegen_go_storage <= csrbank2_go0_r;
	end
	pulsegen_go_re <= csrbank2_go0_re;
	if (csrbank2_r3_re) begin
		pulsegen_r_storage[31:24] <= csrbank2_r3_r;
	end
	if (csrbank2_r2_re) begin
		pulsegen_r_storage[23:16] <= csrbank2_r2_r;
	end
	if (csrbank2_r1_re) begin
		pulsegen_r_storage[15:8] <= csrbank2_r1_r;
	end
	if (csrbank2_r0_re) begin
		pulsegen_r_storage[7:0] <= csrbank2_r0_r;
	end
	pulsegen_r_re <= csrbank2_r0_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[3:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_control1_w;
			end
			1'd1: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_control0_w;
			end
			2'd2: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_status_w;
			end
			2'd3: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_mosi4_w;
			end
			3'd4: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_mosi3_w;
			end
			3'd5: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_mosi2_w;
			end
			3'd6: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_mosi1_w;
			end
			3'd7: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_mosi0_w;
			end
			4'd8: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_miso4_w;
			end
			4'd9: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_miso3_w;
			end
			4'd10: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_miso2_w;
			end
			4'd11: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_miso1_w;
			end
			4'd12: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_miso0_w;
			end
			4'd13: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_cs0_w;
			end
			4'd14: begin
				interface3_bank_bus_dat_r <= csrbank3_spi_loopback0_w;
			end
		endcase
	end
	if (csrbank3_spi_control1_re) begin
		spiflash_control_storage[15:8] <= csrbank3_spi_control1_r;
	end
	if (csrbank3_spi_control0_re) begin
		spiflash_control_storage[7:0] <= csrbank3_spi_control0_r;
	end
	spiflash_control_re <= csrbank3_spi_control0_re;
	if (csrbank3_spi_mosi4_re) begin
		spiflash_mosi_storage[39:32] <= csrbank3_spi_mosi4_r;
	end
	if (csrbank3_spi_mosi3_re) begin
		spiflash_mosi_storage[31:24] <= csrbank3_spi_mosi3_r;
	end
	if (csrbank3_spi_mosi2_re) begin
		spiflash_mosi_storage[23:16] <= csrbank3_spi_mosi2_r;
	end
	if (csrbank3_spi_mosi1_re) begin
		spiflash_mosi_storage[15:8] <= csrbank3_spi_mosi1_r;
	end
	if (csrbank3_spi_mosi0_re) begin
		spiflash_mosi_storage[7:0] <= csrbank3_spi_mosi0_r;
	end
	spiflash_mosi_re <= csrbank3_spi_mosi0_re;
	if (csrbank3_spi_cs0_re) begin
		spiflash_cs_storage <= csrbank3_spi_cs0_r;
	end
	spiflash_cs_re <= csrbank3_spi_cs0_re;
	if (csrbank3_spi_loopback0_re) begin
		spiflash_loopback_storage <= csrbank3_spi_loopback0_r;
	end
	spiflash_loopback_re <= csrbank3_spi_loopback0_re;
	if (sys_rst) begin
		main_reset_storage <= 1'd0;
		main_reset_re <= 1'd0;
		main_scratch_storage <= 32'd305419896;
		main_scratch_re <= 1'd0;
		main_bus_errors <= 32'd0;
		ethphy_reset_storage <= 1'd0;
		ethphy_reset_re <= 1'd0;
		ethphy_counter <= 9'd0;
		ethphy_mdio_storage <= 3'd0;
		ethphy_mdio_re <= 1'd0;
		main_etherbone_tx_packetizer_count <= 1'd0;
		main_etherbone_tx_packetizer_sink_d_valid <= 1'd0;
		main_etherbone_tx_packetizer_sink_d_ready <= 1'd0;
		main_etherbone_tx_packetizer_fsm_from_idle <= 1'd0;
		main_etherbone_rx_depacketizer_count <= 1'd0;
		main_etherbone_rx_depacketizer_sink_d_valid <= 1'd0;
		main_etherbone_rx_depacketizer_sink_d_ready <= 1'd0;
		main_etherbone_rx_depacketizer_fsm_from_idle <= 1'd0;
		main_etherbone_record_depacketizer_count <= 1'd0;
		main_etherbone_record_depacketizer_sink_d_valid <= 1'd0;
		main_etherbone_record_depacketizer_sink_d_ready <= 1'd0;
		main_etherbone_record_depacketizer_fsm_from_idle <= 1'd0;
		main_etherbone_record_receiver_fifo_readable <= 1'd0;
		main_etherbone_record_receiver_fifo_level0 <= 3'd0;
		main_etherbone_record_receiver_fifo_produce <= 2'd0;
		main_etherbone_record_receiver_fifo_consume <= 2'd0;
		main_etherbone_record_first <= 1'd1;
		main_etherbone_record_sender_fifo_readable <= 1'd0;
		main_etherbone_record_sender_fifo_level0 <= 3'd0;
		main_etherbone_record_sender_fifo_produce <= 2'd0;
		main_etherbone_record_sender_fifo_consume <= 2'd0;
		main_etherbone_record_packetizer_count <= 1'd0;
		main_etherbone_record_packetizer_sink_d_valid <= 1'd0;
		main_etherbone_record_packetizer_sink_d_ready <= 1'd0;
		main_etherbone_record_packetizer_fsm_from_idle <= 1'd0;
		main_etherbone_dispatcher_first <= 1'd1;
		main_etherbone_dispatcher_ongoing1 <= 1'd0;
		main_etherbone_dispatcher_sel_ongoing <= 1'd0;
		main_etherbone_grant <= 1'd0;
		main_etherbone_status0_first <= 1'd1;
		main_etherbone_status0_ongoing1 <= 1'd0;
		main_etherbone_status1_first <= 1'd1;
		main_etherbone_status1_ongoing1 <= 1'd0;
		spiflash_pads_clk <= 1'd0;
		spiflash_pads_cs_n <= 1'd0;
		spiflash_pads_mosi <= 1'd0;
		spiflash_miso1 <= 40'd0;
		spiflash_control_storage <= 16'd0;
		spiflash_control_re <= 1'd0;
		spiflash_mosi_re <= 1'd0;
		spiflash_cs_storage <= 1'd1;
		spiflash_cs_re <= 1'd0;
		spiflash_loopback_storage <= 1'd0;
		spiflash_loopback_re <= 1'd0;
		spiflash_count <= 6'd0;
		spiflash_clk_divider1 <= 16'd0;
		spiflash_mosi_data <= 40'd0;
		spiflash_mosi_sel <= 6'd0;
		spiflash_miso_data <= 40'd0;
		t <= 32'd0;
		wb_ack <= 1'd0;
		pulsegen_go_storage <= 1'd0;
		pulsegen_go_re <= 1'd0;
		pulsegen_r_storage <= 32'd200;
		pulsegen_r_re <= 1'd0;
		pulsegen_pos <= 7'd0;
		pulsegen_slow <= 2'd0;
		pulsegen_busy <= 1'd0;
		pulsegen_done <= 1'd0;
		pulsegen_stage <= 4'd0;
		pulsegen_scaling_reg <= 7'd0;
		pulsegen_fft_w_idx <= 6'd0;
		pulsegen_fft_w_idx_l <= 1'd0;
		pulsegen_fft_pos_r <= 6'd0;
		pulsegen_fft_stage_w <= 4'd0;
		pulsegen_fft_stage_w_n <= 4'd0;
		pulsegen_fft_a_mux_l <= 1'd0;
		pulsegen_fft_a_x2_mux_l <= 1'd0;
		pulsegen_fft_bfl_we <= 1'd0;
		pulsegen_fft_laststart <= 1'd0;
		pulsegen_last_bit_xout_adr_l <= 1'd0;
		pulsegen_superinterpolator_hbf0_step1 <= 1'd0;
		pulsegen_superinterpolator_hbf1_step1 <= 1'd0;
		pulsegen_superinterpolator_x0 <= 16'd0;
		pulsegen_superinterpolator_x1 <= 16'd0;
		pulsegen_superinterpolator_x2 <= 16'd0;
		pulsegen_superinterpolator_x3 <= 16'd0;
		pulsegen_superinterpolator_x4 <= 16'd0;
		pulsegen_superinterpolator_x5 <= 16'd0;
		pulsegen_superinterpolator_x6 <= 16'd0;
		pulsegen_superinterpolator_x7 <= 16'd0;
		pulsegen_superinterpolator_x8 <= 16'd0;
		pulsegen_superinterpolator_x9 <= 16'd0;
		pulsegen_superinterpolator_x10 <= 16'd0;
		pulsegen_superinterpolator_x11 <= 16'd0;
		pulsegen_superinterpolator_x12 <= 16'd0;
		pulsegen_superinterpolator_x13 <= 16'd0;
		pulsegen_superinterpolator_x14 <= 16'd0;
		pulsegen_superinterpolator_x15 <= 16'd0;
		pulsegen_superinterpolator_x16 <= 16'd0;
		pulsegen_superinterpolator_x17 <= 16'd0;
		pulsegen_superinterpolator_x18 <= 16'd0;
		pulsegen_superinterpolator_x19 <= 16'd0;
		pulsegen_superinterpolator_x20 <= 16'd0;
		pulsegen_superinterpolator_x21 <= 16'd0;
		pulsegen_superinterpolator_x22 <= 16'd0;
		pulsegen_superinterpolator_x23 <= 16'd0;
		pulsegen_superinterpolator_x24 <= 16'd0;
		pulsegen_superinterpolator_x25 <= 16'd0;
		pulsegen_superinterpolator_x26 <= 16'd0;
		pulsegen_superinterpolator_x27 <= 16'd0;
		pulsegen_superinterpolator_x28 <= 16'd0;
		pulsegen_superinterpolator_x29 <= 16'd0;
		pulsegen_superinterpolator_x30 <= 16'd0;
		pulsegen_superinterpolator_x31 <= 16'd0;
		pulsegen_superinterpolator_x_end_l <= 16'd0;
		pulsegen_superinterpolator_x1_0 <= 16'd0;
		pulsegen_superinterpolator_x1_1 <= 16'd0;
		pulsegen_superinterpolator_x1_2 <= 16'd0;
		pulsegen_superinterpolator_x1_3 <= 16'd0;
		pulsegen_superinterpolator_x1_4 <= 16'd0;
		pulsegen_superinterpolator_x1_5 <= 16'd0;
		pulsegen_superinterpolator_x1_6 <= 16'd0;
		pulsegen_superinterpolator_x1_7 <= 16'd0;
		pulsegen_superinterpolator_x1_8 <= 16'd0;
		pulsegen_superinterpolator_x1_9 <= 16'd0;
		pulsegen_superinterpolator_x1_10 <= 16'd0;
		pulsegen_superinterpolator_x1_11 <= 16'd0;
		pulsegen_superinterpolator_x1_12 <= 16'd0;
		pulsegen_superinterpolator_x1_13 <= 16'd0;
		pulsegen_superinterpolator_x1_14 <= 16'd0;
		pulsegen_superinterpolator_x1_15 <= 16'd0;
		pulsegen_superinterpolator_y_reg0 <= 36'd0;
		pulsegen_superinterpolator_y_reg1 <= 36'd0;
		pulsegen_superinterpolator_y_reg2 <= 36'd0;
		pulsegen_superinterpolator_y_reg3 <= 36'd0;
		pulsegen_superinterpolator_y_reg4 <= 36'd0;
		pulsegen_superinterpolator_y_reg5 <= 36'd0;
		pulsegen_superinterpolator_y_reg6 <= 36'd0;
		pulsegen_superinterpolator_cic_i <= 10'd0;
		pulsegen_superinterpolator_cic_inp_stall_reg <= 1'd0;
		pulsegen_superinterpolator_cic_r_reg <= 10'd0;
		pulsegen_superinterpolator_cic_old0 <= 18'd0;
		pulsegen_superinterpolator_cic_diff0 <= 19'd0;
		pulsegen_superinterpolator_cic_old1 <= 19'd0;
		pulsegen_superinterpolator_cic_diff1 <= 20'd0;
		pulsegen_superinterpolator_cic_sig_a <= 19'd0;
		pulsegen_superinterpolator_cic_sig_b <= 19'd0;
		pulsegen_superinterpolator_cic_sig_a0 <= 19'd0;
		pulsegen_superinterpolator_cic_sum_ab <= 20'd0;
		pulsegen_superinterpolator_cic_sum_a <= 28'd0;
		pulsegen_superinterpolator_cic_sum_b <= 28'd0;
		pulsegen_superinterpolator_b_reg0 <= 18'd0;
		pulsegen_superinterpolator_ad0 <= 18'd0;
		pulsegen_superinterpolator_m0 <= 36'd0;
		pulsegen_superinterpolator_p0 <= 36'd0;
		pulsegen_superinterpolator_b_reg1 <= 18'd0;
		pulsegen_superinterpolator_ad1 <= 18'd0;
		pulsegen_superinterpolator_m1 <= 36'd0;
		pulsegen_superinterpolator_p1 <= 36'd0;
		pulsegen_superinterpolator_b_reg2 <= 18'd0;
		pulsegen_superinterpolator_ad2 <= 18'd0;
		pulsegen_superinterpolator_m2 <= 36'd0;
		pulsegen_superinterpolator_p2 <= 36'd0;
		pulsegen_superinterpolator_b_reg3 <= 18'd0;
		pulsegen_superinterpolator_ad3 <= 18'd0;
		pulsegen_superinterpolator_m3 <= 36'd0;
		pulsegen_superinterpolator_p3 <= 36'd0;
		pulsegen_superinterpolator_b_reg4 <= 18'd0;
		pulsegen_superinterpolator_ad4 <= 18'd0;
		pulsegen_superinterpolator_m4 <= 36'd0;
		pulsegen_superinterpolator_p4 <= 36'd0;
		pulsegen_superinterpolator_b_reg5 <= 18'd0;
		pulsegen_superinterpolator_ad5 <= 18'd0;
		pulsegen_superinterpolator_m5 <= 36'd0;
		pulsegen_superinterpolator_p5 <= 36'd0;
		pulsegen_superinterpolator_b_reg6 <= 18'd0;
		pulsegen_superinterpolator_ad6 <= 18'd0;
		pulsegen_superinterpolator_m6 <= 36'd0;
		pulsegen_superinterpolator_p6 <= 36'd0;
		pulsegen_superinterpolator_b_reg7 <= 18'd0;
		pulsegen_superinterpolator_ad7 <= 18'd0;
		pulsegen_superinterpolator_m7 <= 36'd0;
		pulsegen_superinterpolator_p7 <= 36'd0;
		pulsegen_superinterpolator_b_reg8 <= 18'd0;
		pulsegen_superinterpolator_ad8 <= 18'd0;
		pulsegen_superinterpolator_m8 <= 36'd0;
		pulsegen_superinterpolator_p8 <= 36'd0;
		pulsegen_superinterpolator_b_reg9 <= 18'd0;
		pulsegen_superinterpolator_ad9 <= 18'd0;
		pulsegen_superinterpolator_m9 <= 36'd0;
		pulsegen_superinterpolator_p9 <= 36'd0;
		pulsegen_superinterpolator_b_reg10 <= 18'd0;
		pulsegen_superinterpolator_ad10 <= 18'd0;
		pulsegen_superinterpolator_m10 <= 36'd0;
		pulsegen_superinterpolator_p10 <= 36'd0;
		pulsegen_superinterpolator_b_reg11 <= 18'd0;
		pulsegen_superinterpolator_ad11 <= 18'd0;
		pulsegen_superinterpolator_m11 <= 36'd0;
		pulsegen_superinterpolator_p11 <= 36'd0;
		pulsegen_superinterpolator_b_reg12 <= 18'd0;
		pulsegen_superinterpolator_ad12 <= 18'd0;
		pulsegen_superinterpolator_m12 <= 36'd0;
		pulsegen_superinterpolator_p12 <= 36'd0;
		pulsegen_superinterpolator_b_reg13 <= 18'd0;
		pulsegen_superinterpolator_ad13 <= 18'd0;
		pulsegen_superinterpolator_m13 <= 36'd0;
		pulsegen_superinterpolator_p13 <= 36'd0;
		pulsegen_superinterpolator_b_reg14 <= 18'd0;
		pulsegen_superinterpolator_ad14 <= 18'd0;
		pulsegen_superinterpolator_m14 <= 36'd0;
		pulsegen_superinterpolator_p14 <= 36'd0;
		out <= 1'd0;
		accu <= 17'd0;
		liteethetherbonepackettx_liteethetherbonepacketpacketizer_state <= 2'd0;
		liteethetherbonepackettx_fsm_state <= 1'd0;
		liteethetherbonepacketrx_liteethetherbonepacketdepacketizer_state <= 2'd0;
		liteethetherbonepacketrx_fsm_state <= 2'd0;
		liteethetherboneprobe_state <= 1'd0;
		liteethetherbonerecorddepacketizer_state <= 2'd0;
		liteethetherbonerecordreceiver_state <= 2'd0;
		liteethetherbonerecordsender_state <= 2'd0;
		liteethetherbonerecordpacketizer_state <= 2'd0;
		liteethetherbonewishbonemaster_state <= 2'd0;
		ecp5spiflash_state <= 2'd0;
		slave_sel_r <= 2'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	multiregimpl0_regs0 <= ethphy_mdio_data_r;
	multiregimpl0_regs1 <= multiregimpl0_regs0;
end

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF (
	.A(ethphy_eth_tx_clk_o),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(eth_clocks_tx)
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_1 (
	.A(ethphy_tx_ctl_oddrx1f),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(eth_tx_ctl)
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_2 (
	.A(ethphy_tx_data_oddrx1f[0]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(eth_tx_data[0])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_3 (
	.A(ethphy_tx_data_oddrx1f[1]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(eth_tx_data[1])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_4 (
	.A(ethphy_tx_data_oddrx1f[2]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(eth_tx_data[2])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY0")
) DELAYF_5 (
	.A(ethphy_tx_data_oddrx1f[3]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(eth_tx_data[3])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_6 (
	.A(eth_rx_ctl),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_ctl_delayf)
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_7 (
	.A(eth_rx_data[0]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[0])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_8 (
	.A(eth_rx_data[1]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[1])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_9 (
	.A(eth_rx_data[2]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[2])
);

DELAYF #(
	.DEL_MODE("SCLK_ALIGNED"),
	.DEL_VALUE("DELAY80")
) DELAYF_10 (
	.A(eth_rx_data[3]),
	.DIRECTION(1'd0),
	.LOADN(1'd1),
	.MOVE(1'd0),
	.Z(ethphy_liteethphyrgmiirx_rx_data_delayf[3])
);

reg [11:0] storage[0:4];
reg [11:0] memdat;
always @(posedge eth_rx_clk) begin
	if (main_ethcore_mac_crc32_checker_syncfifo_wrport_we)
		storage[main_ethcore_mac_crc32_checker_syncfifo_wrport_adr] <= main_ethcore_mac_crc32_checker_syncfifo_wrport_dat_w;
	memdat <= storage[main_ethcore_mac_crc32_checker_syncfifo_wrport_adr];
end

always @(posedge eth_rx_clk) begin
end

assign main_ethcore_mac_crc32_checker_syncfifo_wrport_dat_r = memdat;
assign main_ethcore_mac_crc32_checker_syncfifo_rdport_dat_r = storage[main_ethcore_mac_crc32_checker_syncfifo_rdport_adr];

reg [11:0] storage_1[0:63];
reg [5:0] memadr;
reg [5:0] memadr_1;
always @(posedge eth_tx_clk) begin
	if (main_ethcore_mac_tx_cdc_wrport_we)
		storage_1[main_ethcore_mac_tx_cdc_wrport_adr] <= main_ethcore_mac_tx_cdc_wrport_dat_w;
	memadr <= main_ethcore_mac_tx_cdc_wrport_adr;
end

always @(posedge eth_tx_clk) begin
	memadr_1 <= main_ethcore_mac_tx_cdc_rdport_adr;
end

assign main_ethcore_mac_tx_cdc_wrport_dat_r = storage_1[memadr];
assign main_ethcore_mac_tx_cdc_rdport_dat_r = storage_1[memadr_1];

reg [11:0] storage_2[0:63];
reg [5:0] memadr_2;
reg [5:0] memadr_3;
always @(posedge eth_rx_clk) begin
	if (main_ethcore_mac_rx_cdc_wrport_we)
		storage_2[main_ethcore_mac_rx_cdc_wrport_adr] <= main_ethcore_mac_rx_cdc_wrport_dat_w;
	memadr_2 <= main_ethcore_mac_rx_cdc_wrport_adr;
end

always @(posedge eth_tx_clk) begin
	memadr_3 <= main_ethcore_mac_rx_cdc_rdport_adr;
end

assign main_ethcore_mac_rx_cdc_wrport_dat_r = storage_2[memadr_2];
assign main_ethcore_mac_rx_cdc_rdport_dat_r = storage_2[memadr_3];

reg [122:0] storage_3[0:127];
reg [122:0] memdat_1;
reg [122:0] memdat_2;
always @(posedge eth_tx_clk) begin
	if (main_ethcore_icmp_echo_buffer_wrport_we)
		storage_3[main_ethcore_icmp_echo_buffer_wrport_adr] <= main_ethcore_icmp_echo_buffer_wrport_dat_w;
	memdat_1 <= storage_3[main_ethcore_icmp_echo_buffer_wrport_adr];
end

always @(posedge eth_tx_clk) begin
	if (main_ethcore_icmp_echo_buffer_rdport_re)
		memdat_2 <= storage_3[main_ethcore_icmp_echo_buffer_rdport_adr];
end

assign main_ethcore_icmp_echo_buffer_wrport_dat_r = memdat_1;
assign main_ethcore_icmp_echo_buffer_rdport_dat_r = memdat_2;

reg [117:0] storage_4[0:3];
reg [1:0] memadr_4;
reg [1:0] memadr_5;
always @(posedge etherbone_clk) begin
	if (main_etherbone_tx_cdc_wrport_we)
		storage_4[main_etherbone_tx_cdc_wrport_adr] <= main_etherbone_tx_cdc_wrport_dat_w;
	memadr_4 <= main_etherbone_tx_cdc_wrport_adr;
end

always @(posedge eth_tx_clk) begin
	memadr_5 <= main_etherbone_tx_cdc_rdport_adr;
end

assign main_etherbone_tx_cdc_wrport_dat_r = storage_4[memadr_4];
assign main_etherbone_tx_cdc_rdport_dat_r = storage_4[memadr_5];

reg [117:0] storage_5[0:3];
reg [1:0] memadr_6;
reg [1:0] memadr_7;
always @(posedge eth_tx_clk) begin
	if (main_etherbone_rx_cdc_wrport_we)
		storage_5[main_etherbone_rx_cdc_wrport_adr] <= main_etherbone_rx_cdc_wrport_dat_w;
	memadr_6 <= main_etherbone_rx_cdc_wrport_adr;
end

always @(posedge etherbone_clk) begin
	memadr_7 <= main_etherbone_rx_cdc_rdport_adr;
end

assign main_etherbone_rx_cdc_wrport_dat_r = storage_5[memadr_6];
assign main_etherbone_rx_cdc_rdport_dat_r = storage_5[memadr_7];

reg [67:0] storage_6[0:3];
reg [67:0] memdat_3;
reg [67:0] memdat_4;
always @(posedge sys_clk) begin
	if (main_etherbone_record_receiver_fifo_wrport_we)
		storage_6[main_etherbone_record_receiver_fifo_wrport_adr] <= main_etherbone_record_receiver_fifo_wrport_dat_w;
	memdat_3 <= storage_6[main_etherbone_record_receiver_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (main_etherbone_record_receiver_fifo_rdport_re)
		memdat_4 <= storage_6[main_etherbone_record_receiver_fifo_rdport_adr];
end

assign main_etherbone_record_receiver_fifo_wrport_dat_r = memdat_3;
assign main_etherbone_record_receiver_fifo_rdport_dat_r = memdat_4;

reg [110:0] storage_7[0:3];
reg [110:0] memdat_5;
reg [110:0] memdat_6;
always @(posedge sys_clk) begin
	if (main_etherbone_record_sender_fifo_wrport_we)
		storage_7[main_etherbone_record_sender_fifo_wrport_adr] <= main_etherbone_record_sender_fifo_wrport_dat_w;
	memdat_5 <= storage_7[main_etherbone_record_sender_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (main_etherbone_record_sender_fifo_rdport_re)
		memdat_6 <= storage_7[main_etherbone_record_sender_fifo_rdport_adr];
end

assign main_etherbone_record_sender_fifo_wrport_dat_r = memdat_5;
assign main_etherbone_record_sender_fifo_rdport_dat_r = memdat_6;

USRMCLK USRMCLK(
	.USRMCLKI(spiflash_pads_clk),
	.USRMCLKTS(1'd0)
);

reg [35:0] twiddle[0:31];
reg [4:0] memadr_8;
always @(posedge sys_clk) begin
	memadr_8 <= pulsegen_fft_adr;
end

assign pulsegen_fft_dat_r = twiddle[memadr_8];

initial begin
	$readmemh("twiddle.init", twiddle);
end

reg [35:0] data1[0:63];
reg [5:0] memadr_9;
reg [5:0] memadr_10;
always @(posedge sys_clk) begin
	if (pulsegen_xram1_port1_we)
		data1[pulsegen_xram1_port1_adr] <= pulsegen_xram1_port1_dat_w;
	memadr_9 <= pulsegen_xram1_port1_adr;
end

always @(posedge sys_clk) begin
	if (pulsegen_xram1_port2_we)
		data1[pulsegen_xram1_port2_adr] <= pulsegen_xram1_port2_dat_w;
	memadr_10 <= pulsegen_xram1_port2_adr;
end

assign pulsegen_xram1_port1_dat_r = data1[memadr_9];
assign pulsegen_xram1_port2_dat_r = data1[memadr_10];

initial begin
	$readmemh("data1.init", data1);
end

reg [35:0] data2a[0:63];
reg [5:0] memadr_11;
reg [5:0] memadr_12;
always @(posedge sys_clk) begin
	if (pulsegen_xram2a_port1_we)
		data2a[pulsegen_xram2a_port1_adr] <= pulsegen_xram2a_port1_dat_w;
	memadr_11 <= pulsegen_xram2a_port1_adr;
end

always @(posedge sys_clk) begin
	if (pulsegen_xram2a_port2_we)
		data2a[pulsegen_xram2a_port2_adr] <= pulsegen_xram2a_port2_dat_w;
	memadr_12 <= pulsegen_xram2a_port2_adr;
end

assign pulsegen_xram2a_port1_dat_r = data2a[memadr_11];
assign pulsegen_xram2a_port2_dat_r = data2a[memadr_12];

reg [35:0] data2b[0:63];
reg [5:0] memadr_13;
reg [5:0] memadr_14;
always @(posedge sys_clk) begin
	if (pulsegen_xram2b_port1_we)
		data2b[pulsegen_xram2b_port1_adr] <= pulsegen_xram2b_port1_dat_w;
	memadr_13 <= pulsegen_xram2b_port1_adr;
end

always @(posedge sys_clk) begin
	if (pulsegen_xram2b_port2_we)
		data2b[pulsegen_xram2b_port2_adr] <= pulsegen_xram2b_port2_dat_w;
	memadr_14 <= pulsegen_xram2b_port2_adr;
end

assign pulsegen_xram2b_port1_dat_r = data2b[memadr_13];
assign pulsegen_xram2b_port2_dat_r = data2b[memadr_14];

reg [17:0] gaintweaks[0:1023];
reg [9:0] memadr_15;
always @(posedge sys_clk) begin
	memadr_15 <= pulsegen_superinterpolator_cic_adr;
end

assign pulsegen_superinterpolator_cic_dat_r = gaintweaks[memadr_15];

initial begin
	$readmemh("gaintweaks.init", gaintweaks);
end

(* FREQUENCY_PIN_CLKI = "25.0", ICP_CURRENT = "6", LPF_RESISTOR = "16", MFG_ENABLE_FILTEROPAMP = "1", MFG_GMCREF_SEL = "2" *) EHXPLLL #(
	.CLKFB_DIV(5'd16),
	.CLKI_DIV(1'd1),
	.CLKOP_CPHASE(3'd7),
	.CLKOP_DIV(4'd8),
	.CLKOP_ENABLE("ENABLED"),
	.CLKOP_FPHASE(1'd0),
	.CLKOS3_CPHASE(5'd23),
	.CLKOS3_DIV(1'd1),
	.CLKOS3_ENABLE("ENABLED"),
	.CLKOS3_FPHASE(1'd0),
	.FEEDBK_PATH("INT_OS3")
) EHXPLLL (
	.CLKI(crg_clkin),
	.RST(crg_reset),
	.CLKOP(crg_clkout),
	.LOCK(crg_locked)
);

FD1S3BX FD1S3BX(
	.CK(sys_clk),
	.D(1'd0),
	.PD(((~crg_locked) | crg_reset)),
	.Q(rst10)
);

FD1S3BX FD1S3BX_1(
	.CK(sys_clk),
	.D(rst10),
	.PD(((~crg_locked) | crg_reset)),
	.Q(sys_rst)
);

ODDRX1F ODDRX1F(
	.D0(1'd1),
	.D1(1'd0),
	.SCLK(eth_tx_clk),
	.Q(ethphy_eth_tx_clk_o)
);

FD1S3BX FD1S3BX_2(
	.CK(eth_tx_clk),
	.D(1'd0),
	.PD(ethphy_reset0),
	.Q(rst11)
);

FD1S3BX FD1S3BX_3(
	.CK(eth_tx_clk),
	.D(rst11),
	.PD(ethphy_reset0),
	.Q(eth_tx_rst)
);

FD1S3BX FD1S3BX_4(
	.CK(eth_rx_clk),
	.D(1'd0),
	.PD(ethphy_reset0),
	.Q(rst12)
);

FD1S3BX FD1S3BX_5(
	.CK(eth_rx_clk),
	.D(rst12),
	.PD(ethphy_reset0),
	.Q(eth_rx_rst)
);

ODDRX1F ODDRX1F_1(
	.D0(ethphy_sink_valid),
	.D1(ethphy_sink_valid),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_ctl_oddrx1f)
);

ODDRX1F ODDRX1F_2(
	.D0(ethphy_sink_payload_data[0]),
	.D1(ethphy_sink_payload_data[4]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[0])
);

ODDRX1F ODDRX1F_3(
	.D0(ethphy_sink_payload_data[1]),
	.D1(ethphy_sink_payload_data[5]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[1])
);

ODDRX1F ODDRX1F_4(
	.D0(ethphy_sink_payload_data[2]),
	.D1(ethphy_sink_payload_data[6]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[2])
);

ODDRX1F ODDRX1F_5(
	.D0(ethphy_sink_payload_data[3]),
	.D1(ethphy_sink_payload_data[7]),
	.SCLK(eth_tx_clk),
	.Q(ethphy_tx_data_oddrx1f[3])
);

IDDRX1F IDDRX1F(
	.D(ethphy_liteethphyrgmiirx_rx_ctl_delayf),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_ctl[0]),
	.Q1(ethphy_liteethphyrgmiirx_rx_ctl[1])
);

IDDRX1F IDDRX1F_1(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[0]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[0]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[4])
);

IDDRX1F IDDRX1F_2(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[1]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[1]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[5])
);

IDDRX1F IDDRX1F_3(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[2]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[2]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[6])
);

IDDRX1F IDDRX1F_4(
	.D(ethphy_liteethphyrgmiirx_rx_data_delayf[3]),
	.SCLK(eth_rx_clk),
	.Q0(ethphy_liteethphyrgmiirx_rx_data[3]),
	.Q1(ethphy_liteethphyrgmiirx_rx_data[7])
);

TRELLIS_IO #(
	.DIR("BIDIR")
) TRELLIS_IO (
	.B(eth_mdio),
	.I(ethphy_mdio_data_w),
	.T((~ethphy_mdio_data_oe)),
	.O(ethphy_mdio_data_r)
);

endmodule
